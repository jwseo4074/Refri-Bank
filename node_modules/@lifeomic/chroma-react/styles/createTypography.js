"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTypography = exports.fontSizes = exports.fontWeights = exports.fontFamilies = void 0;
var deepmerge_1 = __importDefault(require("deepmerge"));
exports.fontFamilies = {
    sansSerif: '"Lato", Helvetica, Roboto, Arial, "Lucida Grande", sans-serif',
    monospace: '"Ubuntu Mono", Consolas, "Lucida Console", Monaco, Courier, monospace',
};
exports.fontWeights = {
    lighter: 100,
    light: 300,
    regular: 400,
    bold: 700,
    bolder: 900,
};
exports.fontSizes = {
    h1: '3rem',
    h2: '2.25rem',
    h3: '1.875rem',
    h4: '1.5rem',
    h5: '1.25rem',
    h6: '1.125rem',
    body: '1rem',
    button: '0.75rem',
    subtitle: '0.875rem',
    caption: '0.75rem',
    tooltip: '0.6875rem',
    code: '1rem',
};
var baseTypography = {
    fontFamily: exports.fontFamilies.sansSerif,
    fontFamilyMonospace: exports.fontFamilies.monospace,
    fontWeightLighter: exports.fontWeights.lighter,
    fontWeightLight: exports.fontWeights.light,
    fontWeightRegular: exports.fontWeights.regular,
    fontWeightMedium: exports.fontWeights.regular,
    fontWeightBold: exports.fontWeights.bold,
    fontWeightBolder: exports.fontWeights.bolder,
    h1: {
        fontSize: exports.fontSizes.h1,
    },
    h2: {
        fontSize: exports.fontSizes.h2,
    },
    h3: {
        fontSize: exports.fontSizes.h3,
    },
    h4: {
        fontSize: exports.fontSizes.h4,
    },
    h5: {
        fontSize: exports.fontSizes.h5,
    },
    h6: {
        fontSize: exports.fontSizes.h6,
    },
    body1: {
        fontSize: exports.fontSizes.body,
    },
    body2: {
        fontSize: exports.fontSizes.subtitle,
    },
    subtitle1: {
        fontSize: exports.fontSizes.subtitle,
    },
    subtitle2: {
        fontSize: exports.fontSizes.subtitle,
    },
    button: {
        textTransform: 'initial',
        fontSize: exports.fontSizes.button,
        fontWeight: exports.fontWeights.bold,
        letterSpacing: 0.5,
        lineHeight: 1.4, // Improve readability for multiline button.
    },
    caption: {
        fontSize: exports.fontSizes.caption,
    },
};
var createTypography = function (typography) {
    if (typography === void 0) { typography = {}; }
    return (0, deepmerge_1.default)(baseTypography, typography, { clone: false });
};
exports.createTypography = createTypography;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlVHlwb2dyYXBoeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHlsZXMvY3JlYXRlVHlwb2dyYXBoeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFLQSx3REFBa0M7QUE4QnJCLFFBQUEsWUFBWSxHQUFlO0lBQ3RDLFNBQVMsRUFBRSwrREFBK0Q7SUFDMUUsU0FBUyxFQUNQLHVFQUF1RTtDQUMxRSxDQUFDO0FBRVcsUUFBQSxXQUFXLEdBQWU7SUFDckMsT0FBTyxFQUFFLEdBQUc7SUFDWixLQUFLLEVBQUUsR0FBRztJQUNWLE9BQU8sRUFBRSxHQUFHO0lBQ1osSUFBSSxFQUFFLEdBQUc7SUFDVCxNQUFNLEVBQUUsR0FBRztDQUNaLENBQUM7QUFFVyxRQUFBLFNBQVMsR0FBYTtJQUNqQyxFQUFFLEVBQUUsTUFBTTtJQUNWLEVBQUUsRUFBRSxTQUFTO0lBQ2IsRUFBRSxFQUFFLFVBQVU7SUFDZCxFQUFFLEVBQUUsUUFBUTtJQUNaLEVBQUUsRUFBRSxTQUFTO0lBQ2IsRUFBRSxFQUFFLFVBQVU7SUFDZCxJQUFJLEVBQUUsTUFBTTtJQUNaLE1BQU0sRUFBRSxTQUFTO0lBQ2pCLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLE9BQU8sRUFBRSxTQUFTO0lBQ2xCLE9BQU8sRUFBRSxXQUFXO0lBQ3BCLElBQUksRUFBRSxNQUFNO0NBQ2IsQ0FBQztBQWVGLElBQU0sY0FBYyxHQUFzQjtJQUN4QyxVQUFVLEVBQUUsb0JBQVksQ0FBQyxTQUFTO0lBQ2xDLG1CQUFtQixFQUFFLG9CQUFZLENBQUMsU0FBUztJQUMzQyxpQkFBaUIsRUFBRSxtQkFBVyxDQUFDLE9BQU87SUFDdEMsZUFBZSxFQUFFLG1CQUFXLENBQUMsS0FBSztJQUNsQyxpQkFBaUIsRUFBRSxtQkFBVyxDQUFDLE9BQU87SUFDdEMsZ0JBQWdCLEVBQUUsbUJBQVcsQ0FBQyxPQUFPO0lBQ3JDLGNBQWMsRUFBRSxtQkFBVyxDQUFDLElBQUk7SUFDaEMsZ0JBQWdCLEVBQUUsbUJBQVcsQ0FBQyxNQUFNO0lBQ3BDLEVBQUUsRUFBRTtRQUNGLFFBQVEsRUFBRSxpQkFBUyxDQUFDLEVBQUU7S0FDdkI7SUFDRCxFQUFFLEVBQUU7UUFDRixRQUFRLEVBQUUsaUJBQVMsQ0FBQyxFQUFFO0tBQ3ZCO0lBQ0QsRUFBRSxFQUFFO1FBQ0YsUUFBUSxFQUFFLGlCQUFTLENBQUMsRUFBRTtLQUN2QjtJQUNELEVBQUUsRUFBRTtRQUNGLFFBQVEsRUFBRSxpQkFBUyxDQUFDLEVBQUU7S0FDdkI7SUFDRCxFQUFFLEVBQUU7UUFDRixRQUFRLEVBQUUsaUJBQVMsQ0FBQyxFQUFFO0tBQ3ZCO0lBQ0QsRUFBRSxFQUFFO1FBQ0YsUUFBUSxFQUFFLGlCQUFTLENBQUMsRUFBRTtLQUN2QjtJQUNELEtBQUssRUFBRTtRQUNMLFFBQVEsRUFBRSxpQkFBUyxDQUFDLElBQUk7S0FDekI7SUFDRCxLQUFLLEVBQUU7UUFDTCxRQUFRLEVBQUUsaUJBQVMsQ0FBQyxRQUFRO0tBQzdCO0lBQ0QsU0FBUyxFQUFFO1FBQ1QsUUFBUSxFQUFFLGlCQUFTLENBQUMsUUFBUTtLQUM3QjtJQUNELFNBQVMsRUFBRTtRQUNULFFBQVEsRUFBRSxpQkFBUyxDQUFDLFFBQVE7S0FDN0I7SUFDRCxNQUFNLEVBQUU7UUFDTixhQUFhLEVBQUUsU0FBUztRQUN4QixRQUFRLEVBQUUsaUJBQVMsQ0FBQyxNQUFNO1FBQzFCLFVBQVUsRUFBRSxtQkFBVyxDQUFDLElBQUk7UUFDNUIsYUFBYSxFQUFFLEdBQUc7UUFDbEIsVUFBVSxFQUFFLEdBQUcsRUFBRSw0Q0FBNEM7S0FDOUQ7SUFDRCxPQUFPLEVBQUU7UUFDUCxRQUFRLEVBQUUsaUJBQVMsQ0FBQyxPQUFPO0tBQzVCO0NBQ0YsQ0FBQztBQUVLLElBQU0sZ0JBQWdCLEdBQUcsVUFDOUIsVUFBa0M7SUFBbEMsMkJBQUEsRUFBQSxlQUFrQztJQUVsQyxPQUFPLElBQUEsbUJBQVMsRUFBQyxjQUFjLEVBQUUsVUFBVSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDakUsQ0FBQyxDQUFDO0FBSlcsUUFBQSxnQkFBZ0Isb0JBSTNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgVHlwb2dyYXBoeSBhcyBNVUlUeXBvZ3JhcGh5LFxuICBUeXBvZ3JhcGh5T3B0aW9ucyBhcyBNVUlUeXBvZ3JhcGh5T3B0aW9ucyxcbn0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZVR5cG9ncmFwaHknO1xuaW1wb3J0IHsgQ1NTUHJvcGVydGllcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnZGVlcG1lcmdlJztcblxuZXhwb3J0IGludGVyZmFjZSBGb250RmFtaWx5IHtcbiAgc2Fuc1NlcmlmOiBDU1NQcm9wZXJ0aWVzWydmb250RmFtaWx5J107XG4gIG1vbm9zcGFjZTogQ1NTUHJvcGVydGllc1snZm9udEZhbWlseSddO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZvbnRXZWlnaHQge1xuICBsaWdodGVyOiBDU1NQcm9wZXJ0aWVzWydmb250V2VpZ2h0J107XG4gIGxpZ2h0OiBDU1NQcm9wZXJ0aWVzWydmb250V2VpZ2h0J107XG4gIHJlZ3VsYXI6IENTU1Byb3BlcnRpZXNbJ2ZvbnRXZWlnaHQnXTtcbiAgYm9sZDogQ1NTUHJvcGVydGllc1snZm9udFdlaWdodCddO1xuICBib2xkZXI6IENTU1Byb3BlcnRpZXNbJ2ZvbnRXZWlnaHQnXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGb250U2l6ZSB7XG4gIGgxOiBzdHJpbmc7XG4gIGgyOiBzdHJpbmc7XG4gIGgzOiBzdHJpbmc7XG4gIGg0OiBzdHJpbmc7XG4gIGg1OiBzdHJpbmc7XG4gIGg2OiBzdHJpbmc7XG4gIGJvZHk6IHN0cmluZztcbiAgYnV0dG9uOiBzdHJpbmc7XG4gIHN1YnRpdGxlOiBzdHJpbmc7XG4gIGNhcHRpb246IHN0cmluZztcbiAgdG9vbHRpcDogc3RyaW5nO1xuICBjb2RlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBmb250RmFtaWxpZXM6IEZvbnRGYW1pbHkgPSB7XG4gIHNhbnNTZXJpZjogJ1wiTGF0b1wiLCBIZWx2ZXRpY2EsIFJvYm90bywgQXJpYWwsIFwiTHVjaWRhIEdyYW5kZVwiLCBzYW5zLXNlcmlmJyxcbiAgbW9ub3NwYWNlOlxuICAgICdcIlVidW50dSBNb25vXCIsIENvbnNvbGFzLCBcIkx1Y2lkYSBDb25zb2xlXCIsIE1vbmFjbywgQ291cmllciwgbW9ub3NwYWNlJyxcbn07XG5cbmV4cG9ydCBjb25zdCBmb250V2VpZ2h0czogRm9udFdlaWdodCA9IHtcbiAgbGlnaHRlcjogMTAwLFxuICBsaWdodDogMzAwLFxuICByZWd1bGFyOiA0MDAsXG4gIGJvbGQ6IDcwMCxcbiAgYm9sZGVyOiA5MDAsXG59O1xuXG5leHBvcnQgY29uc3QgZm9udFNpemVzOiBGb250U2l6ZSA9IHtcbiAgaDE6ICczcmVtJyxcbiAgaDI6ICcyLjI1cmVtJyxcbiAgaDM6ICcxLjg3NXJlbScsXG4gIGg0OiAnMS41cmVtJyxcbiAgaDU6ICcxLjI1cmVtJyxcbiAgaDY6ICcxLjEyNXJlbScsXG4gIGJvZHk6ICcxcmVtJyxcbiAgYnV0dG9uOiAnMC43NXJlbScsXG4gIHN1YnRpdGxlOiAnMC44NzVyZW0nLFxuICBjYXB0aW9uOiAnMC43NXJlbScsXG4gIHRvb2x0aXA6ICcwLjY4NzVyZW0nLFxuICBjb2RlOiAnMXJlbScsXG59O1xuXG5pbnRlcmZhY2UgQ3VzdG9tVHlwb2dyYXBoeVByb3BlcnRpZXMge1xuICBmb250RmFtaWx5TW9ub3NwYWNlOiBDU1NQcm9wZXJ0aWVzWydmb250RmFtaWx5J107XG4gIGZvbnRXZWlnaHRCb2xkOiBDU1NQcm9wZXJ0aWVzWydmb250V2VpZ2h0J107XG4gIGZvbnRXZWlnaHRCb2xkZXI6IENTU1Byb3BlcnRpZXNbJ2ZvbnRXZWlnaHQnXTtcbiAgZm9udFdlaWdodExpZ2h0ZXI6IENTU1Byb3BlcnRpZXNbJ2ZvbnRXZWlnaHQnXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUeXBvZ3JhcGh5IGV4dGVuZHMgTVVJVHlwb2dyYXBoeSwgQ3VzdG9tVHlwb2dyYXBoeVByb3BlcnRpZXMge31cblxuZXhwb3J0IGludGVyZmFjZSBUeXBvZ3JhcGh5T3B0aW9uc1xuICBleHRlbmRzIFBhcnRpYWw8Q3VzdG9tVHlwb2dyYXBoeVByb3BlcnRpZXM+LFxuICAgIE1VSVR5cG9ncmFwaHlPcHRpb25zIHt9XG5cbmNvbnN0IGJhc2VUeXBvZ3JhcGh5OiBUeXBvZ3JhcGh5T3B0aW9ucyA9IHtcbiAgZm9udEZhbWlseTogZm9udEZhbWlsaWVzLnNhbnNTZXJpZixcbiAgZm9udEZhbWlseU1vbm9zcGFjZTogZm9udEZhbWlsaWVzLm1vbm9zcGFjZSxcbiAgZm9udFdlaWdodExpZ2h0ZXI6IGZvbnRXZWlnaHRzLmxpZ2h0ZXIsXG4gIGZvbnRXZWlnaHRMaWdodDogZm9udFdlaWdodHMubGlnaHQsXG4gIGZvbnRXZWlnaHRSZWd1bGFyOiBmb250V2VpZ2h0cy5yZWd1bGFyLFxuICBmb250V2VpZ2h0TWVkaXVtOiBmb250V2VpZ2h0cy5yZWd1bGFyLFxuICBmb250V2VpZ2h0Qm9sZDogZm9udFdlaWdodHMuYm9sZCxcbiAgZm9udFdlaWdodEJvbGRlcjogZm9udFdlaWdodHMuYm9sZGVyLFxuICBoMToge1xuICAgIGZvbnRTaXplOiBmb250U2l6ZXMuaDEsXG4gIH0sXG4gIGgyOiB7XG4gICAgZm9udFNpemU6IGZvbnRTaXplcy5oMixcbiAgfSxcbiAgaDM6IHtcbiAgICBmb250U2l6ZTogZm9udFNpemVzLmgzLFxuICB9LFxuICBoNDoge1xuICAgIGZvbnRTaXplOiBmb250U2l6ZXMuaDQsXG4gIH0sXG4gIGg1OiB7XG4gICAgZm9udFNpemU6IGZvbnRTaXplcy5oNSxcbiAgfSxcbiAgaDY6IHtcbiAgICBmb250U2l6ZTogZm9udFNpemVzLmg2LFxuICB9LFxuICBib2R5MToge1xuICAgIGZvbnRTaXplOiBmb250U2l6ZXMuYm9keSxcbiAgfSxcbiAgYm9keTI6IHtcbiAgICBmb250U2l6ZTogZm9udFNpemVzLnN1YnRpdGxlLFxuICB9LFxuICBzdWJ0aXRsZTE6IHtcbiAgICBmb250U2l6ZTogZm9udFNpemVzLnN1YnRpdGxlLFxuICB9LFxuICBzdWJ0aXRsZTI6IHtcbiAgICBmb250U2l6ZTogZm9udFNpemVzLnN1YnRpdGxlLFxuICB9LFxuICBidXR0b246IHtcbiAgICB0ZXh0VHJhbnNmb3JtOiAnaW5pdGlhbCcsXG4gICAgZm9udFNpemU6IGZvbnRTaXplcy5idXR0b24sXG4gICAgZm9udFdlaWdodDogZm9udFdlaWdodHMuYm9sZCxcbiAgICBsZXR0ZXJTcGFjaW5nOiAwLjUsXG4gICAgbGluZUhlaWdodDogMS40LCAvLyBJbXByb3ZlIHJlYWRhYmlsaXR5IGZvciBtdWx0aWxpbmUgYnV0dG9uLlxuICB9LFxuICBjYXB0aW9uOiB7XG4gICAgZm9udFNpemU6IGZvbnRTaXplcy5jYXB0aW9uLFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVR5cG9ncmFwaHkgPSAoXG4gIHR5cG9ncmFwaHk6IFR5cG9ncmFwaHlPcHRpb25zID0ge31cbik6IFR5cG9ncmFwaHlPcHRpb25zID0+IHtcbiAgcmV0dXJuIGRlZXBtZXJnZShiYXNlVHlwb2dyYXBoeSwgdHlwb2dyYXBoeSwgeyBjbG9uZTogZmFsc2UgfSk7XG59O1xuIl19