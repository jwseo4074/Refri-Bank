"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var react_router_dom_1 = require("react-router-dom");
var chromicons_1 = require("@lifeomic/chromicons");
var index_1 = require("../../styles/index");
var LayoutManager_1 = require("../LayoutManager");
var Pill_1 = require("../Pill");
var Text_1 = require("../Text");
var Tooltip_1 = require("../Tooltip");
var common_1 = require("./_private/common");
var NavOrExternalLink_1 = require("./_private/NavOrExternalLink");
var framer_motion_1 = require("framer-motion");
exports.PrimaryNavigationExpansionItemStylesKey = 'ChromaPrimaryNavigationExpansionItem';
exports.useStyles = index_1.makeStyles(function (theme) { return ({
    root: {
        listStyle: 'none',
        padding: 0,
        margin: 0,
        position: 'relative',
    },
    rootOpen: {
        backgroundColor: 'var(--link-active-bg)',
        maxHeight: 'inherit',
        paddingBottom: theme.spacing(1),
        fallbacks: {
            backgroundColor: theme.palette.action.active,
        },
    },
    sidebarCollapsed: {
        paddingBottom: 0,
    },
    link: {
        display: 'flex',
        alignItems: 'center',
        height: theme.pxToRem(47),
        color: 'inherit',
        textDecoration: 'none',
        transition: 'color 0.5s ease, opacity 0.5s ease',
        '&:hover': {
            color: 'var(--link-hover)',
            textDecoration: 'none',
            fallbacks: {
                color: 'inherit',
            },
        },
    },
    linkActive: {
        color: 'var(--link-active)',
        '&:hover': {
            color: 'var(--link-active)',
            opacity: 0.75,
        },
        fallbacks: {
            color: theme.palette.primary[300],
        },
    },
    icon: {
        width: LayoutManager_1.sideBarWidthCollapsed,
        flexShrink: 0,
        display: 'flex',
        alignItems: 'center',
        maxWidth: 60,
        outline: 'none',
        justifyContent: 'center',
    },
    label: {
        alignSelf: 'center',
        color: 'inherit',
        flex: 1,
        letterSpacing: 0.15,
        lineHeight: 'unset',
        overflowX: 'hidden',
        paddingRight: theme.spacing(2.25),
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap',
    },
    labelBeta: {
        justifyContent: 'flex-start',
        maxWidth: 120,
        paddingRight: 0,
    },
    plusIcon: {
        color: 'inherit',
        justifySelf: 'flex-end',
        marginRight: theme.spacing(2),
        position: 'absolute',
        right: 0,
    },
    hidden: {
        display: 'none',
    },
    content: {
        maxHeight: 0,
        overflow: 'hidden',
        transition: 'max-height 0.25s ease-in-out',
    },
    inner: {
        display: 'flex',
        flexDirection: 'column',
        backgroundColor: 'inherit',
        width: '100%',
        height: '100%',
        visibility: 'visible',
    },
    innerHidden: {
        visibility: 'hidden',
    },
    innerUl: {
        margin: theme.spacing(-1, 0, 0),
        padding: 0,
        position: 'relative',
    },
    beta: {
        margin: theme.spacing(0.125, 1, 0),
        position: 'absolute',
        right: theme.spacing(4),
        transform: 'scale(0.75)',
    },
}); }, { name: exports.PrimaryNavigationExpansionItemStylesKey });
var BASE_TRANSITION_VARIANTS = {
    hide: { opacity: 0, x: 16, transition: { ease: 'easeIn' } },
    show: { opacity: 1, x: 0, transition: { ease: 'easeOut' } },
};
exports.PrimaryNavigationExpansionItem = React.forwardRef(function (_a, ref) {
    var _b;
    var rootParentPath = _a.rootParentPath, exact = _a.exact, icon = _a.icon, label = _a.label, beta = _a.beta, betaLabelText = _a.betaLabelText, to = _a.to, children = _a.children, className = _a.className, additionalClasses = _a.classes, rootProps = __rest(_a, ["rootParentPath", "exact", "icon", "label", "beta", "betaLabelText", "to", "children", "className", "classes"]);
    var classes = exports.useStyles({ classes: additionalClasses });
    var isSidebarCollapsed = LayoutManager_1.useLayoutManager().isSidebarCollapsed;
    var location = react_router_dom_1.useLocation();
    var innerRef = React.useRef(null);
    var _c = React.useState(0), contentHeight = _c[0], setContentHeight = _c[1];
    var isExpanded = React.useMemo(function () { return location.pathname.startsWith(rootParentPath); }, [location, rootParentPath]);
    React.useEffect(function () {
        if (innerRef && innerRef.current && children) {
            setContentHeight(innerRef.current.scrollHeight);
        }
    }, [children, (_b = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _b === void 0 ? void 0 : _b.scrollHeight]);
    return (React.createElement(framer_motion_1.motion.li, __assign({ ref: ref, className: clsx_1.default(classes.root, isExpanded && classes.rootOpen, isSidebarCollapsed && classes.sidebarCollapsed, className) }, rootProps),
        React.createElement(NavOrExternalLink_1.NavOrExternalLink, { exact: exact, className: classes.link, activeClassName: classes.linkActive, to: to },
            isSidebarCollapsed ? (React.createElement(Tooltip_1.Tooltip, { title: label, placement: "right", gutter: -4 },
                React.createElement("div", { className: classes.icon }, icon))) : (React.createElement("div", { className: classes.icon }, icon)),
            React.createElement(framer_motion_1.motion.div, { variants: BASE_TRANSITION_VARIANTS },
                React.createElement(Text_1.Text, { size: "subbody", className: clsx_1.default(classes.label, beta && classes.labelBeta, className) }, label)),
            beta && !isSidebarCollapsed && (React.createElement(Pill_1.Pill, { variant: "highlight", label: betaLabelText, className: classes.beta, initial: common_1.BETA_INITIAL_TRANSITION, animate: common_1.BETA_ANIMATE_TRANSITION, exit: common_1.BETA_EXIT_TRANSITION })),
            !isSidebarCollapsed && (React.createElement(framer_motion_1.motion.span, { className: clsx_1.default(classes.plusIcon, isExpanded && classes.hidden), initial: common_1.PLUS_INITIAL_TRANSITION, animate: common_1.PLUS_ANIMATE_TRANSITION, exit: common_1.PLUS_EXIT_TRANSITION, role: "presentation" },
                React.createElement(chromicons_1.Plus, { "aria-hidden": "true", width: 18, height: 18 })))),
        React.createElement(framer_motion_1.motion.div, { "aria-hidden": !isExpanded, className: clsx_1.default(classes.content), style: { maxHeight: isExpanded ? contentHeight : 0 } },
            React.createElement("div", { ref: innerRef, className: clsx_1.default(classes.inner, !isExpanded && classes.innerHidden) },
                React.createElement(framer_motion_1.motion.ul, { className: classes.innerUl }, children)))));
});
//# sourceMappingURL=data:application/json;base64,