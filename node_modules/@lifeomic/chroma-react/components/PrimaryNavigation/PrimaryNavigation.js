"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var react_hotkeys_1 = require("react-hotkeys");
var chromicons_1 = require("@lifeomic/chromicons");
var styles_1 = require("../../styles");
var LayoutManager_1 = require("../LayoutManager");
var common_1 = require("./_private/common");
var framer_motion_1 = require("framer-motion");
var getTestProps_1 = require("../../testUtils/getTestProps");
var KEY_MAP = {
    TOGGLE_SIDE_BAR: '[',
};
exports.testIds = {
    toggleButton: 'primaryNavigation-toggleButton',
    headerRoot: 'primaryNavigation-headerRoot',
};
exports.PrimaryNavigationStylesKey = 'ChromaPrimaryNavigation';
exports.useStyles = styles_1.makeStyles(function (theme) { return ({
    root: {
        '--link-color': theme.palette.black[300],
        '--link-hover': theme.palette.black[50],
        '--link-active': theme.palette.primary[300],
        '--link-active-bg': theme.palette.action.active,
        '--link-size': '0.875rem',
        backgroundColor: theme.palette.grey.main,
        color: 'var(--link-color)',
        display: 'flex',
        paddingTop: theme.spacing(1.5),
        flexDirection: 'column',
        overflowX: 'hidden',
        overflowY: 'auto',
        width: '100%',
        fallbacks: {
            color: theme.palette.black[300],
        },
    },
    header: {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'flex-end',
        height: theme.pxToRem(32),
        flex: '0 0 auto',
        marginTop: theme.spacing(0.5),
        marginBottom: theme.spacing(1.25),
    },
    headerContent: {
        flex: '1 1 auto',
        paddingLeft: theme.spacing(2.25),
        paddingRight: theme.spacing(2.25),
    },
    headerContentMin: {
        width: '100%',
        display: 'flex',
        justifyContent: 'center',
        paddingLeft: 0,
        paddingRight: 0,
    },
    headerContentHidden: {
        display: 'none',
    },
    toggleButton: {
        width: LayoutManager_1.sideBarWidthCollapsed,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        flex: '0 0 auto',
        opacity: 0.3,
    },
    navItems: {
        overflowY: 'auto',
        overflowX: 'hidden',
        flex: '1 1 100px',
        listStyle: 'none',
        padding: 0,
        margin: 0,
    },
    footer: {
        flex: '0 0 auto',
        marginTop: theme.spacing(2),
        marginBottom: theme.spacing(2),
        paddingLeft: theme.spacing(2.75),
        paddingRight: theme.spacing(2.75),
    },
    footToggle: {
        alignItems: 'flex-start',
        background: 'transparent none',
        border: 0,
        color: 'var(--link-color)',
        display: 'flex',
        fontFamily: theme.typography.fontFamily,
        fontSize: 'var(--link-size)',
        justifyContent: 'flex-start',
        letterSpacing: 0.15,
        padding: theme.spacing(1, 2.25, 2),
        textAlign: 'left',
        transition: 'color 0.5s ease',
        whiteSpace: 'nowrap',
        '&:hover': {
            color: 'var(--link-hover)',
            cursor: 'pointer',
        },
        '&[aria-checked=true]': {
            color: 'var(--link-active)',
        },
        '&:focus': {
            outline: 'none',
        },
    },
    footToggleContainer: {
        width: theme.pxToRem(24),
        height: theme.pxToRem(24),
    },
    toggleText: {
        display: 'inline-block',
        marginLeft: theme.spacing(2.25),
        position: 'relative',
        top: theme.spacing(0.25),
    },
}); }, {
    name: exports.PrimaryNavigationStylesKey,
});
var NAV_LIST_TRANSITION_VARIANTS = {
    hide: {},
    show: {
        transition: {
            staggerChildren: 0.04,
            delayChildren: 0.125,
        },
    },
};
var SHARED_TRANSITION_VARIANTS = {
    hide: { opacity: 0 },
    show: {
        opacity: 1,
        transition: {
            duration: 0.3,
        },
    },
};
exports.PrimaryNavigation = React.forwardRef(function (_a, ref) {
    var header = _a.header, headerMin = _a.headerMin, footer = _a.footer, children = _a.children, className = _a.className, toggleButtonText = _a.toggleButtonText, rootProps = __rest(_a, ["header", "headerMin", "footer", "children", "className", "toggleButtonText"]);
    var classes = exports.useStyles({});
    var _b = LayoutManager_1.useLayoutManager(), isSidebarCollapsed = _b.isSidebarCollapsed, toggleSidebarCollapsed = _b.toggleSidebarCollapsed, isSidebarCollapseDisabled = _b.isSidebarCollapseDisabled;
    var HANDLERS = {
        TOGGLE_SIDE_BAR: toggleSidebarCollapsed,
    };
    var showHeader = (headerMin && isSidebarCollapsed) || (header && !isSidebarCollapsed);
    return (React.createElement("nav", __assign({ ref: ref, className: clsx_1.default(classes.root, className), "aria-label": "Primary", role: "navigation" }, rootProps),
        showHeader && (React.createElement("div", __assign({ className: classes.header }, getTestProps_1.getTestProps(exports.testIds.headerRoot)),
            headerMin && isSidebarCollapsed && (React.createElement(framer_motion_1.motion.div, { "aria-label": "Navigation Header Section Collapsed", className: clsx_1.default(classes.headerContent, classes.headerContentMin), initial: { opacity: 0 }, animate: {
                    opacity: 1,
                    transition: { delay: 0.25, duration: 0.25 },
                } }, headerMin)),
            header && !isSidebarCollapsed && (React.createElement(framer_motion_1.motion.div, { "aria-label": "Navigation Header Section", className: clsx_1.default(classes.headerContent), initial: { opacity: 0 }, animate: {
                    opacity: 1,
                    transition: { delay: 0.2, duration: 0.25 },
                } }, header)))),
        React.createElement(framer_motion_1.motion.ul, { variants: NAV_LIST_TRANSITION_VARIANTS, animate: isSidebarCollapsed ? 'hide' : 'show', className: clsx_1.default(classes.navItems) }, children),
        !isSidebarCollapsed && !!footer && (React.createElement(framer_motion_1.motion.div, { initial: { opacity: 0 }, animate: { opacity: 1, transition: { duration: common_1.inDuration } }, exit: { opacity: 0, transition: { duration: common_1.outDuration } }, className: classes.footer }, footer)),
        !isSidebarCollapseDisabled && (React.createElement(react_hotkeys_1.GlobalHotKeys, { keyMap: KEY_MAP, handlers: HANDLERS },
            React.createElement("button", __assign({ className: classes.footToggle, onClick: toggleSidebarCollapsed, role: "checkbox", "aria-checked": isSidebarCollapsed }, getTestProps_1.getTestProps(exports.testIds.toggleButton)),
                React.createElement("span", { className: classes.footToggleContainer },
                    React.createElement(chromicons_1.Sidebar, { "aria-hidden": true })),
                React.createElement(framer_motion_1.motion.span, { className: classes.toggleText, animate: isSidebarCollapsed ? 'hide' : 'show', variants: SHARED_TRANSITION_VARIANTS }, toggleButtonText || 'Toggle Sidebar'))))));
});
//# sourceMappingURL=data:application/json;base64,