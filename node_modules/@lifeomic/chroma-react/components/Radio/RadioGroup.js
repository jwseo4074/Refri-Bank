"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadioGroup = exports.useStyles = exports.RadioGroupStylesKey = void 0;
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var styles_1 = require("../../styles");
var useRadioGroup_1 = require("./useRadioGroup");
var screenreaderOnly_1 = require("../../styles/screenreaderOnly");
exports.RadioGroupStylesKey = 'ChromaRadioGroup';
exports.useStyles = (0, styles_1.makeStyles)(function (theme) { return ({
    root: {
        border: 0,
        display: 'inline-flex',
        flexDirection: 'column',
        height: '100%',
        margin: 0,
        minWidth: 0,
        padding: 0,
        verticalAlign: 'top',
        width: '100%',
    },
    legend: {
        color: theme.palette.black[800],
        fontSize: theme.pxToRem(14),
        fontWeight: theme.typography.fontWeightBold,
        marginBottom: theme.spacing(1.5),
        padding: 0,
        '&:empty': {
            marginBottom: theme.spacing(0),
        },
    },
    legendInverse: {
        color: theme.palette.common.white,
    },
    radios: {
        display: 'flex',
        flexDirection: 'column',
        '& > *:not(:last-child)': {
            marginBottom: theme.spacing(2),
        },
    },
    alignCenter: { alignItems: 'center' },
    alignStart: { alignItems: 'flex-start' },
    justifyStart: { justifyContent: 'flex-start' },
    justifyEvenly: { justifyContent: 'space-evenly' },
    justifyBetween: { justifyContent: 'space-between' },
    justifyCenter: { justifyContent: 'center' },
    directionRow: {
        flexDirection: 'row',
        '& > *:not(:last-child)': {
            margin: theme.spacing(0, 2, 0, 0),
        },
        '& label': {
            whiteSpace: 'nowrap',
        },
    },
    directionColumn: {
        flexDirection: 'column',
    },
    srOnly: __assign({}, screenreaderOnly_1.screenreaderOnlyStyles),
}); }, { name: exports.RadioGroupStylesKey });
var RadioGroup = function (_a) {
    var _b, _c, _d, _e;
    var ariaLabel = _a["aria-label"], className = _a.className, _f = _a.align, align = _f === void 0 ? 'flex-start' : _f, _g = _a.color, color = _g === void 0 ? 'default' : _g, children = _a.children, _h = _a.direction, direction = _h === void 0 ? 'column' : _h, _j = _a.justify, justify = _j === void 0 ? 'flex-start' : _j, name = _a.name, onChange = _a.onChange, value = _a.value, title = _a.title, rootProps = __rest(_a, ['aria-label', "className", "align", "color", "children", "direction", "justify", "name", "onChange", "value", "title"]);
    var classes = (0, exports.useStyles)({});
    var _k = React.useState(value), contextValue = _k[0], setContextValue = _k[1];
    React.useEffect(function () {
        setContextValue(value);
    }, [value]);
    var handleContextChange = function (e) {
        setContextValue(e.target.value);
        onChange === null || onChange === void 0 ? void 0 : onChange(e);
    };
    if (!title && !ariaLabel && process.env.NODE_ENV === 'development') {
        throw new Error('If a "title" is not provided to RadioGroup, please provide "aria-label".');
    }
    return (React.createElement(useRadioGroup_1.RadioGroupContext.Provider, { value: {
            color: color,
            name: name,
            onChange: handleContextChange,
            value: contextValue,
        } },
        React.createElement("fieldset", __assign({ className: (0, clsx_1.default)(classes.root, className), role: "radiogroup" }, rootProps),
            React.createElement("legend", { className: (0, clsx_1.default)(classes.legend, (_b = {},
                    _b[classes.legendInverse] = color === 'inverse',
                    _b), !title && ariaLabel && classes.srOnly) }, title || ariaLabel),
            React.createElement("div", { className: (0, clsx_1.default)(classes.radios, (_c = {},
                    _c[classes.directionRow] = direction === 'row',
                    _c[classes.directionColumn] = direction === 'column',
                    _c), (_d = {},
                    _d[classes.alignCenter] = align === 'center',
                    _d[classes.alignStart] = align === 'flex-start',
                    _d), (_e = {},
                    _e[classes.justifyBetween] = justify === 'space-between',
                    _e[classes.justifyEvenly] = justify === 'space-evenly',
                    _e[classes.justifyStart] = justify === 'flex-start',
                    _e[classes.justifyCenter] = justify === 'center',
                    _e)) }, children))));
};
exports.RadioGroup = RadioGroup;
//# sourceMappingURL=data:application/json;base64,