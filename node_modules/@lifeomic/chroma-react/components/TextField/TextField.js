"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextField = exports.useStyles = exports.TextFieldStylesKey = void 0;
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var styles_1 = require("../../styles");
var forms_1 = require("../_private/forms");
var UniqueId_1 = require("../_private/UniqueId");
var Tooltip_1 = require("../Tooltip");
exports.TextFieldStylesKey = 'ChromaTextField';
exports.useStyles = (0, styles_1.makeStyles)(function (theme) { return ({
    root: {},
    label: {
        alignItems: 'center',
        color: theme.palette.black[800],
        display: 'flex',
        fontSize: theme.pxToRem(14),
        fontWeight: theme.typography.fontWeightBold,
        marginBottom: theme.spacing(1),
        '&:empty': {
            marginBottom: theme.spacing(0),
        },
    },
    labelIcon: {
        marginLeft: theme.spacing(0.75),
        color: theme.palette.primary.main,
    },
    labelIconInverse: {
        mixBlendMode: 'screen',
    },
    labelSecondary: {
        color: theme.palette.text.hint,
        fontSize: theme.pxToRem(11),
        display: 'inline-block',
        margin: theme.spacing(0, 0.75),
    },
    labelInverse: {
        color: theme.palette.common.white,
        '&$labelSecondary': {
            opacity: 0.9,
        },
    },
    inputContainer: {
        position: 'relative',
        minWidth: theme.pxToRem(180),
        width: 'fit-content',
    },
    inputContainerFullWidth: {
        width: '100%',
        '& $inputHasAdornment': {
            maxWidth: 'unset',
        },
    },
    input: {
        backgroundColor: 'rgba(132, 137, 166, 0.15)',
        border: "1px solid transparent",
        borderRadius: theme.pxToRem(4),
        color: theme.palette.text.primary,
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.pxToRem(14),
        minWidth: theme.pxToRem(180),
        lineHeight: 1.25,
        paddingBottom: theme.spacing(1),
        paddingLeft: theme.spacing(1.25),
        paddingRight: theme.spacing(1.25),
        paddingTop: theme.spacing(1),
        transition: 'border 0.25s ease',
        '&:focus': {
            outline: 'none',
            backgroundColor: 'rgba(255, 255, 255, 0.5)',
            border: "1px solid rgba(132, 137, 166, 0.45)",
        },
        '&:disabled': {
            cursor: 'not-allowed',
            opacity: 0.625,
        },
        '&:read-only': {
            cursor: 'not-allowed',
            opacity: 0.9,
            '&:focus': {
                backgroundColor: 'rgba(132, 137, 166, 0.15)',
                border: "1px solid transparent",
            },
        },
        '&::-webkit-input-placeholder': {
            color: theme.palette.black[400],
        },
        '&::-moz-placeholder': {
            color: theme.palette.black[400],
        },
        '&:-ms-input-placeholder': {
            color: theme.palette.black[400],
        },
        '&:-moz-placeholder': {
            color: theme.palette.black[400],
        },
    },
    inputHasAdornment: {
        maxWidth: theme.pxToRem(152),
    },
    inputInverse: {
        backgroundColor: 'rgba(230, 231, 237, 0.1)',
        color: theme.palette.common.white,
        '&:focus': {
            backgroundColor: 'rgba(230, 231, 237, 0.1)',
            border: "1px solid rgba(230, 231, 237, 0.55)",
        },
        '&:read-only': {
            opacity: 1,
            '&:focus': {
                backgroundColor: 'rgba(230, 231, 237, 0.1)',
            },
        },
        '&::-webkit-input-placeholder': {
            color: 'rgba(255, 255, 255, 0.8)',
        },
        '&::-moz-placeholder': {
            color: 'rgba(255, 255, 255, 0.8)',
        },
        '&:-ms-input-placeholder': {
            color: 'rgba(255, 255, 255, 0.8)',
        },
        '&:-moz-placeholder': {
            color: 'rgba(255, 255, 255, 0.8)',
        },
    },
    inputStartAdornment: {
        paddingLeft: theme.spacing(4.25),
    },
    inputEndAdornment: {
        paddingRight: theme.spacing(4.25),
    },
    adornment: {
        display: 'flex',
        position: 'absolute',
        '& a, & button': {
            padding: 0,
        },
        '& svg': {
            height: theme.pxToRem(20),
            width: theme.pxToRem(20),
            '&, & a, & button': {
                color: theme.palette.black[500],
            },
        },
    },
    adornmentInverse: {
        '& a, & button, & svg': {
            color: theme.palette.common.white,
        },
    },
    startAdornment: {
        bottom: 8,
        left: 10,
        top: 8,
    },
    endAdornment: {
        bottom: 8,
        right: 10,
        top: 8,
    },
    hasTrailer: {
        marginBottom: theme.spacing(0.5),
    },
    inputError: {
        backgroundColor: 'rgba(230, 231, 237, 0.1)',
        border: "1px solid ".concat(theme.palette.error.main),
        '&:focus': {
            border: "1px solid ".concat(theme.palette.error.main),
        },
    },
    inputErrorInverse: {
        border: "1px solid ".concat(theme.palette.error[700]),
    },
    inputFullWidth: {
        width: '100%',
    },
    trailerMessage: {
        marginTop: theme.spacing(0.875),
        marginLeft: 0,
    },
    errorMessage: {
        color: theme.palette.error.main,
        fontSize: theme.typography.caption.fontSize,
        fontWeight: theme.typography.fontWeightBold,
    },
    errorMessageInverse: {
        mixBlendMode: 'color-dodge',
    },
    helpMessage: {
        fontSize: theme.typography.caption.fontSize,
        color: theme.palette.text.hint,
    },
    helpMessageInverse: {
        color: theme.palette.common.white,
    },
    tooltipContainer: {
        display: 'flex',
        outline: 'none',
    },
}); }, { name: exports.TextFieldStylesKey });
exports.TextField = React.forwardRef(function (_a, ref) {
    var _b;
    var ariaLabel = _a["aria-label"], className = _a.className, _c = _a.color, color = _c === void 0 ? 'default' : _c, errorMessage = _a.errorMessage, fullWidth = _a.fullWidth, hasError = _a.hasError, helpMessage = _a.helpMessage, Icon = _a.icon, id = _a.id, label = _a.label, name = _a.name, secondaryLabel = _a.secondaryLabel, tooltipMessage = _a.tooltipMessage, startAdornment = _a.startAdornment, endAdornment = _a.endAdornment, rootProps = __rest(_a, ['aria-label', "className", "color", "errorMessage", "fullWidth", "hasError", "helpMessage", "icon", "id", "label", "name", "secondaryLabel", "tooltipMessage", "startAdornment", "endAdornment"]);
    var classes = (0, exports.useStyles)({});
    var uniqueId = React.useState(function () { return id || name || (0, UniqueId_1.generateUniqueId)('textField-'); })[0];
    if (!label && !ariaLabel && process.env.NODE_ENV === 'development') {
        throw new Error('If a "label" is not provided to TextField, please provide "aria-label".');
    }
    return (React.createElement("div", { className: (0, clsx_1.default)(classes.root, className) },
        label && (React.createElement("label", { className: (0, clsx_1.default)(classes.label, color === 'inverse' && classes.labelInverse), htmlFor: uniqueId },
            label,
            !!Icon && tooltipMessage && (React.createElement(Tooltip_1.Tooltip, { title: tooltipMessage },
                React.createElement("span", { className: classes.tooltipContainer },
                    React.createElement(Icon, { className: (0, clsx_1.default)(classes.labelIcon, color === 'inverse' && classes.labelIconInverse), width: 16, height: 16, role: "img", "aria-hidden": true })))),
            secondaryLabel && (React.createElement("span", { className: (0, clsx_1.default)(classes.labelSecondary, color === 'inverse' && classes.labelInverse) }, secondaryLabel)))),
        React.createElement("div", { className: (0, clsx_1.default)(classes.inputContainer, fullWidth && classes.inputContainerFullWidth) },
            startAdornment && (React.createElement("span", { className: (0, clsx_1.default)(classes.adornment, color === 'inverse' && classes.adornmentInverse, classes.startAdornment) }, startAdornment)),
            React.createElement("input", __assign({ "aria-describedby": (0, forms_1.buildDescribedBy)({
                    hasError: hasError,
                    hasHelpMessage: !!helpMessage,
                    uniqueId: uniqueId,
                }), "aria-label": ariaLabel, ref: ref, className: (0, clsx_1.default)(classes.input, startAdornment || endAdornment
                    ? classes.inputHasAdornment
                    : undefined, startAdornment && classes.inputStartAdornment, endAdornment && classes.inputEndAdornment, fullWidth && classes.inputFullWidth, hasError && classes.inputError, hasError && color === 'inverse' && classes.inputErrorInverse, (_b = {},
                    _b[classes.inputInverse] = color === 'inverse',
                    _b)), type: "text", id: uniqueId, name: name }, rootProps)),
            endAdornment && (React.createElement("span", { className: (0, clsx_1.default)(classes.adornment, color === 'inverse' && classes.adornmentInverse, classes.endAdornment) }, endAdornment))),
        helpMessage && (React.createElement(forms_1.FormHelpMessage, { color: color, className: (0, clsx_1.default)(classes.trailerMessage, classes.helpMessage, color === 'inverse' && classes.helpMessageInverse), rootElementId: uniqueId, describedById: (0, forms_1.helpFor)(uniqueId) }, helpMessage)),
        hasError && errorMessage && (React.createElement(forms_1.FormErrorMessage, { color: color, className: (0, clsx_1.default)(classes.trailerMessage), rootElementId: uniqueId, describedById: (0, forms_1.errorFor)(uniqueId) }, errorMessage))));
});
//# sourceMappingURL=data:application/json;base64,