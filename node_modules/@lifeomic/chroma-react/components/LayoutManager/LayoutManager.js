"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var styles_1 = require("../../styles");
var LayoutManagerContext_1 = require("./LayoutManagerContext");
exports.LayoutManagerStylesKey = 'ChromaLayoutManager';
var gridAreas = {
    sidebar: 'sidebar',
    header: 'header',
    main: 'main',
};
exports.sideBarWidth = '16.625rem';
exports.sideBarWidthCollapsed = '3.75rem';
exports.useStyles = styles_1.makeStyles(function () { return ({
    root: {
        display: 'grid',
        height: '100vh',
        width: '100%',
        gridTemplateAreas: "\n        '" + gridAreas.header + " " + gridAreas.header + "'\n        '" + gridAreas.sidebar + " " + gridAreas.main + "'\n      ",
        gridTemplateColumns: 'max-content 1fr',
        gridTemplateRows: 'max-content 1fr',
    },
    sidebar: {
        display: 'flex',
        width: '16.625rem',
        gridArea: gridAreas.sidebar,
        height: '100%',
        overflowX: 'hidden',
        transform: 'translate3d(0, 0, 0)',
        transition: 'transform 0.25s, width 0.25s ease-out',
    },
    sidebarCollapsed: {
        transitionTimingFunction: 'ease-in-out',
        width: '3.75rem',
    },
    header: {
        gridArea: gridAreas.header,
    },
    main: {
        gridArea: gridAreas.main,
        overflow: 'auto',
    },
}); }, {
    name: exports.LayoutManagerStylesKey,
});
exports.LayoutManager = function (_a) {
    var children = _a.children, header = _a.header, initialIsSidebarCollapsed = _a.initialIsSidebarCollapsed, isSidebarCollapseDisabled = _a.isSidebarCollapseDisabled, sidebar = _a.sidebar, className = _a.className, rootProps = __rest(_a, ["children", "header", "initialIsSidebarCollapsed", "isSidebarCollapseDisabled", "sidebar", "className"]);
    var _b = React.useState(isSidebarCollapseDisabled ? false : initialIsSidebarCollapsed), isSidebarCollapsed = _b[0], setIsSidebarCollapsed = _b[1];
    var contextValue = React.useMemo(function () { return ({
        isSidebarCollapsed: isSidebarCollapsed,
        isSidebarCollapseDisabled: isSidebarCollapseDisabled,
        toggleSidebarCollapsed: function () {
            if (isSidebarCollapseDisabled) {
                return;
            }
            setIsSidebarCollapsed(function (state) {
                var isOpen = !state;
                localStorage &&
                    localStorage.setItem(LayoutManagerContext_1.LayoutManagerStoreKey, isOpen ? 'true' : 'false');
                return isOpen;
            });
        },
    }); }, [isSidebarCollapsed, isSidebarCollapseDisabled]);
    var classes = exports.useStyles({});
    React.useEffect(function () {
        if (isSidebarCollapseDisabled) {
            setIsSidebarCollapsed(false);
        }
    }, [isSidebarCollapseDisabled]);
    return (React.createElement(LayoutManagerContext_1.LayoutManagerContext.Provider, { value: contextValue },
        React.createElement("div", __assign({ className: clsx_1.default(classes.root, className) }, rootProps),
            !!header && React.createElement("div", { className: classes.header }, header),
            !!sidebar && (React.createElement("aside", { className: clsx_1.default(classes.sidebar, isSidebarCollapsed && classes.sidebarCollapsed) }, sidebar)),
            React.createElement("main", { className: classes.main }, children))));
};
exports.LayoutManager.defaultProps = {
    initialIsSidebarCollapsed: !!(localStorage && localStorage.getItem(LayoutManagerContext_1.LayoutManagerStoreKey) === 'true'),
    isSidebarCollapseDisabled: false,
};
//# sourceMappingURL=data:application/json;base64,