"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PriceFormatField = exports.PercentFormatField = exports.UnitNumberFormatField = exports.UnitNumberFormatFieldStylesKey = void 0;
var react_1 = __importStar(require("react"));
var TextField_1 = require("../TextField");
var styles_1 = require("../../styles");
var clsx_1 = __importDefault(require("clsx"));
exports.UnitNumberFormatFieldStylesKey = 'ChromaUnitNumberFormatField';
var useStyles = (0, styles_1.makeStyles)(function (theme) { return ({
    textField: {
        marginTop: theme.spacing(2),
        marginBottom: theme.spacing(1),
    },
}); }, { name: exports.UnitNumberFormatFieldStylesKey });
var UnitNumberFormatField = function (props) {
    var onChange = props.onChange, onBlur = props.onBlur, value = props.value, _a = props.min, min = _a === void 0 ? 0 : _a, _b = props.max, max = _b === void 0 ? Number.MAX_SAFE_INTEGER : _b, units = props.units, _c = props.decimalScale, decimalScale = _c === void 0 ? 0 : _c, _d = props.prefixUnits, prefixUnits = _d === void 0 ? false : _d, className = props.className, other = __rest(props, ["onChange", "onBlur", "value", "min", "max", "units", "decimalScale", "prefixUnits", "className"]);
    // formatting helper. Prefixes units if specified, otherwise suffix.
    // also automatically adds a space if the units string is > 2 e.g $10.00 30%, 12ml, 10 slots
    var format = function (val) {
        return prefixUnits
            ? "".concat(units).concat(val.toFixed(decimalScale))
            : "".concat(val.toFixed(decimalScale)).concat(units.length > 2 ? ' ' : '').concat(units);
    };
    var _e = react_1.default.useState(format(value)), textFieldValue = _e[0], setTextFieldValue = _e[1];
    var classes = useStyles({});
    var _f = react_1.default.useState(format(value)), rawValue = _f[0], setRawValue = _f[1];
    // when the text input changes, call onChange handler
    var handleValueChange = function (value) {
        var rawNewValue = value.target.value;
        // user deleted value, set text field value without updating underlying value
        if (rawNewValue.trim() === units) {
            setTextFieldValue(rawNewValue);
            return;
        }
        setRawValue(rawNewValue);
        // default to 0 to handle garbage NaN input
        var newValue = parseFloat((parseFloat(rawNewValue.replace(units, '')) || 0).toFixed(decimalScale));
        setTextFieldValue(format(newValue));
        onChange(newValue);
    };
    // when the provided value changes, update the displayed value
    (0, react_1.useEffect)(function () {
        setTextFieldValue(format(value));
    }, [value]);
    var textFieldRef = react_1.default.useRef(null);
    // This useEffect keeps the position of the cursor from jumping after the value is formatted
    (0, react_1.useEffect)(function () {
        if (textFieldValue === rawValue || !textFieldRef.current) {
            return;
        }
        // user deleted value, set cursor beside units
        if (textFieldValue.trim() === units) {
            var position_1 = prefixUnits ? units.length : 0;
            textFieldRef.current.setSelectionRange(position_1, position_1);
            return;
        }
        // user typed a decimal next to a decimal, move cursor and throw it away
        if (rawValue.indexOf('..') > -1) {
            var position_2 = textFieldValue.indexOf('.') + 1;
            textFieldRef.current.setSelectionRange(position_2, position_2);
            setRawValue(textFieldValue);
            return;
        }
        // handle positioning cursor when typing in decimal part
        var rawDecimalPart = rawValue.replace(units, '').split('.')[1];
        if (decimalScale > 0 &&
            rawDecimalPart &&
            rawDecimalPart.length > decimalScale) {
            var rawNumberParts = "".concat(parseFloat(textFieldValue.replace(units, '')).toFixed(decimalScale)).split('.');
            var decimalPart = rawNumberParts[1].replace(/0+$/g, ''); // trim trailing 0s
            var position_3 = rawNumberParts[0].length + // length before decimal
                1 + // the decimal
                Math.max(decimalPart.length, 1) + // at least one character after decimal
                (prefixUnits ? units.length : 0); // length of units, if they're prefixed
            textFieldRef.current.setSelectionRange(position_3, position_3);
            setRawValue(textFieldValue);
            return;
        }
        var position = "".concat(parseFloat(textFieldValue.replace(units, ''))).length +
            (prefixUnits ? units.length : 0);
        textFieldRef.current.setSelectionRange(position, position);
        setRawValue(textFieldValue);
    }, [textFieldValue, rawValue]);
    // handles selecting just the value (not the units) on focus
    var handleFocus = react_1.default.useCallback(function () {
        /* istanbul ignore next */
        if (!textFieldRef.current) {
            return;
        }
        var inputLength = textFieldValue.replace(units, '').length;
        var inputStart = prefixUnits ? units.length : 0;
        // focus can only fire if the input ref has been set
        textFieldRef.current.setSelectionRange(inputStart, inputStart + inputLength);
    }, [textFieldValue]);
    // if the user deleted value and left only units, this restores the text field to valid value
    var handleBlur = function (event) {
        var newValue = parseFloat(Math.max(Math.min(parseFloat(rawValue.replace(units, '')), Number(max)), min).toFixed(decimalScale));
        setTextFieldValue(format(newValue));
        onChange(newValue);
        onBlur && onBlur(event);
    };
    return (react_1.default.createElement(TextField_1.TextField, __assign({}, other, { className: (0, clsx_1.default)(classes.textField, className), value: textFieldValue, min: min, max: max, onChange: handleValueChange, onFocus: handleFocus, onBlur: handleBlur, ref: textFieldRef })));
};
exports.UnitNumberFormatField = UnitNumberFormatField;
var PercentFormatField = function (props) {
    return (react_1.default.createElement(exports.UnitNumberFormatField, __assign({}, props, { units: '%', max: props.max || 100 })));
};
exports.PercentFormatField = PercentFormatField;
var PriceFormatField = function (props) {
    var value = props.value, onChange = props.onChange, min = props.min, max = props.max, otherProps = __rest(props, ["value", "onChange", "min", "max"]);
    if (!Number.isInteger(value) ||
        (min && !Number.isInteger(min)) ||
        (max && !Number.isInteger(max))) {
        throw new Error('Non-integer amount of pennies passed to PriceFormatField');
    }
    return (react_1.default.createElement(exports.UnitNumberFormatField, __assign({ value: value / 100, onChange: function (val) { return onChange(val * 100); }, min: min ? min / 100 : undefined, max: max ? max / 100 : undefined }, otherProps, { prefixUnits: true, units: '$', decimalScale: 2 })));
};
exports.PriceFormatField = PriceFormatField;
//# sourceMappingURL=data:application/json;base64,