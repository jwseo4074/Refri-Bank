"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var react_hotkeys_1 = require("react-hotkeys");
var styles_1 = require("../../styles");
var Button_1 = require("../Button");
var Chip_1 = require("../Chip");
var Modal_1 = require("../Modal");
var KEY_MAP = {
    SHOW_KEYMAP_HELP: 'shift+?',
};
var BASE_KEY_MAP_DOCS = [
    {
        sequences: ['shift+?'],
        description: 'Show keyboard shortcuts',
    },
    {
        sequences: ['['],
        description: 'Toggle sidebar',
    },
];
exports.KeymapHelpStylesKey = 'ChromaKeymapHelp';
exports.useStyles = styles_1.makeStyles(function (theme) { return ({
    root: {},
    sequence: {
        paddingLeft: theme.spacing(3.75),
    },
}); }, { name: exports.KeymapHelpStylesKey });
exports.KeymapHelp = function (_a) {
    var closeButtonText = _a.closeButtonText, keyMapDocs = _a.keyMapDocs;
    var classes = exports.useStyles({});
    var _b = React.useState(false), isOpen = _b[0], setIsOpen = _b[1];
    var onClose = function () {
        setIsOpen(false);
    };
    var HANDLERS = {
        SHOW_KEYMAP_HELP: function () { return setIsOpen(true); },
    };
    var docs = __spreadArrays(BASE_KEY_MAP_DOCS);
    if (keyMapDocs) {
        keyMapDocs.forEach(function (x) { return docs.push(x); });
    }
    return (React.createElement(React.Fragment, null,
        React.createElement(react_hotkeys_1.GlobalHotKeys, { keyMap: KEY_MAP, handlers: HANDLERS },
            React.createElement("span", null)),
        React.createElement(Modal_1.Modal, { isOpen: isOpen, title: "Keyboard shortcuts", onDismiss: onClose, actions: React.createElement(Button_1.Button, { variant: "contained", onClick: onClose }, closeButtonText || 'Close') },
            React.createElement(React.Fragment, null,
                React.createElement("table", null,
                    React.createElement("tbody", null, docs.map(function (_a) {
                        var sequences = _a.sequences, description = _a.description;
                        var name = sequences.join('|');
                        return (React.createElement("tr", { key: name },
                            React.createElement("td", null, description),
                            React.createElement("td", { className: classes.sequence }, sequences.map(function (sequence) { return (React.createElement(Chip_1.Chip, { key: sequence, label: sequence })); }))));
                    })))))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2V5bWFwSGVscC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0tleW1hcEhlbHAvS2V5bWFwSGVscC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJDQUErQjtBQUMvQiwrQ0FBOEM7QUFDOUMsdUNBQTBDO0FBRTFDLG9DQUFtQztBQUNuQyxnQ0FBK0I7QUFDL0Isa0NBQWlDO0FBRWpDLElBQU0sT0FBTyxHQUFHO0lBQ2QsZ0JBQWdCLEVBQUUsU0FBUztDQUM1QixDQUFDO0FBRUYsSUFBTSxpQkFBaUIsR0FBb0I7SUFDekM7UUFDRSxTQUFTLEVBQUUsQ0FBQyxTQUFTLENBQUM7UUFDdEIsV0FBVyxFQUFFLHlCQUF5QjtLQUN2QztJQUNEO1FBQ0UsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDO1FBQ2hCLFdBQVcsRUFBRSxnQkFBZ0I7S0FDOUI7Q0FDRixDQUFDO0FBRVcsUUFBQSxtQkFBbUIsR0FBRyxrQkFBa0IsQ0FBQztBQUV6QyxRQUFBLFNBQVMsR0FBRyxtQkFBVSxDQUNqQyxVQUFDLEtBQUssSUFBSyxPQUFBLENBQUM7SUFDVixJQUFJLEVBQUUsRUFBRTtJQUNSLFFBQVEsRUFBRTtRQUNSLFdBQVcsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztLQUNqQztDQUNGLENBQUMsRUFMUyxDQUtULEVBQ0YsRUFBRSxJQUFJLEVBQUUsMkJBQW1CLEVBQUUsQ0FDOUIsQ0FBQztBQWtCVyxRQUFBLFVBQVUsR0FBOEIsVUFBQyxFQUdyRDtRQUZDLG9DQUFlLEVBQ2YsMEJBQVU7SUFFVixJQUFNLE9BQU8sR0FBRyxpQkFBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3hCLElBQUEsMEJBQTJDLEVBQTFDLGNBQU0sRUFBRSxpQkFBa0MsQ0FBQztJQUNsRCxJQUFNLE9BQU8sR0FBRztRQUNkLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQixDQUFDLENBQUM7SUFFRixJQUFNLFFBQVEsR0FBRztRQUNmLGdCQUFnQixFQUFFLGNBQU0sT0FBQSxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQWYsQ0FBZTtLQUN4QyxDQUFDO0lBRUYsSUFBTSxJQUFJLGtCQUFPLGlCQUFpQixDQUFDLENBQUM7SUFDcEMsSUFBSSxVQUFVLEVBQUU7UUFDZCxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBWixDQUFZLENBQUMsQ0FBQztLQUN6QztJQUVELE9BQU8sQ0FDTDtRQUNFLG9CQUFDLDZCQUFhLElBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUTtZQUNoRCxpQ0FBUSxDQUNNO1FBQ2hCLG9CQUFDLGFBQUssSUFDSixNQUFNLEVBQUUsTUFBTSxFQUNkLEtBQUssRUFBQyxvQkFBb0IsRUFDMUIsU0FBUyxFQUFFLE9BQU8sRUFDbEIsT0FBTyxFQUNMLG9CQUFDLGVBQU0sSUFBQyxPQUFPLEVBQUMsV0FBVyxFQUFDLE9BQU8sRUFBRSxPQUFPLElBQ3pDLGVBQWUsSUFBSSxPQUFPLENBQ3BCO1lBR1g7Z0JBQ0U7b0JBQ0UsbUNBQ0csSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEVBQTBCOzRCQUF4Qix3QkFBUyxFQUFFLDRCQUFXO3dCQUNqQyxJQUFNLElBQUksR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUNqQyxPQUFPLENBQ0wsNEJBQUksR0FBRyxFQUFFLElBQUk7NEJBQ1gsZ0NBQUssV0FBVyxDQUFNOzRCQUN0Qiw0QkFBSSxTQUFTLEVBQUUsT0FBTyxDQUFDLFFBQVEsSUFDNUIsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFDLFFBQVEsSUFBSyxPQUFBLENBQzNCLG9CQUFDLFdBQUksSUFBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxRQUFRLEdBQUksQ0FDekMsRUFGNEIsQ0FFNUIsQ0FBQyxDQUNDLENBQ0YsQ0FDTixDQUFDO29CQUNKLENBQUMsQ0FBQyxDQUNJLENBQ0YsQ0FDUCxDQUNHLENBQ1AsQ0FDSixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgR2xvYmFsSG90S2V5cyB9IGZyb20gJ3JlYWN0LWhvdGtleXMnO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJy4uLy4uL3N0eWxlcyc7XG5pbXBvcnQgeyBHZXRDbGFzc2VzIH0gZnJvbSAnLi4vLi4vdHlwZVV0aWxzJztcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4uL0J1dHRvbic7XG5pbXBvcnQgeyBDaGlwIH0gZnJvbSAnLi4vQ2hpcCc7XG5pbXBvcnQgeyBNb2RhbCB9IGZyb20gJy4uL01vZGFsJztcblxuY29uc3QgS0VZX01BUCA9IHtcbiAgU0hPV19LRVlNQVBfSEVMUDogJ3NoaWZ0Kz8nLFxufTtcblxuY29uc3QgQkFTRV9LRVlfTUFQX0RPQ1M6IEtleUJpbmRpbmdEb2NbXSA9IFtcbiAge1xuICAgIHNlcXVlbmNlczogWydzaGlmdCs/J10sXG4gICAgZGVzY3JpcHRpb246ICdTaG93IGtleWJvYXJkIHNob3J0Y3V0cycsXG4gIH0sXG4gIHtcbiAgICBzZXF1ZW5jZXM6IFsnWyddLFxuICAgIGRlc2NyaXB0aW9uOiAnVG9nZ2xlIHNpZGViYXInLFxuICB9LFxuXTtcblxuZXhwb3J0IGNvbnN0IEtleW1hcEhlbHBTdHlsZXNLZXkgPSAnQ2hyb21hS2V5bWFwSGVscCc7XG5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAodGhlbWUpID0+ICh7XG4gICAgcm9vdDoge30sXG4gICAgc2VxdWVuY2U6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDMuNzUpLFxuICAgIH0sXG4gIH0pLFxuICB7IG5hbWU6IEtleW1hcEhlbHBTdHlsZXNLZXkgfVxuKTtcblxuZXhwb3J0IGludGVyZmFjZSBLZXlCaW5kaW5nRG9jIHtcbiAgc2VxdWVuY2VzOiBzdHJpbmdbXTtcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgS2V5bWFwSGVscENsYXNzZXMgPSBHZXRDbGFzc2VzPHR5cGVvZiB1c2VTdHlsZXM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEtleW1hcEhlbHBQcm9wcyB7XG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIGtleSBtYXAgZG9jcyB0byBkaXNwbGF5LiBXZSBjYW4ndCB1c2UgZ2V0QXBwbGljYXRpb25LZXlNYXAoKVxuICAgKiBiZWNhdXNlIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbmExMy9yZWFjdC1ob3RrZXlzL2lzc3Vlcy8yMjhcbiAgICovXG4gIGtleU1hcERvY3M/OiBLZXlCaW5kaW5nRG9jW107XG4gIGNsb3NlQnV0dG9uVGV4dD86IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IEtleW1hcEhlbHA6IFJlYWN0LkZDPEtleW1hcEhlbHBQcm9wcz4gPSAoe1xuICBjbG9zZUJ1dHRvblRleHQsXG4gIGtleU1hcERvY3MsXG59KSA9PiB7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoe30pO1xuICBjb25zdCBbaXNPcGVuLCBzZXRJc09wZW5dID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBvbkNsb3NlID0gKCkgPT4ge1xuICAgIHNldElzT3BlbihmYWxzZSk7XG4gIH07XG5cbiAgY29uc3QgSEFORExFUlMgPSB7XG4gICAgU0hPV19LRVlNQVBfSEVMUDogKCkgPT4gc2V0SXNPcGVuKHRydWUpLFxuICB9O1xuXG4gIGNvbnN0IGRvY3MgPSBbLi4uQkFTRV9LRVlfTUFQX0RPQ1NdO1xuICBpZiAoa2V5TWFwRG9jcykge1xuICAgIGtleU1hcERvY3MuZm9yRWFjaCgoeCkgPT4gZG9jcy5wdXNoKHgpKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxHbG9iYWxIb3RLZXlzIGtleU1hcD17S0VZX01BUH0gaGFuZGxlcnM9e0hBTkRMRVJTfT5cbiAgICAgICAgPHNwYW4gLz5cbiAgICAgIDwvR2xvYmFsSG90S2V5cz5cbiAgICAgIDxNb2RhbFxuICAgICAgICBpc09wZW49e2lzT3Blbn1cbiAgICAgICAgdGl0bGU9XCJLZXlib2FyZCBzaG9ydGN1dHNcIlxuICAgICAgICBvbkRpc21pc3M9e29uQ2xvc2V9XG4gICAgICAgIGFjdGlvbnM9e1xuICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cImNvbnRhaW5lZFwiIG9uQ2xpY2s9e29uQ2xvc2V9PlxuICAgICAgICAgICAge2Nsb3NlQnV0dG9uVGV4dCB8fCAnQ2xvc2UnfVxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICB9XG4gICAgICA+XG4gICAgICAgIDw+XG4gICAgICAgICAgPHRhYmxlPlxuICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICB7ZG9jcy5tYXAoKHsgc2VxdWVuY2VzLCBkZXNjcmlwdGlvbiB9KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IHNlcXVlbmNlcy5qb2luKCd8Jyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIDx0ciBrZXk9e25hbWV9PlxuICAgICAgICAgICAgICAgICAgICA8dGQ+e2Rlc2NyaXB0aW9ufTwvdGQ+XG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9e2NsYXNzZXMuc2VxdWVuY2V9PlxuICAgICAgICAgICAgICAgICAgICAgIHtzZXF1ZW5jZXMubWFwKChzZXF1ZW5jZSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPENoaXAga2V5PXtzZXF1ZW5jZX0gbGFiZWw9e3NlcXVlbmNlfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgPC8+XG4gICAgICA8L01vZGFsPlxuICAgIDwvPlxuICApO1xufTtcbiJdfQ==