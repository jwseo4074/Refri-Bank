"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var chromicons_1 = require("@lifeomic/chromicons");
var styles_1 = require("../../styles");
var UniqueId_1 = require("../_private/UniqueId");
var Text_1 = require("../Text");
exports.ExpansionPanelStylesKey = 'ChromaExpansionPanel';
exports.useStyles = styles_1.makeStyles(function (theme) { return ({
    root: {
        width: '100%',
        borderBottom: "1px solid " + theme.palette.divider,
    },
    rootOpen: {
        maxHeight: 'inherit',
    },
    button: {
        width: '100%',
        background: theme.palette.common.white,
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        position: 'relative',
        textAlign: 'left',
        border: 'none',
        outline: 'none',
        paddingLeft: theme.spacing(2),
        paddingRight: theme.spacing(2),
        paddingTop: theme.spacing(1.25),
        paddingBottom: theme.spacing(1.25),
        cursor: 'pointer',
        '&:focus': {
            outline: 'none',
        },
        '&:hover > p, &:focus > p': {
            color: theme.palette.black.main,
            transform: 'translate3d(2px, 0, 0)',
        },
    },
    buttonShadow: {
        boxShadow: theme.boxShadows.table,
    },
    title: {
        color: theme.palette.text.secondary,
        letterSpacing: 'initial',
        transition: 'color 0.5s ease, transform 0.5s ease',
    },
    icon: {
        transition: 'transform 0.25s ease',
        color: theme.palette.primary.main,
    },
    rotate: {
        transform: 'rotate(45deg)',
    },
    content: {
        maxHeight: 0,
        overflow: 'hidden',
        transition: 'max-height 0.25s ease-in-out',
    },
    inner: {
        display: 'flex',
        flexDirection: 'column',
        background: theme.palette.common.white,
        padding: theme.spacing(2),
        width: '100%',
        height: '100%',
        visibility: 'visible',
    },
    directionRow: {
        flexDirection: 'row',
    },
    innerHidden: {
        visibility: 'hidden',
    },
}); }, { name: exports.ExpansionPanelStylesKey });
exports.ExpansionPanel = function (_a) {
    var _b;
    var _c;
    var ariaOwnsId = _a.ariaOwnsId, children = _a.children, className = _a.className, contentClassName = _a.contentClassName, innerContentClassName = _a.innerContentClassName, onToggle = _a.onToggle, _d = _a.isOpen, isOpen = _d === void 0 ? false : _d, _e = _a.contentDirection, contentDirection = _e === void 0 ? 'column' : _e, title = _a.title, rootProps = __rest(_a, ["ariaOwnsId", "children", "className", "contentClassName", "innerContentClassName", "onToggle", "isOpen", "contentDirection", "title"]);
    var classes = exports.useStyles({});
    var _f = React.useState(isOpen), isExpanded = _f[0], setIsExpanded = _f[1];
    var ref = React.useRef(null);
    var _g = React.useState(0), contentHeight = _g[0], setContentHeight = _g[1];
    var ariaId = React.useState(function () { return ariaOwnsId || UniqueId_1.generateUniqueId('exppanel-'); })[0];
    // Watch for `isOpen` changes
    React.useEffect(function () {
        setIsExpanded(isOpen);
    }, [isOpen]);
    // TODO: Look into https://medium.com/@teh_builder/ref-objects-inside-useeffect-hooks-eb7c15198780
    //
    // Determine the size of our content so we can expand/collapse
    // accordingly.  If the children are dynamically generated, we should
    // re-evaluate our size in case additional content is added/removed
    React.useEffect(function () {
        if (ref && ref.current && children) {
            setContentHeight(ref.current.scrollHeight + 25);
        }
    }, [children, (_c = ref === null || ref === void 0 ? void 0 : ref.current) === null || _c === void 0 ? void 0 : _c.scrollHeight]);
    var handleClick = React.useCallback(function (e) {
        e.preventDefault();
        e.stopPropagation();
        var newState = !isExpanded;
        if (typeof onToggle === 'function') {
            onToggle(newState);
        }
        setIsExpanded(newState);
    }, [isExpanded, onToggle]);
    return (React.createElement("div", __assign({ className: clsx_1.default(classes.root, isExpanded && classes.rootOpen, className) }, rootProps),
        React.createElement("button", { "aria-expanded": isExpanded, "aria-owns": ariaId, className: clsx_1.default(classes.button, isExpanded && classes.buttonShadow), onClick: handleClick, tabIndex: 0 },
            React.createElement(Text_1.Text, { className: classes.title, size: "subbody", weight: "bold" }, title),
            React.createElement(chromicons_1.Plus, { className: clsx_1.default(classes.icon, isExpanded && classes.rotate), "aria-hidden": "true", width: 18, height: 18 })),
        React.createElement("div", { "aria-hidden": !isExpanded, id: ariaId, className: clsx_1.default(classes.content, contentClassName), style: { maxHeight: isExpanded ? contentHeight : 0 } },
            React.createElement("div", { ref: ref, className: clsx_1.default(classes.inner, innerContentClassName, (_b = {},
                    _b[classes.directionRow] = contentDirection === 'row',
                    _b), !isExpanded && classes.innerHidden) }, children))));
};
exports.default = exports.ExpansionPanel;
//# sourceMappingURL=data:application/json;base64,