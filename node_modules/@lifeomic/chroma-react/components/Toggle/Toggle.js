"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Toggle = exports.useStyles = exports.ToggleStylesKey = void 0;
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var styles_1 = require("../../styles");
var forms_1 = require("../_private/forms");
var UniqueId_1 = require("../_private/UniqueId");
var Text_1 = require("../Text");
var screenreaderOnly_1 = require("../../styles/screenreaderOnly");
exports.ToggleStylesKey = 'ChromaToggle';
exports.useStyles = (0, styles_1.makeStyles)(function (theme) { return ({
    root: {
        display: 'flex',
        // Setup default ball styles
        '& > input[type="checkbox"]::after': {
            background: theme.palette.common.white,
            transform: 'translateX(0px)',
            transition: 'transform .3s cubic-bezier(.2, .85, .32, 1.2), opacity .2s',
        },
        // Target the ball to move *and* change color to white
        '& > input[type="checkbox"]:checked::after': {
            background: theme.palette.common.white,
            transform: 'translateX(17px)',
        },
        // Targets the ball when the input is disabled and not checked
        '& > input[type="checkbox"]:disabled:not(:checked)::after': {
            opacity: 0.6,
        },
    },
    input: {
        background: 'rgba(132, 137, 166, 0.15)',
        border: '1px solid transparent',
        borderRadius: theme.pxToRem(11),
        cursor: 'pointer',
        display: 'inline-block',
        height: theme.pxToRem(21),
        margin: 0,
        MozAppearance: 'none',
        outline: 'none',
        position: 'relative',
        transition: 'background .3s, border-color .3s, box-shadow .2s',
        verticalAlign: 'top',
        WebkitAppearance: 'none',
        minWidth: theme.pxToRem(38),
        '&:after': {
            background: theme.palette.common.white,
            borderRadius: '50%',
            content: '" "',
            display: 'block',
            height: theme.pxToRem(15),
            left: theme.pxToRem(2),
            position: 'absolute',
            top: theme.pxToRem(2),
            width: theme.pxToRem(15),
        },
        '&:checked': {
            background: theme.palette.primary.main,
            border: "1px solid ".concat(theme.palette.primary.main),
        },
        '&:disabled': {
            cursor: 'not-allowed',
            opacity: 0.625,
            // Ensure the label sibling cannot be clicked as well
            '& + label': {
                cursor: 'not-allowed',
            },
        },
        '&:focus': {
            boxShadow: '0 0 0 2px rgba(0, 150, 225, .3)',
        },
        '&:hover:not(:disabled):not(:checked)': {
            border: "1px solid ".concat(theme.palette.primary[700]),
        },
    },
    inputInverse: {
        backgroundColor: 'rgba(230, 231, 237, 0.1)',
        border: '1px solid rgba(255, 255, 255, 0.2)',
        mixBlendMode: 'hard-light',
        '&:checked': {
            background: theme.palette.secondary[500],
            border: "1px solid ".concat(theme.palette.secondary[500]),
        },
        '&:focus': {
            boxShadow: '0 0 0 2px rgba(255, 255, 255, .3)',
        },
        '&:hover:not(:disabled):not(:checked)': {
            border: "1px solid ".concat(theme.palette.common.white),
        },
    },
    labelContainer: {
        flex: '0 auto',
        marginLeft: theme.spacing(1),
    },
    label: {
        cursor: 'pointer',
        display: 'inline-block',
        marginBottom: 0,
        marginTop: theme.spacing(0.25),
        verticalAlign: 'top',
        '& p': {
            lineHeight: 1.25,
        },
    },
    labelInverse: {
        color: theme.palette.common.white,
    },
    message: {},
    error: {
        border: "1px solid ".concat(theme.palette.red.main),
    },
    rootRight: {
        flexFlow: 'row-reverse',
        justifyContent: 'flex-end',
    },
    labelContainerRight: {
        marginRight: theme.spacing(1),
        marginLeft: 0,
    },
    labelContainerFullWidth: {
        flex: 1,
    },
    labelFullWidth: {
        display: 'flex',
    },
    srOnly: __assign({}, screenreaderOnly_1.screenreaderOnlyStyles),
}); }, { name: exports.ToggleStylesKey });
exports.Toggle = React.forwardRef(function (_a, ref) {
    var _b, _c, _d;
    var ariaLabel = _a["aria-label"], checked = _a.checked, className = _a.className, _e = _a.color, color = _e === void 0 ? 'default' : _e, fullWidth = _a.fullWidth, errorMessage = _a.errorMessage, hasError = _a.hasError, helpMessage = _a.helpMessage, id = _a.id, label = _a.label, name = _a.name, _f = _a.placement, placement = _f === void 0 ? 'left' : _f, rootProps = __rest(_a, ['aria-label', "checked", "className", "color", "fullWidth", "errorMessage", "hasError", "helpMessage", "id", "label", "name", "placement"]);
    var classes = (0, exports.useStyles)({});
    var uniqueId = React.useState(function () { return id || name || (0, UniqueId_1.generateUniqueId)('toggle-'); })[0];
    if (!label && !ariaLabel && process.env.NODE_ENV === 'development') {
        throw new Error('If a "label" is not provided to Toggle, please provide "aria-label".');
    }
    return (React.createElement("div", { className: (0, clsx_1.default)(classes.root, (_b = {}, _b[classes.rootRight] = placement === 'right', _b), className) },
        React.createElement("input", __assign({ "aria-describedby": (0, forms_1.buildDescribedBy)({
                hasError: hasError,
                hasHelpMessage: !!helpMessage,
                uniqueId: uniqueId,
            }), className: (0, clsx_1.default)(classes.input, hasError && classes.error, (_c = {},
                _c[classes.inputInverse] = color === 'inverse',
                _c)), ref: ref, type: "checkbox", id: uniqueId, checked: checked, tabIndex: 0 }, rootProps)),
        React.createElement("div", { className: (0, clsx_1.default)(classes.labelContainer, fullWidth && classes.labelContainerFullWidth, (_d = {},
                _d[classes.labelContainerRight] = placement === 'right',
                _d), !label && ariaLabel && classes.srOnly) },
            React.createElement("label", { className: (0, clsx_1.default)(classes.label, fullWidth && classes.labelFullWidth), htmlFor: uniqueId },
                React.createElement(Text_1.Text, { className: color === 'inverse' ? classes.labelInverse : undefined, size: "subbody" }, label || ariaLabel)),
            helpMessage && (React.createElement(forms_1.FormHelpMessage, { className: classes.message, color: color, rootElementId: uniqueId, describedById: (0, forms_1.helpFor)(uniqueId) }, helpMessage)),
            hasError && (React.createElement(forms_1.FormErrorMessage, { className: classes.message, color: color, rootElementId: uniqueId, describedById: (0, forms_1.errorFor)(uniqueId) }, errorMessage)))));
});
//# sourceMappingURL=data:application/json;base64,