import * as React from 'react';
import { GetClasses } from '../../typeUtils';
import { BaseFormElement } from '../_private/forms';
import { SelectOptionProps } from './SelectOption';
export declare const testIds: {
    placeholderText: string;
};
export declare const SelectStylesKey = "ChromaSelect";
export declare const useStyles: (props: {}) => Record<"popover" | "button" | "root" | "rotate" | "label" | "option" | "ul" | "labelInverse" | "srOnly" | "labelSecondary" | "labelIcon" | "labelIconInverse" | "tooltipContainer" | "buttonInverse" | "buttonError" | "buttonArrowContainer" | "buttonText" | "placeholderText" | "comboBoxPlaceholder" | "comboxBoxOverflow" | "buttonFullWidth" | "arrowIcon" | "chipList" | "chip" | "message", string>;
export declare type SelectClasses = GetClasses<typeof useStyles>;
export interface SelectProps extends Pick<BaseFormElement, 'color' | 'hasError' | 'errorMessage' | 'helpMessage' | 'label'>, Pick<React.ComponentPropsWithoutRef<'input'>, 'disabled'>, Pick<React.ComponentPropsWithoutRef<'select'>, 'className' | 'id' | 'value'> {
    ['aria-label']?: string;
    secondaryLabel?: string;
    fullWidth?: boolean;
    icon?: React.ComponentType<React.SVGProps<SVGSVGElement>>;
    onChange?: (value: string, meta: any) => void;
    placeholder?: string;
    placement?: 'top-start' | 'top' | 'top-end' | 'right-start' | 'right' | 'right-end' | 'bottom-end' | 'bottom' | 'bottom-start' | 'left-end' | 'left' | 'left-start';
    popoverAriaLabel?: string;
    selectedOptionDisplay?: (option: SelectOptionProps) => string | null | undefined | React.ReactNode;
    tooltipMessage?: string;
}
export declare const Select: React.FC<SelectProps>;
