"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var react_focus_lock_1 = __importDefault(require("react-focus-lock"));
var Popover_1 = require("reakit/Popover");
var Portal_1 = require("reakit/Portal");
var chromicons_1 = require("@lifeomic/chromicons");
var styles_1 = require("../../styles");
var forms_1 = require("../_private/forms");
var UniqueId_1 = require("../_private/UniqueId");
var Text_1 = require("../Text");
var framer_motion_1 = require("framer-motion");
var RoverOption_1 = require("./RoverOption");
var Rover_1 = require("reakit/Rover");
var getTestProps_1 = require("../../testUtils/getTestProps");
var screenreaderOnly_1 = require("../../styles/screenreaderOnly");
var Tooltip_1 = require("../Tooltip");
exports.testIds = {
    placeholderText: 'select-placeholderText',
};
exports.SelectStylesKey = 'ChromaSelect';
exports.useStyles = styles_1.makeStyles(function (theme) { return ({
    root: {},
    popover: {
        background: theme.palette.common.white,
        borderRadius: theme.pxToRem(10),
        boxShadow: theme.boxShadows.popover,
        minWidth: theme.pxToRem(224),
        overflow: 'hidden',
        zIndex: 1300,
        '&:focus': {
            outline: 'none',
        },
    },
    label: {
        alignItems: 'center',
        color: theme.palette.black[800],
        display: 'flex',
        fontSize: theme.pxToRem(14),
        fontWeight: theme.typography.fontWeightBold,
        marginBottom: theme.spacing(1),
        '&:empty': {
            marginBottom: theme.spacing(0),
        },
    },
    labelSecondary: {
        fontSize: theme.pxToRem(11),
        display: 'inline-block',
        margin: theme.spacing(0, 0.75),
        color: theme.palette.text.hint,
    },
    labelInverse: {
        color: theme.palette.common.white,
        '&$labelSecondary': {
            opacity: 0.9,
        },
    },
    labelIcon: {
        marginLeft: theme.spacing(0.75),
        color: theme.palette.primary.main,
    },
    labelIconInverse: {
        mixBlendMode: 'screen',
    },
    tooltipContainer: {
        display: 'flex',
        outline: 'none',
    },
    button: {
        alignItems: 'center',
        backgroundColor: 'rgba(132, 137, 166, 0.15)',
        border: 'solid 1px transparent',
        borderRadius: theme.pxToRem(4),
        color: theme.palette.text.primary,
        cursor: 'pointer',
        display: 'block',
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.pxToRem(14),
        maxHeight: theme.pxToRem(84),
        minHeight: theme.pxToRem(35),
        margin: 0,
        minWidth: theme.pxToRem(175),
        outline: 'none',
        overflow: 'hidden',
        padding: theme.spacing(0.5, 3.75, 0.5, 1.25),
        position: 'relative',
        transition: 'border 0.5s ease',
        '&:disabled': {
            cursor: 'not-allowed',
            opacity: 0.625,
        },
        '&:focus': {
            boxShadow: '0 0 0 2px rgba(0, 150, 225, .3)',
            outline: 'none',
        },
        '&::-moz-focus-inner': {
            border: 'none',
        },
    },
    buttonInverse: {
        backgroundColor: 'rgba(230, 231, 237, 0.1)',
        color: theme.palette.common.white,
        '&:focus': {
            boxShadow: '0 0 0 2px rgba(255, 255, 255, .3)',
        },
        '& $chip': {
            background: 'rgba(255, 255, 255, 0.5)',
            color: theme.palette.text.primary,
        },
        '& $buttonText$placeholderText': {
            color: theme.palette.common.white,
        },
    },
    buttonError: {
        backgroundColor: 'rgba(230, 231, 237, 0.1)',
        border: "1px solid " + theme.palette.error.main,
        '&:focus': {
            border: "1px solid " + theme.palette.error.main,
        },
    },
    buttonArrowContainer: {
        alignItems: 'center',
        display: 'flex',
        flexFlow: 'column',
        minHeight: theme.pxToRem(32),
        height: theme.pxToRem(32),
        justifyContent: 'center',
        position: 'absolute',
        right: theme.pxToRem(-6),
        textAlign: 'center',
        top: theme.pxToRem(1),
        width: '2rem',
    },
    buttonText: {
        color: 'inherit',
        marginTop: theme.spacing(0.125),
        overflow: 'hidden',
        textAlign: 'left',
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap',
        width: '100%',
        '&$placeholderText': {
            color: theme.palette.text.hint,
        },
    },
    placeholderText: {},
    comboBoxPlaceholder: {
        marginTop: theme.spacing(0.25),
    },
    comboxBoxOverflow: {
        overflowY: 'auto',
    },
    buttonFullWidth: {
        width: '100%',
    },
    arrowIcon: {
        alignSelf: 'flex-start',
        position: 'sticky',
        transition: 'transform 0.25s ease',
        strokeOpacity: 0.6,
        top: theme.spacing(0.5),
    },
    rotate: {
        transform: 'rotate(180deg)',
        top: theme.spacing(0.375),
    },
    ul: {
        display: 'block',
        listStyle: 'none',
        margin: 0,
        maxHeight: theme.pxToRem(328),
        overflowY: 'auto',
        padding: theme.spacing(1, 0),
    },
    option: {
        alignItems: 'center',
        backgroundColor: theme.palette.common.white,
        cursor: 'pointer',
        display: 'flex',
        minHeight: theme.pxToRem(26),
        outline: 'none',
        paddingLeft: theme.spacing(2),
        paddingRight: theme.spacing(2),
        transition: 'background-color 0.25s ease',
        '&:hover, &:focus': {
            backgroundColor: 'rgba(222,244,252, 0.6)',
        },
    },
    chipList: {
        display: 'flex',
        flexFlow: 'wrap',
        margin: theme.spacing(-0.5, -0.5, 0),
    },
    chip: {
        alignItems: 'center',
        background: theme.palette.primary.main,
        borderRadius: theme.pxToRem(3),
        color: theme.palette.common.white,
        display: 'inline-block',
        height: theme.pxToRem(22),
        fontSize: theme.pxToRem(12),
        margin: theme.spacing(0.5, 0.25, 0),
        overflow: 'hidden',
        paddingLeft: theme.spacing(1),
        paddingRight: theme.spacing(1),
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap',
    },
    message: {
        marginTop: theme.spacing(0.875),
        marginLeft: 0,
    },
    srOnly: __assign({}, screenreaderOnly_1.screenreaderOnlyStyles),
}); }, { name: exports.SelectStylesKey });
var popoverVariants = {
    open: {
        opacity: 1,
        offsetTop: -2,
        transition: {
            duration: 0.25,
            ease: 'easeOut',
        },
    },
    closed: {
        opacity: 0,
        offsetTop: -18,
    },
};
var popoverVariantsReduced = {
    open: {
        opacity: 1,
        transition: {
            duration: 0.2,
            ease: 'easeOut',
        },
    },
    closed: {
        opacity: 0,
    },
};
var listMotionVariants = {
    open: {
        transition: {
            delayChildren: 0.025,
            staggerChildren: 0.045,
            duration: 0.2,
        },
    },
    closed: {},
};
var listMotionVariantsReduced = {
    open: {},
    closed: {},
};
var listItemMotionVariants = {
    open: {
        y: 0,
        opacity: 1,
        transition: {
            y: { stiffness: 1000, velocity: -100 },
        },
    },
    closed: {
        y: -16,
        opacity: 0,
    },
};
var listItemMotionVariantsReduced = {
    open: {
        opacity: 1,
    },
    closed: {
        opacity: 0,
    },
};
var isHeadingElement = function (element) {
    return element.props['data-select-role'] === 'heading';
};
exports.Select = function (_a) {
    var _b;
    var ariaLabel = _a["aria-label"], children = _a.children, className = _a.className, _c = _a.color, color = _c === void 0 ? 'default' : _c, errorMessage = _a.errorMessage, fullWidth = _a.fullWidth, hasError = _a.hasError, helpMessage = _a.helpMessage, Icon = _a.icon, id = _a.id, label = _a.label, secondaryLabel = _a.secondaryLabel, onChange = _a.onChange, placeholder = _a.placeholder, placement = _a.placement, popoverAriaLabel = _a.popoverAriaLabel, selectedOptionDisplay = _a.selectedOptionDisplay, tooltipMessage = _a.tooltipMessage, value = _a.value, rootProps = __rest(_a, ['aria-label', "children", "className", "color", "errorMessage", "fullWidth", "hasError", "helpMessage", "icon", "id", "label", "secondaryLabel", "onChange", "placeholder", "placement", "popoverAriaLabel", "selectedOptionDisplay", "tooltipMessage", "value"]);
    var classes = exports.useStyles({});
    var popover = Popover_1.usePopoverState({ placement: placement });
    var shouldReduceMotion = framer_motion_1.useReducedMotion();
    var buttonRef = React.useRef(); // TODO: Need to type this properly...
    var _d = React.useState(50), width = _d[0], setWidth = _d[1];
    var _e = React.useState(null), internalSelection = _e[0], setInternalSelection = _e[1];
    var uniqueId = React.useState(function () { return id || name || UniqueId_1.generateUniqueId('select-'); })[0];
    var rover = Rover_1.useRoverState({ loop: true, orientation: 'vertical' });
    // Update the opened popover width any time the button width changes
    // TODO: Review the best way to handle this without breaking
    // eslint-disable-next-line react-hooks/exhaustive-deps
    React.useEffect(function () {
        setWidth(buttonRef.current.getBoundingClientRect().width);
    });
    React.useEffect(function () {
        // TODO: Need to type this properly as well...
        var match = React.Children.toArray(children).find(function (child) {
            if (!React.isValidElement(child)) {
                return null;
            }
            if (isHeadingElement(child)) {
                return null;
            }
            return child.props.value === value;
        });
        // If there is no match, set internalSelection to null so placeholder will be shown
        setInternalSelection(match ? match.props : null);
    }, [children, value]);
    var hidePopover = popover.hide;
    var handleOptionSelected = React.useCallback(function (optionValue, meta) {
        hidePopover();
        onChange === null || onChange === void 0 ? void 0 : onChange(optionValue, meta);
    }, [hidePopover, onChange]);
    if (!label && !ariaLabel && process.env.NODE_ENV === 'development') {
        throw new Error('If a "label" is not provided to Select, please provide "aria-label".');
    }
    return (React.createElement("div", { className: clsx_1.default(classes.root, className) },
        React.createElement("label", { "aria-hidden": "true", className: clsx_1.default(classes.label, color === 'inverse' && classes.labelInverse, !label && ariaLabel && classes.srOnly), htmlFor: uniqueId },
            label || ariaLabel,
            !!Icon && tooltipMessage && (React.createElement(Tooltip_1.Tooltip, { title: tooltipMessage },
                React.createElement("span", { className: classes.tooltipContainer },
                    React.createElement(Icon, { className: clsx_1.default(classes.labelIcon, color === 'inverse' && classes.labelIconInverse), width: 16, height: 16, role: "img", "aria-hidden": true })))),
            secondaryLabel ? (React.createElement("span", { className: clsx_1.default(classes.labelSecondary, color === 'inverse' && classes.labelInverse) }, secondaryLabel)) : null),
        React.createElement(Popover_1.PopoverDisclosure, __assign({ className: clsx_1.default(classes.button, hasError && classes.buttonError, fullWidth && classes.buttonFullWidth, (_b = {},
                _b[classes.buttonInverse] = color === 'inverse',
                _b)), ref: buttonRef, "aria-describedby": forms_1.buildDescribedBy({
                hasError: hasError,
                hasHelpMessage: !!helpMessage,
                uniqueId: uniqueId,
            }), id: uniqueId }, popover, rootProps),
            React.createElement(React.Fragment, null,
                !internalSelection && (React.createElement(Text_1.Text, __assign({ className: clsx_1.default(classes.placeholderText, classes.buttonText), size: "subbody" }, getTestProps_1.getTestProps(exports.testIds.placeholderText)), placeholder)),
                internalSelection && !selectedOptionDisplay && (React.createElement(Text_1.Text, { className: classes.buttonText, size: "subbody" }, internalSelection.title)),
                internalSelection && selectedOptionDisplay && (React.createElement(Text_1.Text, { className: classes.buttonText, size: "subbody" }, selectedOptionDisplay(internalSelection))),
                React.createElement("div", { className: classes.buttonArrowContainer, role: "presentation" },
                    React.createElement(chromicons_1.ChevronDown, { className: clsx_1.default(classes.arrowIcon, popover.visible && classes.rotate), "aria-hidden": true, role: "img", width: 18, height: 18 })))),
        helpMessage && (React.createElement(forms_1.FormHelpMessage, { className: classes.message, color: color, rootElementId: uniqueId, describedById: forms_1.helpFor(uniqueId) }, helpMessage)),
        hasError && (React.createElement(forms_1.FormErrorMessage, { className: classes.message, color: color, rootElementId: uniqueId, describedById: forms_1.errorFor(uniqueId) }, errorMessage)),
        React.createElement(Portal_1.Portal, null,
            React.createElement(react_focus_lock_1.default, null,
                React.createElement(Popover_1.Popover, __assign({ "aria-label": label || ariaLabel || popoverAriaLabel, className: classes.popover }, popover, { style: { width: width }, as: framer_motion_1.motion.div, animate: popover.visible ? 'open' : 'closed', variants: shouldReduceMotion ? popoverVariantsReduced : popoverVariants }),
                    React.createElement(framer_motion_1.motion.ul, { className: classes.ul, role: "listbox", variants: shouldReduceMotion
                            ? listMotionVariantsReduced
                            : listMotionVariants }, popover.visible &&
                        React.Children.map(children, function (child) {
                            var _a;
                            if (!React.isValidElement(child)) {
                                return null;
                            }
                            if (isHeadingElement(child)) {
                                return child;
                            }
                            var option = child;
                            return (React.createElement(RoverOption_1.RoverOption, { rover: rover, value: value, option: option, handleOptionSelect: handleOptionSelected, variants: shouldReduceMotion
                                    ? listItemMotionVariantsReduced
                                    : listItemMotionVariants, disabled: (_a = child === null || child === void 0 ? void 0 : child.props) === null || _a === void 0 ? void 0 : _a.disabled }));
                        })))))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VsZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvU2VsZWN0L1NlbGVjdC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDhDQUF3QjtBQUN4QiwyQ0FBK0I7QUFDL0Isc0VBQXlDO0FBQ3pDLDBDQUl3QjtBQUN4Qix3Q0FBdUM7QUFDdkMsbURBQW1EO0FBQ25ELHVDQUEwQztBQUUxQywyQ0FPMkI7QUFDM0IsaURBQXdEO0FBQ3hELGdDQUErQjtBQUUvQiwrQ0FBeUQ7QUFDekQsNkNBQTRDO0FBQzVDLHNDQUE2QztBQUM3Qyw2REFBNEQ7QUFDNUQsa0VBQXVFO0FBQ3ZFLHNDQUFxQztBQUV4QixRQUFBLE9BQU8sR0FBRztJQUNyQixlQUFlLEVBQUUsd0JBQXdCO0NBQzFDLENBQUM7QUFFVyxRQUFBLGVBQWUsR0FBRyxjQUFjLENBQUM7QUFFakMsUUFBQSxTQUFTLEdBQUcsbUJBQVUsQ0FDakMsVUFBQyxLQUFLLElBQUssT0FBQSxDQUFDO0lBQ1YsSUFBSSxFQUFFLEVBQUU7SUFDUixPQUFPLEVBQUU7UUFDUCxVQUFVLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSztRQUN0QyxZQUFZLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDL0IsU0FBUyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsT0FBTztRQUNuQyxRQUFRLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDNUIsUUFBUSxFQUFFLFFBQVE7UUFDbEIsTUFBTSxFQUFFLElBQUk7UUFDWixTQUFTLEVBQUU7WUFDVCxPQUFPLEVBQUUsTUFBTTtTQUNoQjtLQUNGO0lBQ0QsS0FBSyxFQUFFO1FBQ0wsVUFBVSxFQUFFLFFBQVE7UUFDcEIsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdB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QUFLOzs0QkFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0NBQ2hDLE9BQU8sSUFBSSxDQUFDOzZCQUNiOzRCQUVELElBQUksZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0NBQzNCLE9BQU8sS0FBSyxDQUFDOzZCQUNkOzRCQUVELElBQU0sTUFBTSxHQUEwQyxLQUFLLENBQUM7NEJBRTVELE9BQU8sQ0FDTCxvQkFBQyx5QkFBVyxJQUNWLEtBQUssRUFBRSxLQUFLLEVBQ1osS0FBSyxFQUFFLEtBQUssRUFDWixNQUFNLEVBQUUsTUFBTSxFQUNkLGtCQUFrQixFQUFFLG9CQUFvQixFQUN4QyxRQUFRLEVBQ04sa0JBQWtCO29DQUNoQixDQUFDLENBQUMsNkJBQTZCO29DQUMvQixDQUFDLENBQUMsc0JBQXNCLEVBRTVCLFFBQVEsUUFBRSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsS0FBSywwQ0FBRSxRQUFRLEdBQ2hDLENBQ0gsQ0FBQzt3QkFDSixDQUFDLENBQUMsQ0FDTSxDQUNFLENBQ04sQ0FDTCxDQUNMLENBQ1AsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEZvY3VzTG9jayBmcm9tICdyZWFjdC1mb2N1cy1sb2NrJztcbmltcG9ydCB7XG4gIFBvcG92ZXIgYXMgUmVha2l0UG9wb3ZlcixcbiAgUG9wb3ZlckRpc2Nsb3N1cmUsXG4gIHVzZVBvcG92ZXJTdGF0ZSxcbn0gZnJvbSAncmVha2l0L1BvcG92ZXInO1xuaW1wb3J0IHsgUG9ydGFsIH0gZnJvbSAncmVha2l0L1BvcnRhbCc7XG5pbXBvcnQgeyBDaGV2cm9uRG93biB9IGZyb20gJ0BsaWZlb21pYy9jaHJvbWljb25zJztcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICcuLi8uLi9zdHlsZXMnO1xuaW1wb3J0IHsgR2V0Q2xhc3NlcyB9IGZyb20gJy4uLy4uL3R5cGVVdGlscyc7XG5pbXBvcnQge1xuICBCYXNlRm9ybUVsZW1lbnQsXG4gIGJ1aWxkRGVzY3JpYmVkQnksXG4gIGVycm9yRm9yLFxuICBGb3JtRXJyb3JNZXNzYWdlLFxuICBGb3JtSGVscE1lc3NhZ2UsXG4gIGhlbHBGb3IsXG59IGZyb20gJy4uL19wcml2YXRlL2Zvcm1zJztcbmltcG9ydCB7IGdlbmVyYXRlVW5pcXVlSWQgfSBmcm9tICcuLi9fcHJpdmF0ZS9VbmlxdWVJZCc7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vVGV4dCc7XG5pbXBvcnQgeyBTZWxlY3RPcHRpb25Qcm9wcyB9IGZyb20gJy4vU2VsZWN0T3B0aW9uJztcbmltcG9ydCB7IG1vdGlvbiwgdXNlUmVkdWNlZE1vdGlvbiB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nO1xuaW1wb3J0IHsgUm92ZXJPcHRpb24gfSBmcm9tICcuL1JvdmVyT3B0aW9uJztcbmltcG9ydCB7IHVzZVJvdmVyU3RhdGUgfSBmcm9tICdyZWFraXQvUm92ZXInO1xuaW1wb3J0IHsgZ2V0VGVzdFByb3BzIH0gZnJvbSAnLi4vLi4vdGVzdFV0aWxzL2dldFRlc3RQcm9wcyc7XG5pbXBvcnQgeyBzY3JlZW5yZWFkZXJPbmx5U3R5bGVzIH0gZnJvbSAnLi4vLi4vc3R5bGVzL3NjcmVlbnJlYWRlck9ubHknO1xuaW1wb3J0IHsgVG9vbHRpcCB9IGZyb20gJy4uL1Rvb2x0aXAnO1xuXG5leHBvcnQgY29uc3QgdGVzdElkcyA9IHtcbiAgcGxhY2Vob2xkZXJUZXh0OiAnc2VsZWN0LXBsYWNlaG9sZGVyVGV4dCcsXG59O1xuXG5leHBvcnQgY29uc3QgU2VsZWN0U3R5bGVzS2V5ID0gJ0Nocm9tYVNlbGVjdCc7XG5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAodGhlbWUpID0+ICh7XG4gICAgcm9vdDoge30sXG4gICAgcG9wb3Zlcjoge1xuICAgICAgYmFja2dyb3VuZDogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnB4VG9SZW0oMTApLFxuICAgICAgYm94U2hhZG93OiB0aGVtZS5ib3hTaGFkb3dzLnBvcG92ZXIsXG4gICAgICBtaW5XaWR0aDogdGhlbWUucHhUb1JlbSgyMjQpLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgekluZGV4OiAxMzAwLCAvLyBIYXMgdG8gZ28gYWJvdmUgdGhlIE1vZGFsIHotaW5kZXhcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICB9LFxuICAgIH0sXG4gICAgbGFiZWw6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYmxhY2tbODAwXSxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS5weFRvUmVtKDE0KSxcbiAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodEJvbGQsXG4gICAgICBtYXJnaW5Cb3R0b206IHRoZW1lLnNwYWNpbmcoMSksXG4gICAgICAnJjplbXB0eSc6IHtcbiAgICAgICAgbWFyZ2luQm90dG9tOiB0aGVtZS5zcGFjaW5nKDApLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGxhYmVsU2Vjb25kYXJ5OiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUucHhUb1JlbSgxMSksXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIG1hcmdpbjogdGhlbWUuc3BhY2luZygwLCAwLjc1KSxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuaGludCxcbiAgICB9LFxuICAgIGxhYmVsSW52ZXJzZToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICAgICAgJyYkbGFiZWxTZWNvbmRhcnknOiB7XG4gICAgICAgIG9wYWNpdHk6IDAuOSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBsYWJlbEljb246IHtcbiAgICAgIG1hcmdpbkxlZnQ6IHRoZW1lLnNwYWNpbmcoMC43NSksXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgfSxcbiAgICBsYWJlbEljb25JbnZlcnNlOiB7XG4gICAgICBtaXhCbGVuZE1vZGU6ICdzY3JlZW4nLFxuICAgIH0sXG4gICAgdG9vbHRpcENvbnRhaW5lcjoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgb3V0bGluZTogJ25vbmUnLFxuICAgIH0sXG4gICAgYnV0dG9uOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMTMyLCAxMzcsIDE2NiwgMC4xNSknLFxuICAgICAgYm9yZGVyOiAnc29saWQgMXB4IHRyYW5zcGFyZW50JyxcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUucHhUb1JlbSg0KSxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS5weFRvUmVtKDE0KSxcbiAgICAgIG1heEhlaWdodDogdGhlbWUucHhUb1JlbSg4NCksXG4gICAgICBtaW5IZWlnaHQ6IHRoZW1lLnB4VG9SZW0oMzUpLFxuICAgICAgbWFyZ2luOiAwLFxuICAgICAgbWluV2lkdGg6IHRoZW1lLnB4VG9SZW0oMTc1KSxcbiAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHBhZGRpbmc6IHRoZW1lLnNwYWNpbmcoMC41LCAzLjc1LCAwLjUsIDEuMjUpLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICB0cmFuc2l0aW9uOiAnYm9yZGVyIDAuNXMgZWFzZScsXG4gICAgICAnJjpkaXNhYmxlZCc6IHtcbiAgICAgICAgY3Vyc29yOiAnbm90LWFsbG93ZWQnLFxuICAgICAgICBvcGFjaXR5OiAwLjYyNSxcbiAgICAgIH0sXG4gICAgICAnJjpmb2N1cyc6IHtcbiAgICAgICAgYm94U2hhZG93OiAnMCAwIDAgMnB4IHJnYmEoMCwgMTUwLCAyMjUsIC4zKScsXG4gICAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgIH0sXG4gICAgICAnJjo6LW1vei1mb2N1cy1pbm5lcic6IHtcbiAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICB9LFxuICAgIH0sXG4gICAgYnV0dG9uSW52ZXJzZToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgyMzAsIDIzMSwgMjM3LCAwLjEpJyxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICBib3hTaGFkb3c6ICcwIDAgMCAycHggcmdiYSgyNTUsIDI1NSwgMjU1LCAuMyknLFxuICAgICAgfSxcbiAgICAgICcmICRjaGlwJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICAgICAgfSxcbiAgICAgICcmICRidXR0b25UZXh0JHBsYWNlaG9sZGVyVGV4dCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGJ1dHRvbkVycm9yOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDIzMCwgMjMxLCAyMzcsIDAuMSknLFxuICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5lcnJvci5tYWlufWAsXG4gICAgICAnJjpmb2N1cyc6IHtcbiAgICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5lcnJvci5tYWlufWAsXG4gICAgICB9LFxuICAgIH0sXG4gICAgYnV0dG9uQXJyb3dDb250YWluZXI6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleEZsb3c6ICdjb2x1bW4nLFxuICAgICAgbWluSGVpZ2h0OiB0aGVtZS5weFRvUmVtKDMyKSxcbiAgICAgIGhlaWdodDogdGhlbWUucHhUb1JlbSgzMiksXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiB0aGVtZS5weFRvUmVtKC02KSxcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICB0b3A6IHRoZW1lLnB4VG9SZW0oMSksXG4gICAgICB3aWR0aDogJzJyZW0nLFxuICAgIH0sXG4gICAgYnV0dG9uVGV4dDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgIG1hcmdpblRvcDogdGhlbWUuc3BhY2luZygwLjEyNSksXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICcmJHBsYWNlaG9sZGVyVGV4dCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5oaW50LFxuICAgICAgfSxcbiAgICB9LFxuICAgIHBsYWNlaG9sZGVyVGV4dDoge30sXG4gICAgY29tYm9Cb3hQbGFjZWhvbGRlcjoge1xuICAgICAgbWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nKDAuMjUpLFxuICAgIH0sXG4gICAgY29tYm94Qm94T3ZlcmZsb3c6IHtcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgIH0sXG4gICAgYnV0dG9uRnVsbFdpZHRoOiB7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgIH0sXG4gICAgYXJyb3dJY29uOiB7XG4gICAgICBhbGlnblNlbGY6ICdmbGV4LXN0YXJ0JyxcbiAgICAgIHBvc2l0aW9uOiAnc3RpY2t5JyxcbiAgICAgIHRyYW5zaXRpb246ICd0cmFuc2Zvcm0gMC4yNXMgZWFzZScsXG4gICAgICBzdHJva2VPcGFjaXR5OiAwLjYsXG4gICAgICB0b3A6IHRoZW1lLnNwYWNpbmcoMC41KSxcbiAgICB9LFxuICAgIHJvdGF0ZToge1xuICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknLFxuICAgICAgdG9wOiB0aGVtZS5zcGFjaW5nKDAuMzc1KSxcbiAgICB9LFxuICAgIHVsOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgbGlzdFN0eWxlOiAnbm9uZScsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICBtYXhIZWlnaHQ6IHRoZW1lLnB4VG9SZW0oMzI4KSxcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgcGFkZGluZzogdGhlbWUuc3BhY2luZygxLCAwKSxcbiAgICB9LFxuICAgIG9wdGlvbjoge1xuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBtaW5IZWlnaHQ6IHRoZW1lLnB4VG9SZW0oMjYpLFxuICAgICAgb3V0bGluZTogJ25vbmUnLFxuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICB0cmFuc2l0aW9uOiAnYmFja2dyb3VuZC1jb2xvciAwLjI1cyBlYXNlJyxcbiAgICAgICcmOmhvdmVyLCAmOmZvY3VzJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDIyMiwyNDQsMjUyLCAwLjYpJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjaGlwTGlzdDoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleEZsb3c6ICd3cmFwJyxcbiAgICAgIG1hcmdpbjogdGhlbWUuc3BhY2luZygtMC41LCAtMC41LCAwKSxcbiAgICB9LFxuICAgIGNoaXA6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgYmFja2dyb3VuZDogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnB4VG9SZW0oMyksXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIGhlaWdodDogdGhlbWUucHhUb1JlbSgyMiksXG4gICAgICBmb250U2l6ZTogdGhlbWUucHhUb1JlbSgxMiksXG4gICAgICBtYXJnaW46IHRoZW1lLnNwYWNpbmcoMC41LCAwLjI1LCAwKSxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDEpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDEpLFxuICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgfSxcbiAgICBtZXNzYWdlOiB7XG4gICAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcoMC44NzUpLFxuICAgICAgbWFyZ2luTGVmdDogMCxcbiAgICB9LFxuICAgIHNyT25seToge1xuICAgICAgLi4uc2NyZWVucmVhZGVyT25seVN0eWxlcyxcbiAgICB9LFxuICB9KSxcbiAgeyBuYW1lOiBTZWxlY3RTdHlsZXNLZXkgfVxuKTtcblxuY29uc3QgcG9wb3ZlclZhcmlhbnRzID0ge1xuICBvcGVuOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICBvZmZzZXRUb3A6IC0yLCAvLyBQb3BwZXIuanMgKHVuZGVybHlpbmcgUG9wb3ZlcikgcmVxdWlyZXMgYG9mZlNldFRvcGAgb3ZlciBgbWFyZ2luVG9wYFxuICAgIHRyYW5zaXRpb246IHtcbiAgICAgIGR1cmF0aW9uOiAwLjI1LFxuICAgICAgZWFzZTogJ2Vhc2VPdXQnLFxuICAgIH0sXG4gIH0sXG4gIGNsb3NlZDoge1xuICAgIG9wYWNpdHk6IDAsXG4gICAgb2Zmc2V0VG9wOiAtMTgsXG4gIH0sXG59O1xuXG5jb25zdCBwb3BvdmVyVmFyaWFudHNSZWR1Y2VkID0ge1xuICBvcGVuOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2l0aW9uOiB7XG4gICAgICBkdXJhdGlvbjogMC4yLFxuICAgICAgZWFzZTogJ2Vhc2VPdXQnLFxuICAgIH0sXG4gIH0sXG4gIGNsb3NlZDoge1xuICAgIG9wYWNpdHk6IDAsXG4gIH0sXG59O1xuXG5jb25zdCBsaXN0TW90aW9uVmFyaWFudHMgPSB7XG4gIG9wZW46IHtcbiAgICB0cmFuc2l0aW9uOiB7XG4gICAgICBkZWxheUNoaWxkcmVuOiAwLjAyNSxcbiAgICAgIHN0YWdnZXJDaGlsZHJlbjogMC4wNDUsXG4gICAgICBkdXJhdGlvbjogMC4yLFxuICAgIH0sXG4gIH0sXG4gIGNsb3NlZDoge30sXG59O1xuXG5jb25zdCBsaXN0TW90aW9uVmFyaWFudHNSZWR1Y2VkID0ge1xuICBvcGVuOiB7fSxcbiAgY2xvc2VkOiB7fSxcbn07XG5cbmNvbnN0IGxpc3RJdGVtTW90aW9uVmFyaWFudHMgPSB7XG4gIG9wZW46IHtcbiAgICB5OiAwLFxuICAgIG9wYWNpdHk6IDEsXG4gICAgdHJhbnNpdGlvbjoge1xuICAgICAgeTogeyBzdGlmZm5lc3M6IDEwMDAsIHZlbG9jaXR5OiAtMTAwIH0sXG4gICAgfSxcbiAgfSxcbiAgY2xvc2VkOiB7XG4gICAgeTogLTE2LFxuICAgIG9wYWNpdHk6IDAsXG4gIH0sXG59O1xuXG5jb25zdCBsaXN0SXRlbU1vdGlvblZhcmlhbnRzUmVkdWNlZCA9IHtcbiAgb3Blbjoge1xuICAgIG9wYWNpdHk6IDEsXG4gIH0sXG4gIGNsb3NlZDoge1xuICAgIG9wYWNpdHk6IDAsXG4gIH0sXG59O1xuXG5leHBvcnQgdHlwZSBTZWxlY3RDbGFzc2VzID0gR2V0Q2xhc3Nlczx0eXBlb2YgdXNlU3R5bGVzPjtcblxuY29uc3QgaXNIZWFkaW5nRWxlbWVudCA9IChlbGVtZW50OiBSZWFjdC5SZWFjdEVsZW1lbnQpID0+IHtcbiAgcmV0dXJuIGVsZW1lbnQucHJvcHNbJ2RhdGEtc2VsZWN0LXJvbGUnXSA9PT0gJ2hlYWRpbmcnO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBTZWxlY3RQcm9wc1xuICBleHRlbmRzIFBpY2s8XG4gICAgICBCYXNlRm9ybUVsZW1lbnQsXG4gICAgICAnY29sb3InIHwgJ2hhc0Vycm9yJyB8ICdlcnJvck1lc3NhZ2UnIHwgJ2hlbHBNZXNzYWdlJyB8ICdsYWJlbCdcbiAgICA+LFxuICAgIFBpY2s8UmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPCdpbnB1dCc+LCAnZGlzYWJsZWQnPixcbiAgICBQaWNrPFxuICAgICAgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPCdzZWxlY3QnPixcbiAgICAgICdjbGFzc05hbWUnIHwgJ2lkJyB8ICd2YWx1ZSdcbiAgICA+IHtcbiAgWydhcmlhLWxhYmVsJ10/OiBzdHJpbmc7XG4gIHNlY29uZGFyeUxhYmVsPzogc3RyaW5nO1xuICBmdWxsV2lkdGg/OiBib29sZWFuO1xuICBpY29uPzogUmVhY3QuQ29tcG9uZW50VHlwZTxSZWFjdC5TVkdQcm9wczxTVkdTVkdFbGVtZW50Pj47XG4gIG9uQ2hhbmdlPzogKHZhbHVlOiBzdHJpbmcsIG1ldGE6IGFueSkgPT4gdm9pZDtcbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gIHBsYWNlbWVudD86XG4gICAgfCAndG9wLXN0YXJ0J1xuICAgIHwgJ3RvcCdcbiAgICB8ICd0b3AtZW5kJ1xuICAgIHwgJ3JpZ2h0LXN0YXJ0J1xuICAgIHwgJ3JpZ2h0J1xuICAgIHwgJ3JpZ2h0LWVuZCdcbiAgICB8ICdib3R0b20tZW5kJ1xuICAgIHwgJ2JvdHRvbSdcbiAgICB8ICdib3R0b20tc3RhcnQnXG4gICAgfCAnbGVmdC1lbmQnXG4gICAgfCAnbGVmdCdcbiAgICB8ICdsZWZ0LXN0YXJ0JztcbiAgcG9wb3ZlckFyaWFMYWJlbD86IHN0cmluZztcbiAgc2VsZWN0ZWRPcHRpb25EaXNwbGF5PzogKFxuICAgIG9wdGlvbjogU2VsZWN0T3B0aW9uUHJvcHNcbiAgKSA9PiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkIHwgUmVhY3QuUmVhY3ROb2RlO1xuICB0b29sdGlwTWVzc2FnZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IFNlbGVjdDogUmVhY3QuRkM8U2VsZWN0UHJvcHM+ID0gKHtcbiAgWydhcmlhLWxhYmVsJ106IGFyaWFMYWJlbCxcbiAgY2hpbGRyZW4sXG4gIGNsYXNzTmFtZSxcbiAgY29sb3IgPSAnZGVmYXVsdCcsXG4gIGVycm9yTWVzc2FnZSxcbiAgZnVsbFdpZHRoLFxuICBoYXNFcnJvcixcbiAgaGVscE1lc3NhZ2UsXG4gIGljb246IEljb24sXG4gIGlkLFxuICBsYWJlbCxcbiAgc2Vjb25kYXJ5TGFiZWwsXG4gIG9uQ2hhbmdlLFxuICBwbGFjZWhvbGRlcixcbiAgcGxhY2VtZW50LFxuICBwb3BvdmVyQXJpYUxhYmVsLFxuICBzZWxlY3RlZE9wdGlvbkRpc3BsYXksXG4gIHRvb2x0aXBNZXNzYWdlLFxuICB2YWx1ZSxcbiAgLi4ucm9vdFByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoe30pO1xuICBjb25zdCBwb3BvdmVyID0gdXNlUG9wb3ZlclN0YXRlKHsgcGxhY2VtZW50IH0pO1xuICBjb25zdCBzaG91bGRSZWR1Y2VNb3Rpb24gPSB1c2VSZWR1Y2VkTW90aW9uKCk7XG5cbiAgY29uc3QgYnV0dG9uUmVmID0gUmVhY3QudXNlUmVmPGFueT4oKTsgLy8gVE9ETzogTmVlZCB0byB0eXBlIHRoaXMgcHJvcGVybHkuLi5cbiAgY29uc3QgW3dpZHRoLCBzZXRXaWR0aF0gPSBSZWFjdC51c2VTdGF0ZTxudW1iZXI+KDUwKTtcblxuICBjb25zdCBbXG4gICAgaW50ZXJuYWxTZWxlY3Rpb24sXG4gICAgc2V0SW50ZXJuYWxTZWxlY3Rpb24sXG4gIF0gPSBSZWFjdC51c2VTdGF0ZTxTZWxlY3RPcHRpb25Qcm9wcyB8IG51bGw+KG51bGwpO1xuXG4gIGNvbnN0IFt1bmlxdWVJZF0gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmc+KFxuICAgICgpID0+IGlkIHx8IG5hbWUgfHwgZ2VuZXJhdGVVbmlxdWVJZCgnc2VsZWN0LScpXG4gICk7XG5cbiAgY29uc3Qgcm92ZXIgPSB1c2VSb3ZlclN0YXRlKHsgbG9vcDogdHJ1ZSwgb3JpZW50YXRpb246ICd2ZXJ0aWNhbCcgfSk7XG5cbiAgLy8gVXBkYXRlIHRoZSBvcGVuZWQgcG9wb3ZlciB3aWR0aCBhbnkgdGltZSB0aGUgYnV0dG9uIHdpZHRoIGNoYW5nZXNcbiAgLy8gVE9ETzogUmV2aWV3IHRoZSBiZXN0IHdheSB0byBoYW5kbGUgdGhpcyB3aXRob3V0IGJyZWFraW5nXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRXaWR0aChidXR0b25SZWYuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCk7XG4gIH0pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gVE9ETzogTmVlZCB0byB0eXBlIHRoaXMgcHJvcGVybHkgYXMgd2VsbC4uLlxuICAgIGNvbnN0IG1hdGNoOiBhbnkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKS5maW5kKChjaGlsZCkgPT4ge1xuICAgICAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0hlYWRpbmdFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNoaWxkLnByb3BzLnZhbHVlID09PSB2YWx1ZTtcbiAgICB9KTtcblxuICAgIC8vIElmIHRoZXJlIGlzIG5vIG1hdGNoLCBzZXQgaW50ZXJuYWxTZWxlY3Rpb24gdG8gbnVsbCBzbyBwbGFjZWhvbGRlciB3aWxsIGJlIHNob3duXG4gICAgc2V0SW50ZXJuYWxTZWxlY3Rpb24obWF0Y2ggPyBtYXRjaC5wcm9wcyA6IG51bGwpO1xuICB9LCBbY2hpbGRyZW4sIHZhbHVlXSk7XG5cbiAgY29uc3QgaGlkZVBvcG92ZXIgPSBwb3BvdmVyLmhpZGU7XG4gIGNvbnN0IGhhbmRsZU9wdGlvblNlbGVjdGVkID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKG9wdGlvblZhbHVlOiBzdHJpbmcsIG1ldGE6IGFueSkgPT4ge1xuICAgICAgaGlkZVBvcG92ZXIoKTtcbiAgICAgIG9uQ2hhbmdlPy4ob3B0aW9uVmFsdWUsIG1ldGEpO1xuICAgIH0sXG4gICAgW2hpZGVQb3BvdmVyLCBvbkNoYW5nZV1cbiAgKTtcblxuICBpZiAoIWxhYmVsICYmICFhcmlhTGFiZWwgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnSWYgYSBcImxhYmVsXCIgaXMgbm90IHByb3ZpZGVkIHRvIFNlbGVjdCwgcGxlYXNlIHByb3ZpZGUgXCJhcmlhLWxhYmVsXCIuJ1xuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKX0+XG4gICAgICA8bGFiZWxcbiAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgICAgY2xhc3NOYW1lPXtjbHN4KFxuICAgICAgICAgIGNsYXNzZXMubGFiZWwsXG4gICAgICAgICAgY29sb3IgPT09ICdpbnZlcnNlJyAmJiBjbGFzc2VzLmxhYmVsSW52ZXJzZSxcbiAgICAgICAgICAhbGFiZWwgJiYgYXJpYUxhYmVsICYmIGNsYXNzZXMuc3JPbmx5XG4gICAgICAgICl9XG4gICAgICAgIGh0bWxGb3I9e3VuaXF1ZUlkfVxuICAgICAgPlxuICAgICAgICB7bGFiZWwgfHwgYXJpYUxhYmVsfVxuICAgICAgICB7ISFJY29uICYmIHRvb2x0aXBNZXNzYWdlICYmIChcbiAgICAgICAgICA8VG9vbHRpcCB0aXRsZT17dG9vbHRpcE1lc3NhZ2V9PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtjbGFzc2VzLnRvb2x0aXBDb250YWluZXJ9PlxuICAgICAgICAgICAgICA8SWNvblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xzeChcbiAgICAgICAgICAgICAgICAgIGNsYXNzZXMubGFiZWxJY29uLFxuICAgICAgICAgICAgICAgICAgY29sb3IgPT09ICdpbnZlcnNlJyAmJiBjbGFzc2VzLmxhYmVsSWNvbkludmVyc2VcbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIHdpZHRoPXsxNn1cbiAgICAgICAgICAgICAgICBoZWlnaHQ9ezE2fVxuICAgICAgICAgICAgICAgIHJvbGU9XCJpbWdcIlxuICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICApfVxuICAgICAgICB7c2Vjb25kYXJ5TGFiZWwgPyAoXG4gICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xzeChcbiAgICAgICAgICAgICAgY2xhc3Nlcy5sYWJlbFNlY29uZGFyeSxcbiAgICAgICAgICAgICAgY29sb3IgPT09ICdpbnZlcnNlJyAmJiBjbGFzc2VzLmxhYmVsSW52ZXJzZVxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7c2Vjb25kYXJ5TGFiZWx9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvbGFiZWw+XG4gICAgICA8UG9wb3ZlckRpc2Nsb3N1cmVcbiAgICAgICAgY2xhc3NOYW1lPXtjbHN4KFxuICAgICAgICAgIGNsYXNzZXMuYnV0dG9uLFxuICAgICAgICAgIGhhc0Vycm9yICYmIGNsYXNzZXMuYnV0dG9uRXJyb3IsXG4gICAgICAgICAgZnVsbFdpZHRoICYmIGNsYXNzZXMuYnV0dG9uRnVsbFdpZHRoLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFtjbGFzc2VzLmJ1dHRvbkludmVyc2VdOiBjb2xvciA9PT0gJ2ludmVyc2UnLFxuICAgICAgICAgIH1cbiAgICAgICAgKX1cbiAgICAgICAgcmVmPXtidXR0b25SZWZ9XG4gICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9e2J1aWxkRGVzY3JpYmVkQnkoe1xuICAgICAgICAgIGhhc0Vycm9yLFxuICAgICAgICAgIGhhc0hlbHBNZXNzYWdlOiAhIWhlbHBNZXNzYWdlLFxuICAgICAgICAgIHVuaXF1ZUlkLFxuICAgICAgICB9KX1cbiAgICAgICAgaWQ9e3VuaXF1ZUlkfVxuICAgICAgICB7Li4ucG9wb3Zlcn1cbiAgICAgICAgey4uLnJvb3RQcm9wc31cbiAgICAgID5cbiAgICAgICAgPD5cbiAgICAgICAgICB7IWludGVybmFsU2VsZWN0aW9uICYmIChcbiAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLnBsYWNlaG9sZGVyVGV4dCwgY2xhc3Nlcy5idXR0b25UZXh0KX1cbiAgICAgICAgICAgICAgc2l6ZT1cInN1YmJvZHlcIlxuICAgICAgICAgICAgICB7Li4uZ2V0VGVzdFByb3BzKHRlc3RJZHMucGxhY2Vob2xkZXJUZXh0KX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3BsYWNlaG9sZGVyfVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICl9XG4gICAgICAgICAge2ludGVybmFsU2VsZWN0aW9uICYmICFzZWxlY3RlZE9wdGlvbkRpc3BsYXkgJiYgKFxuICAgICAgICAgICAgPFRleHQgY2xhc3NOYW1lPXtjbGFzc2VzLmJ1dHRvblRleHR9IHNpemU9XCJzdWJib2R5XCI+XG4gICAgICAgICAgICAgIHtpbnRlcm5hbFNlbGVjdGlvbi50aXRsZX1cbiAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICApfVxuICAgICAgICAgIHtpbnRlcm5hbFNlbGVjdGlvbiAmJiBzZWxlY3RlZE9wdGlvbkRpc3BsYXkgJiYgKFxuICAgICAgICAgICAgPFRleHQgY2xhc3NOYW1lPXtjbGFzc2VzLmJ1dHRvblRleHR9IHNpemU9XCJzdWJib2R5XCI+XG4gICAgICAgICAgICAgIHtzZWxlY3RlZE9wdGlvbkRpc3BsYXkoaW50ZXJuYWxTZWxlY3Rpb24pfVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICl9XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuYnV0dG9uQXJyb3dDb250YWluZXJ9IHJvbGU9XCJwcmVzZW50YXRpb25cIj5cbiAgICAgICAgICAgIDxDaGV2cm9uRG93blxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2Nsc3goXG4gICAgICAgICAgICAgICAgY2xhc3Nlcy5hcnJvd0ljb24sXG4gICAgICAgICAgICAgICAgcG9wb3Zlci52aXNpYmxlICYmIGNsYXNzZXMucm90YXRlXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIGFyaWEtaGlkZGVuXG4gICAgICAgICAgICAgIHJvbGU9XCJpbWdcIlxuICAgICAgICAgICAgICB3aWR0aD17MTh9XG4gICAgICAgICAgICAgIGhlaWdodD17MTh9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8Lz5cbiAgICAgIDwvUG9wb3ZlckRpc2Nsb3N1cmU+XG4gICAgICB7aGVscE1lc3NhZ2UgJiYgKFxuICAgICAgICA8Rm9ybUhlbHBNZXNzYWdlXG4gICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLm1lc3NhZ2V9XG4gICAgICAgICAgY29sb3I9e2NvbG9yfVxuICAgICAgICAgIHJvb3RFbGVtZW50SWQ9e3VuaXF1ZUlkfVxuICAgICAgICAgIGRlc2NyaWJlZEJ5SWQ9e2hlbHBGb3IodW5pcXVlSWQpfVxuICAgICAgICA+XG4gICAgICAgICAge2hlbHBNZXNzYWdlfVxuICAgICAgICA8L0Zvcm1IZWxwTWVzc2FnZT5cbiAgICAgICl9XG4gICAgICB7aGFzRXJyb3IgJiYgKFxuICAgICAgICA8Rm9ybUVycm9yTWVzc2FnZVxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5tZXNzYWdlfVxuICAgICAgICAgIGNvbG9yPXtjb2xvcn1cbiAgICAgICAgICByb290RWxlbWVudElkPXt1bmlxdWVJZH1cbiAgICAgICAgICBkZXNjcmliZWRCeUlkPXtlcnJvckZvcih1bmlxdWVJZCl9XG4gICAgICAgID5cbiAgICAgICAgICB7ZXJyb3JNZXNzYWdlfVxuICAgICAgICA8L0Zvcm1FcnJvck1lc3NhZ2U+XG4gICAgICApfVxuICAgICAgey8qXG4gICAgICAgIEEgZmV3IHRoaW5ncyBoZXJlOlxuXG4gICAgICAgIDEpIFdlIHdhbnQgdG8gYWx3YXlzIHBvcnRhbCBvdXIgc2VsZWN0IG1lbnUgcmVzdWx0cyBzbyB3ZSBkb24ndFxuICAgICAgICAgICBydW4gaW50byB3ZWlyZCBsYXlvdXQgaXNzdWVzIChyZW5kZXJpbmcgaW5zaWRlIFBvcG92ZXIgb3IgTW9kYWwpXG4gICAgICAgIDIpIFdlIG5lZWQgdG8gdHJhcCBmb2N1cyBpbnNpZGUgb2YgdGhlIG1lbnUgd2hlbiBpdCBpcyBvcGVuIC0gPEZvY3VzTG9jayAvPiBoYW5kbGVzIHRoaXMgZm9yIHVzXG4gICAgICAgIDMpIFdlIG5lZWQga2V5Ym9hcmQgc3VwcG9ydCB2aWEgPFJvdmVyIC8+XG5cbiAgICAgICAgUmVmZXJlbmNlIGZvciAjMSAmICMyOiBodHRwczovL2dpdGh1Yi5jb20vcmVha2l0L3JlYWtpdC9pc3N1ZXMvNTY2XG4gICAgICAqL31cbiAgICAgIDxQb3J0YWw+XG4gICAgICAgIDxGb2N1c0xvY2s+XG4gICAgICAgICAgPFJlYWtpdFBvcG92ZXJcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9e2xhYmVsIHx8IGFyaWFMYWJlbCB8fCBwb3BvdmVyQXJpYUxhYmVsfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnBvcG92ZXJ9XG4gICAgICAgICAgICB7Li4ucG9wb3Zlcn1cbiAgICAgICAgICAgIHN0eWxlPXt7IHdpZHRoIH19XG4gICAgICAgICAgICBhcz17bW90aW9uLmRpdn1cbiAgICAgICAgICAgIGFuaW1hdGU9e3BvcG92ZXIudmlzaWJsZSA/ICdvcGVuJyA6ICdjbG9zZWQnfVxuICAgICAgICAgICAgdmFyaWFudHM9e1xuICAgICAgICAgICAgICBzaG91bGRSZWR1Y2VNb3Rpb24gPyBwb3BvdmVyVmFyaWFudHNSZWR1Y2VkIDogcG9wb3ZlclZhcmlhbnRzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPG1vdGlvbi51bFxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMudWx9XG4gICAgICAgICAgICAgIHJvbGU9XCJsaXN0Ym94XCJcbiAgICAgICAgICAgICAgdmFyaWFudHM9e1xuICAgICAgICAgICAgICAgIHNob3VsZFJlZHVjZU1vdGlvblxuICAgICAgICAgICAgICAgICAgPyBsaXN0TW90aW9uVmFyaWFudHNSZWR1Y2VkXG4gICAgICAgICAgICAgICAgICA6IGxpc3RNb3Rpb25WYXJpYW50c1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtwb3BvdmVyLnZpc2libGUgJiZcbiAgICAgICAgICAgICAgICBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGlmIChpc0hlYWRpbmdFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbjogUmVhY3QuUmVhY3RFbGVtZW50PFNlbGVjdE9wdGlvblByb3BzPiA9IGNoaWxkO1xuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICA8Um92ZXJPcHRpb25cbiAgICAgICAgICAgICAgICAgICAgICByb3Zlcj17cm92ZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbj17b3B0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU9wdGlvblNlbGVjdD17aGFuZGxlT3B0aW9uU2VsZWN0ZWR9XG4gICAgICAgICAgICAgICAgICAgICAgdmFyaWFudHM9e1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkUmVkdWNlTW90aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gbGlzdEl0ZW1Nb3Rpb25WYXJpYW50c1JlZHVjZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsaXN0SXRlbU1vdGlvblZhcmlhbnRzXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtjaGlsZD8ucHJvcHM/LmRpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvbW90aW9uLnVsPlxuICAgICAgICAgIDwvUmVha2l0UG9wb3Zlcj5cbiAgICAgICAgPC9Gb2N1c0xvY2s+XG4gICAgICA8L1BvcnRhbD5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iXX0=