"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Select = exports.useStyles = exports.SelectStylesKey = exports.testIds = void 0;
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var react_focus_lock_1 = __importDefault(require("react-focus-lock"));
var Popover_1 = require("reakit/Popover");
var Portal_1 = require("reakit/Portal");
var chromicons_1 = require("@lifeomic/chromicons");
var styles_1 = require("../../styles");
var forms_1 = require("../_private/forms");
var UniqueId_1 = require("../_private/UniqueId");
var Text_1 = require("../Text");
var framer_motion_1 = require("framer-motion");
var RoverOption_1 = require("./RoverOption");
var Rover_1 = require("reakit/Rover");
var getTestProps_1 = require("../../testUtils/getTestProps");
var screenreaderOnly_1 = require("../../styles/screenreaderOnly");
var Tooltip_1 = require("../Tooltip");
exports.testIds = {
    placeholderText: 'select-placeholderText',
};
exports.SelectStylesKey = 'ChromaSelect';
exports.useStyles = (0, styles_1.makeStyles)(function (theme) { return ({
    root: {},
    popover: {
        background: theme.palette.common.white,
        borderRadius: theme.pxToRem(10),
        boxShadow: theme.boxShadows.popover,
        minWidth: theme.pxToRem(224),
        overflow: 'hidden',
        zIndex: 1300,
        '&:focus': {
            outline: 'none',
        },
    },
    label: {
        alignItems: 'center',
        color: theme.palette.black[800],
        display: 'flex',
        fontSize: theme.pxToRem(14),
        fontWeight: theme.typography.fontWeightBold,
        marginBottom: theme.spacing(1),
        '&:empty': {
            marginBottom: theme.spacing(0),
        },
    },
    labelSecondary: {
        fontSize: theme.pxToRem(11),
        display: 'inline-block',
        margin: theme.spacing(0, 0.75),
        color: theme.palette.text.hint,
    },
    labelInverse: {
        color: theme.palette.common.white,
        '&$labelSecondary': {
            opacity: 0.9,
        },
    },
    labelIcon: {
        marginLeft: theme.spacing(0.75),
        color: theme.palette.primary.main,
    },
    labelIconInverse: {
        mixBlendMode: 'screen',
    },
    tooltipContainer: {
        display: 'flex',
        outline: 'none',
    },
    button: {
        alignItems: 'center',
        backgroundColor: 'rgba(132, 137, 166, 0.15)',
        border: 'solid 1px transparent',
        borderRadius: theme.pxToRem(4),
        color: theme.palette.text.primary,
        cursor: 'pointer',
        display: 'block',
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.pxToRem(14),
        maxHeight: theme.pxToRem(84),
        minHeight: theme.pxToRem(35),
        margin: 0,
        minWidth: theme.pxToRem(175),
        outline: 'none',
        overflow: 'hidden',
        padding: theme.spacing(0.5, 3.75, 0.5, 1.25),
        position: 'relative',
        transition: 'border 0.5s ease',
        '&:disabled': {
            cursor: 'not-allowed',
            opacity: 0.625,
        },
        '&:focus': {
            boxShadow: '0 0 0 2px rgba(0, 150, 225, .3)',
            outline: 'none',
        },
        '&::-moz-focus-inner': {
            border: 'none',
        },
    },
    buttonInverse: {
        backgroundColor: 'rgba(230, 231, 237, 0.1)',
        color: theme.palette.common.white,
        '&:focus': {
            boxShadow: '0 0 0 2px rgba(255, 255, 255, .3)',
        },
        '& $chip': {
            background: 'rgba(255, 255, 255, 0.5)',
            color: theme.palette.text.primary,
        },
        '& $buttonText$placeholderText': {
            color: theme.palette.common.white,
        },
    },
    buttonError: {
        backgroundColor: 'rgba(230, 231, 237, 0.1)',
        border: "1px solid ".concat(theme.palette.error.main),
        '&:focus': {
            border: "1px solid ".concat(theme.palette.error.main),
        },
    },
    buttonArrowContainer: {
        alignItems: 'center',
        display: 'flex',
        flexFlow: 'column',
        minHeight: theme.pxToRem(32),
        height: theme.pxToRem(32),
        justifyContent: 'center',
        position: 'absolute',
        right: theme.pxToRem(-6),
        textAlign: 'center',
        top: theme.pxToRem(1),
        width: '2rem',
    },
    buttonText: {
        color: 'inherit',
        marginTop: theme.spacing(0.125),
        overflow: 'hidden',
        textAlign: 'left',
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap',
        width: '100%',
        '&$placeholderText': {
            color: theme.palette.text.hint,
        },
    },
    placeholderText: {},
    comboBoxPlaceholder: {
        marginTop: theme.spacing(0.25),
    },
    comboxBoxOverflow: {
        overflowY: 'auto',
    },
    buttonFullWidth: {
        width: '100%',
    },
    arrowIcon: {
        alignSelf: 'flex-start',
        position: 'sticky',
        transition: 'transform 0.25s ease',
        strokeOpacity: 0.6,
        top: theme.spacing(0.5),
    },
    rotate: {
        transform: 'rotate(180deg)',
        top: theme.spacing(0.375),
    },
    ul: {
        display: 'block',
        listStyle: 'none',
        margin: 0,
        maxHeight: theme.pxToRem(328),
        overflowY: 'auto',
        padding: theme.spacing(1, 0),
    },
    option: {
        alignItems: 'center',
        backgroundColor: theme.palette.common.white,
        cursor: 'pointer',
        display: 'flex',
        minHeight: theme.pxToRem(26),
        outline: 'none',
        paddingLeft: theme.spacing(2),
        paddingRight: theme.spacing(2),
        transition: 'background-color 0.25s ease',
        '&:hover, &:focus': {
            backgroundColor: 'rgba(222,244,252, 0.6)',
        },
    },
    chipList: {
        display: 'flex',
        flexFlow: 'wrap',
        margin: theme.spacing(-0.5, -0.5, 0),
    },
    chip: {
        alignItems: 'center',
        background: theme.palette.primary.main,
        borderRadius: theme.pxToRem(3),
        color: theme.palette.common.white,
        display: 'inline-block',
        height: theme.pxToRem(22),
        fontSize: theme.pxToRem(12),
        margin: theme.spacing(0.5, 0.25, 0),
        overflow: 'hidden',
        paddingLeft: theme.spacing(1),
        paddingRight: theme.spacing(1),
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap',
    },
    message: {
        marginTop: theme.spacing(0.875),
        marginLeft: 0,
    },
    srOnly: __assign({}, screenreaderOnly_1.screenreaderOnlyStyles),
}); }, { name: exports.SelectStylesKey });
var popoverVariants = {
    open: {
        opacity: 1,
        offsetTop: -2,
        transition: {
            duration: 0.25,
            ease: 'easeOut',
        },
    },
    closed: {
        opacity: 0,
        offsetTop: -18,
    },
};
var popoverVariantsReduced = {
    open: {
        opacity: 1,
        transition: {
            duration: 0.2,
            ease: 'easeOut',
        },
    },
    closed: {
        opacity: 0,
    },
};
var listMotionVariants = {
    open: {
        transition: {
            delayChildren: 0.025,
            staggerChildren: 0.045,
            duration: 0.2,
        },
    },
    closed: {},
};
var listMotionVariantsReduced = {
    open: {},
    closed: {},
};
var listItemMotionVariants = {
    open: {
        y: 0,
        opacity: 1,
        transition: {
            y: { stiffness: 1000, velocity: -100 },
        },
    },
    closed: {
        y: -16,
        opacity: 0,
    },
};
var listItemMotionVariantsReduced = {
    open: {
        opacity: 1,
    },
    closed: {
        opacity: 0,
    },
};
var isHeadingElement = function (element) {
    return element.props['data-select-role'] === 'heading';
};
var Select = function (_a) {
    var _b;
    var ariaLabel = _a["aria-label"], children = _a.children, className = _a.className, _c = _a.color, color = _c === void 0 ? 'default' : _c, errorMessage = _a.errorMessage, fullWidth = _a.fullWidth, hasError = _a.hasError, helpMessage = _a.helpMessage, Icon = _a.icon, id = _a.id, label = _a.label, secondaryLabel = _a.secondaryLabel, onChange = _a.onChange, placeholder = _a.placeholder, placement = _a.placement, popoverAriaLabel = _a.popoverAriaLabel, selectedOptionDisplay = _a.selectedOptionDisplay, tooltipMessage = _a.tooltipMessage, value = _a.value, rootProps = __rest(_a, ['aria-label', "children", "className", "color", "errorMessage", "fullWidth", "hasError", "helpMessage", "icon", "id", "label", "secondaryLabel", "onChange", "placeholder", "placement", "popoverAriaLabel", "selectedOptionDisplay", "tooltipMessage", "value"]);
    var classes = (0, exports.useStyles)({});
    var popover = (0, Popover_1.usePopoverState)({ placement: placement });
    var shouldReduceMotion = (0, framer_motion_1.useReducedMotion)();
    var buttonRef = React.useRef(); // TODO: Need to type this properly...
    var _d = React.useState(50), width = _d[0], setWidth = _d[1];
    var _e = React.useState(null), internalSelection = _e[0], setInternalSelection = _e[1];
    var uniqueId = React.useState(function () { return id || name || (0, UniqueId_1.generateUniqueId)('select-'); })[0];
    var rover = (0, Rover_1.useRoverState)({ loop: true, orientation: 'vertical' });
    // Update the opened popover width any time the button width changes
    // TODO: Review the best way to handle this without breaking
    // eslint-disable-next-line react-hooks/exhaustive-deps
    React.useEffect(function () {
        setWidth(buttonRef.current.getBoundingClientRect().width);
    });
    React.useEffect(function () {
        // TODO: Need to type this properly as well...
        var match = React.Children.toArray(children).find(function (child) {
            if (!React.isValidElement(child)) {
                return null;
            }
            if (isHeadingElement(child)) {
                return null;
            }
            return child.props.value === value;
        });
        // If there is no match, set internalSelection to null so placeholder will be shown
        setInternalSelection(match ? match.props : null);
    }, [children, value]);
    var hidePopover = popover.hide;
    var handleOptionSelected = React.useCallback(function (optionValue, meta) {
        hidePopover();
        onChange === null || onChange === void 0 ? void 0 : onChange(optionValue, meta);
    }, [hidePopover, onChange]);
    if (!label && !ariaLabel && process.env.NODE_ENV === 'development') {
        throw new Error('If a "label" is not provided to Select, please provide "aria-label".');
    }
    return (React.createElement("div", { className: (0, clsx_1.default)(classes.root, className) },
        React.createElement("label", { "aria-hidden": "true", className: (0, clsx_1.default)(classes.label, color === 'inverse' && classes.labelInverse, !label && ariaLabel && classes.srOnly), htmlFor: uniqueId },
            label || ariaLabel,
            !!Icon && tooltipMessage && (React.createElement(Tooltip_1.Tooltip, { title: tooltipMessage },
                React.createElement("span", { className: classes.tooltipContainer },
                    React.createElement(Icon, { className: (0, clsx_1.default)(classes.labelIcon, color === 'inverse' && classes.labelIconInverse), width: 16, height: 16, role: "img", "aria-hidden": true })))),
            secondaryLabel ? (React.createElement("span", { className: (0, clsx_1.default)(classes.labelSecondary, color === 'inverse' && classes.labelInverse) }, secondaryLabel)) : null),
        React.createElement(Popover_1.PopoverDisclosure, __assign({ className: (0, clsx_1.default)(classes.button, hasError && classes.buttonError, fullWidth && classes.buttonFullWidth, (_b = {},
                _b[classes.buttonInverse] = color === 'inverse',
                _b)), ref: buttonRef, "aria-describedby": (0, forms_1.buildDescribedBy)({
                hasError: hasError,
                hasHelpMessage: !!helpMessage,
                uniqueId: uniqueId,
            }), id: uniqueId }, popover, rootProps),
            React.createElement(React.Fragment, null,
                !internalSelection && (React.createElement(Text_1.Text, __assign({ className: (0, clsx_1.default)(classes.placeholderText, classes.buttonText), size: "subbody" }, (0, getTestProps_1.getTestProps)(exports.testIds.placeholderText)), placeholder)),
                internalSelection && !selectedOptionDisplay && (React.createElement(Text_1.Text, { className: classes.buttonText, size: "subbody" }, internalSelection.title)),
                internalSelection && selectedOptionDisplay && (React.createElement(Text_1.Text, { className: classes.buttonText, size: "subbody" }, selectedOptionDisplay(internalSelection))),
                React.createElement("div", { className: classes.buttonArrowContainer, role: "presentation" },
                    React.createElement(chromicons_1.ChevronDown, { className: (0, clsx_1.default)(classes.arrowIcon, popover.visible && classes.rotate), "aria-hidden": true, role: "img", width: 18, height: 18 })))),
        helpMessage && (React.createElement(forms_1.FormHelpMessage, { className: classes.message, color: color, rootElementId: uniqueId, describedById: (0, forms_1.helpFor)(uniqueId) }, helpMessage)),
        hasError && (React.createElement(forms_1.FormErrorMessage, { className: classes.message, color: color, rootElementId: uniqueId, describedById: (0, forms_1.errorFor)(uniqueId) }, errorMessage)),
        React.createElement(Portal_1.Portal, null,
            React.createElement(react_focus_lock_1.default, null,
                React.createElement(Popover_1.Popover, __assign({ "aria-label": label || ariaLabel || popoverAriaLabel, className: classes.popover }, popover, { style: { width: width }, as: framer_motion_1.motion.div, animate: popover.visible ? 'open' : 'closed', variants: shouldReduceMotion ? popoverVariantsReduced : popoverVariants }),
                    React.createElement(framer_motion_1.motion.ul, { className: classes.ul, role: "listbox", variants: shouldReduceMotion
                            ? listMotionVariantsReduced
                            : listMotionVariants }, popover.visible &&
                        React.Children.map(children, function (child) {
                            var _a;
                            if (!React.isValidElement(child)) {
                                return null;
                            }
                            if (isHeadingElement(child)) {
                                return child;
                            }
                            var option = child;
                            return (React.createElement(RoverOption_1.RoverOption, { rover: rover, value: value, option: option, handleOptionSelect: handleOptionSelected, variants: shouldReduceMotion
                                    ? listItemMotionVariantsReduced
                                    : listItemMotionVariants, disabled: (_a = child === null || child === void 0 ? void 0 : child.props) === null || _a === void 0 ? void 0 : _a.disabled }));
                        })))))));
};
exports.Select = Select;
//# sourceMappingURL=data:application/json;base64,