"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var styles_1 = require("../../styles");
var react_remove_scroll_1 = require("react-remove-scroll");
var React = __importStar(require("react"));
var clsx_1 = __importDefault(require("clsx"));
exports.SlideOverStylesKey = 'ChromaSlideOver';
exports.useStyles = styles_1.makeStyles(function (theme) { return ({
    '@keyframes fade-in': {
        '0%': {
            opacity: 0,
        },
        '100%': {
            opacity: 1,
        },
    },
    '@keyframes fade-out': {
        '0%': {
            opacity: 1,
        },
        '100%': {
            opacity: 0,
        },
    },
    '@keyframes slide-in': {
        '0%': {
            width: 0,
            maxWidth: 0,
        },
        '100%': {
            maxWidth: '100%',
            width: 'var(--slideover-width)',
        },
    },
    '@keyframes slide-out': {
        '0%': {
            maxWidth: '100%',
            width: 'var(--slideover-width)',
        },
        '100%': {
            width: 0,
            maxWidth: 0,
        },
    },
    root: {
        '--slideover-width': '28rem',
        backgroundColor: theme.palette.common.white,
        bottom: 0,
        display: 'flex',
        position: 'absolute',
        right: 0,
        top: 0,
        zIndex: 100,
        boxShadow: theme.boxShadows.elevatedContent,
        animation: '$slide-in 0.25s ease-in-out',
        transform: 'translate3d(0, 0, 0)',
        '@media (prefers-reduced-motion)': {
            animation: '$slide-in 0.1s ease-in-out',
        },
    },
    transitionClose: {
        animation: '$slide-out 0.2s ease-in-out',
        '@media (prefers-reduced-motion)': {
            animation: '$slide-out 0.1s ease-in-out',
        },
    },
    fadeInAnimation: {
        animation: '$fade-in 1s',
    },
    fadeOutAnimation: {
        animation: '$fade-out 0.15s',
    },
    inner: {
        maxWidth: 'var(--slideover-width)',
        position: 'relative',
        width: '100vw',
    },
    content: {
        backgroundColor: 'white',
        display: 'flex',
        flexDirection: 'column',
        height: '100%',
        overflowY: 'auto',
    },
}); }, { name: exports.SlideOverStylesKey });
exports.SlideOver = function (_a) {
    var additionalClasses = _a.classes, className = _a.className, children = _a.children, _b = _a.isOpen, isOpen = _b === void 0 ? false : _b, rootProps = __rest(_a, ["classes", "className", "children", "isOpen"]);
    var classes = exports.useStyles({});
    // If the two below states get more complicated, may want to move to a
    // useReducer.
    // We use a local state open variable so we can ensure
    // that the keyframe animations finish before we remove the element
    // from the DOM
    var _c = React.useState(isOpen), localIsOpen = _c[0], setLocalIsOpen = _c[1];
    // This is another state variable we use to apply the "slide-out" keyframes
    // and then we leverage the `onAnimationEnd` to know when it's safe to
    // remove this element from the DOM
    var _d = React.useState(false), isTransitioningClosed = _d[0], setIsTransitioningClosed = _d[1];
    React.useEffect(function () {
        if (localIsOpen === false && isOpen === true) {
            setLocalIsOpen(true);
            setIsTransitioningClosed(false);
            return;
        }
        if (localIsOpen === true && isOpen == false) {
            setIsTransitioningClosed(true);
        }
    }, [isOpen, localIsOpen]);
    if (localIsOpen === false) {
        return null;
    }
    return (React.createElement(react_remove_scroll_1.RemoveScroll, { forwardProps: true },
        React.createElement("section", __assign({ className: clsx_1.default(classes.root, additionalClasses === null || additionalClasses === void 0 ? void 0 : additionalClasses.root, isTransitioningClosed && classes.transitionClose, className), onAnimationEnd: function () {
                if (localIsOpen && isTransitioningClosed) {
                    setLocalIsOpen(false);
                }
            } }, rootProps),
            React.createElement("div", { className: clsx_1.default(classes.inner, additionalClasses === null || additionalClasses === void 0 ? void 0 : additionalClasses.inner) },
                React.createElement("div", { className: clsx_1.default(classes.content, classes.fadeInAnimation, isTransitioningClosed && classes.fadeOutAnimation, additionalClasses === null || additionalClasses === void 0 ? void 0 : additionalClasses.content) }, children)))));
};
//# sourceMappingURL=data:application/json;base64,