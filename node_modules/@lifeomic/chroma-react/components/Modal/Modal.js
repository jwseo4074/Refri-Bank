"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Modal = exports.useStyles = exports.OVERLAY_TEST_ID = exports.ModalStylesKey = void 0;
var ConditionalWrapper_1 = require("../_private/ConditionalWrapper");
var IconButton_1 = require("../IconButton");
var styles_1 = require("../../styles");
var ModalActions_1 = require("./ModalActions");
var framer_motion_1 = require("framer-motion");
var Portal_1 = require("reakit/Portal");
var react_remove_scroll_1 = require("react-remove-scroll");
var Text_1 = require("../Text");
var helpers_1 = require("./helpers");
var chromicons_1 = require("@lifeomic/chromicons");
var clsx_1 = __importDefault(require("clsx"));
var react_focus_lock_1 = __importDefault(require("react-focus-lock"));
var React = __importStar(require("react"));
var utils_1 = require("../../utils");
var ariaDescribedBy = 'modal-content';
var ariaLabelledBy = 'modal-header';
exports.ModalStylesKey = 'ChromaModal';
exports.OVERLAY_TEST_ID = 'chroma-overlay-testid';
exports.useStyles = (0, styles_1.makeStyles)(function (theme) { return ({
    overlay: {
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        bottom: 0,
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        left: 0,
        overflow: 'auto',
        position: 'fixed',
        right: 0,
        top: 0,
        zIndex: 1200,
        '@media screen and (max-width: 480px)': {
            justifyContent: 'flex-end',
        },
    },
    content: {
        background: theme.palette.common.white,
        borderRadius: theme.pxToRem(10),
        display: 'flex',
        flexDirection: 'column',
        margin: '10vh auto',
        outline: 'none',
        paddingTop: theme.spacing(0.25),
        paddingBottom: theme.spacing(0.25),
        width: theme.pxToRem(384),
        maxWidth: theme.pxToRem(600),
        overflow: 'hidden',
        '@media screen and (max-width: 480px)': {
            marginBottom: theme.spacing(0.75),
            marginLeft: theme.spacing(0.75),
            marginRight: theme.spacing(0.75),
            maxHeight: '95%',
            maxWidth: '480px',
            width: 'unset',
        },
        '& form': {
            display: 'flex',
            flexDirection: 'column',
            overflow: 'hidden',
        },
    },
    contentFullWidth: {
        width: 'calc(100% - 6rem)',
        '@media screen and (max-width: 480px)': {
            width: 'unset',
        },
    },
    contentSize0: {
        maxHeight: theme.pxToRem(256),
        '@media screen and (max-width: 480px)': {
            maxHeight: 'unset',
        },
    },
    contentSize1: {
        maxHeight: theme.pxToRem(480),
        '@media screen and (max-width: 480px)': {
            maxHeight: 'unset',
        },
    },
    contentFullScreen: {
        background: theme.palette.common.white,
        display: 'flex',
        flexDirection: 'column',
        height: '100%',
        width: '100%',
        zIndex: 1200, // Has to go above the Header z-index
    },
    verticalPadding: {
        paddingLeft: theme.spacing(2),
        paddingRight: theme.spacing(2),
    },
    modalHeader: {
        alignItems: 'center',
        borderBottom: "1px solid ".concat(theme.palette.divider),
        display: 'flex',
        justifyContent: 'space-between',
        '&:only-child': {
            borderBottom: 'none',
        },
    },
    modalHeaderFullScreen: {
        alignItems: 'center',
        backgroundColor: theme.palette.common.white,
        borderBottom: "1px solid ".concat(theme.palette.divider),
        display: 'flex',
        justifyContent: 'space-between',
        paddingBottom: theme.spacing(0.5),
        paddingLeft: theme.spacing(2.5),
        paddingRight: theme.spacing(2.5),
        paddingTop: theme.spacing(0.5),
    },
    modalChildrenContainer: {
        background: theme.palette.background.default,
        // Added padding on the bottom so that the spacing
        // between the title and top of the text ~equals spacing
        // between bottom of content and actions container
        padding: theme.spacing(2, 2, 2.5),
        overflowY: 'auto',
        WebkitOverflowScrolling: 'touch', // Add iOS momentum scrolling.
    },
    modalChildrenContainerFullScreen: {
        background: theme.palette.grey[50],
        height: '100%',
        overflowY: 'auto',
        padding: theme.spacing(4, 3.75, 4, 3.75),
        width: '100%',
        WebkitOverflowScrolling: 'touch', // Add iOS momentum scrolling.
    },
    modalActions: {
        // On mobile, we want to do the following:
        // 1) Vertically stack the buttons
        // 2) Reverse the order of the actions.  On mobile devices,
        //    the negative/cancel action is normally at the *bottom*,
        //    whereas our default behavior with standard modals is
        //    <cancel> <save>
        // 3) Target the buttons and set the widths to take 100%
        // 4) Target the height of buttons and make them taller,
        //    just so that users have a larger tap-target
        '@media screen and (max-width: 480px)': {
            display: 'flex',
            flexDirection: 'column-reverse',
            '& > button': {
                width: '100%',
                height: theme.pxToRem(48),
                // Since we are `column-reverse`, margin on the bottom is now
                // margin top
                marginTop: theme.spacing(1),
                '&:last-of-type': {
                    marginTop: 0,
                },
            },
        },
    },
}); }, { name: exports.ModalStylesKey });
var ModalInner = React.forwardRef(function (_a, ref) {
    var allowPinchZoom = _a.allowPinchZoom, overlayClassName = _a.overlayClassName, children = _a.children, onClick = _a.onClick, onDismiss = _a.onDismiss, disableDismissOnClickOutside = _a.disableDismissOnClickOutside, onMouseDown = _a.onMouseDown, onKeyDown = _a.onKeyDown;
    var classes = (0, exports.useStyles)({});
    var mouseDownTarget = React.useRef(null);
    var overlayNode = React.useRef(null);
    var thisRef = (0, helpers_1.useForkedRef)(overlayNode, ref);
    return (
    // Since we are using FocusLock, we can safely ignore the `autoFocus` ESLint complaint
    // eslint-disable-next-line jsx-a11y/no-autofocus
    React.createElement(react_focus_lock_1.default, { autoFocus: true, returnFocus: true },
        React.createElement(react_remove_scroll_1.RemoveScroll, { allowPinchZoom: allowPinchZoom },
            React.createElement(framer_motion_1.motion.div, { "data-testid": exports.OVERLAY_TEST_ID, className: (0, clsx_1.default)(classes.overlay, overlayClassName), onClick: (0, utils_1.composeEventHandlers)([
                    onClick,
                    function (event) {
                        if (mouseDownTarget.current === event.target) {
                            event.stopPropagation();
                            onDismiss &&
                                !disableDismissOnClickOutside &&
                                onDismiss(event);
                        }
                    },
                ]), onMouseDown: (0, utils_1.composeEventHandlers)([
                    onMouseDown,
                    function (event) {
                        mouseDownTarget.current = event.target;
                    },
                ]), onKeyDown: (0, utils_1.composeEventHandlers)([
                    onKeyDown,
                    function (event) {
                        if (event.key === 'Escape') {
                            event.stopPropagation();
                            onDismiss && onDismiss(event);
                        }
                    },
                ]), ref: thisRef, positionTransition: true, initial: { opacity: 0 }, animate: {
                    opacity: 1,
                    transition: { delay: 0.15, duration: 0.2 },
                }, exit: { opacity: 0, transition: { duration: 0.15 } } }, children))));
});
var Overlay = React.forwardRef(function (_a, ref) {
    var allowPinchZoom = _a.allowPinchZoom, _b = _a.isOpen, isOpen = _b === void 0 ? true : _b, rootProps = __rest(_a, ["allowPinchZoom", "isOpen"]);
    var ownRef = React.useRef(null);
    var thisRef = ref || ownRef;
    return (React.createElement(React.Fragment, null, isOpen ? (React.createElement(Portal_1.Portal, null,
        React.createElement(ModalInner, __assign({ allowPinchZoom: allowPinchZoom, ref: thisRef }, rootProps)))) : null));
});
var Content = React.forwardRef(function (_a, ref) {
    var _b;
    var actions = _a.actions, className = _a.className, children = _a.children, contentClassName = _a.contentClassName, fullWidth = _a.fullWidth, justifyActions = _a.justifyActions, isFormContent = _a.isFormContent, onFormSubmit = _a.onFormSubmit, onClick = _a.onClick, onDismiss = _a.onDismiss, customHeader = _a.customHeader, size = _a.size, title = _a.title, _c = _a.poses, poses = _c === void 0 ? {} : _c, rootProps = __rest(_a, ["actions", "className", "children", "contentClassName", "fullWidth", "justifyActions", "isFormContent", "onFormSubmit", "onClick", "onDismiss", "customHeader", "size", "title", "poses"]);
    var classes = (0, exports.useStyles)({});
    var shouldReduceMotion = (0, framer_motion_1.useReducedMotion)();
    var poseVariants = {
        init: poses.init || { y: 50, scale: 0.3 },
        open: poses.open || { y: 0, scale: 1 },
        exit: poses.exit || { scale: 0.5, transition: { duration: 0.15 } },
    };
    return (React.createElement(framer_motion_1.motion.div, __assign({ className: (0, clsx_1.default)(classes.content, fullWidth && classes.contentFullWidth, className), role: "dialog", "aria-modal": "true", "aria-describedby": ariaDescribedBy, "aria-labelledby": ariaLabelledBy, tabIndex: -1, onClick: (0, utils_1.composeEventHandlers)([
            onClick,
            function (event) {
                event.stopPropagation();
            },
        ]), ref: ref, variants: poseVariants, initial: shouldReduceMotion ? {} : 'init', animate: shouldReduceMotion ? {} : 'open', exit: shouldReduceMotion ? {} : 'exit' }, rootProps),
        customHeader ? (customHeader) : (React.createElement("div", { id: ariaLabelledBy, className: (0, clsx_1.default)(classes.modalHeader, classes.verticalPadding) },
            !!title && (React.createElement(Text_1.Text, { size: "subbody", weight: "bold" }, title)),
            React.createElement(IconButton_1.IconButton, { "aria-label": "Close open modal", icon: chromicons_1.X, size: 0, tabIndex: 0, onClick: onDismiss, paddingRight: 0 }))),
        React.createElement(ConditionalWrapper_1.ConditionalWrapper, { condition: Boolean(isFormContent && onFormSubmit), wrapper: function (children) { return (React.createElement("form", { onSubmit: onFormSubmit }, children)); } },
            children && (React.createElement("div", { id: ariaDescribedBy, className: (0, clsx_1.default)(classes.modalChildrenContainer, classes.verticalPadding, (_b = {},
                    _b[classes.contentSize0] = size === 0,
                    _b[classes.contentSize1] = size === 1,
                    _b), contentClassName) }, children)),
            !!actions && (React.createElement(ModalActions_1.ModalActions, { className: (0, clsx_1.default)(classes.modalActions, classes.verticalPadding), justify: justifyActions }, actions)))));
});
var FullScreenContent = React.forwardRef(function (_a, ref) {
    var children = _a.children, className = _a.className, contentClassName = _a.contentClassName, onClick = _a.onClick, onDismiss = _a.onDismiss, title = _a.title, customHeader = _a.customHeader, rootProps = __rest(_a, ["children", "className", "contentClassName", "onClick", "onDismiss", "title", "customHeader"]);
    var classes = (0, exports.useStyles)({});
    return (React.createElement(framer_motion_1.motion.div, __assign({ className: (0, clsx_1.default)(classes.contentFullScreen, className), role: "dialog", "aria-modal": "true", "aria-describedby": ariaDescribedBy, "aria-labelledby": ariaLabelledBy, tabIndex: -1, onClick: (0, utils_1.composeEventHandlers)([
            onClick,
            function (event) {
                event.stopPropagation();
            },
        ]), ref: ref, initial: { opacity: 0 }, animate: {
            opacity: 1,
            transition: { duration: 0.1, ease: [0.16, 1, 0.3, 1] }, // https://easings.net/#easeOutExpo
        }, exit: {
            opacity: 0,
            transition: { duration: 0.08, ease: [0.7, 0, 0.84, 0] },
        } }, rootProps),
        customHeader ? (customHeader) : (React.createElement("div", { id: ariaLabelledBy, className: classes.modalHeaderFullScreen },
            !!title && React.createElement(Text_1.Text, { size: "subbody" }, title),
            React.createElement(IconButton_1.IconButton, { "aria-label": "Close open modal", icon: chromicons_1.X, size: 0, tabIndex: 0, onClick: onDismiss, paddingRight: 0 }))),
        React.createElement("div", { id: ariaDescribedBy, className: (0, clsx_1.default)(classes.modalChildrenContainerFullScreen, contentClassName) }, children)));
});
exports.Modal = React.forwardRef(function (_a, ref) {
    var allowPinchZoom = _a.allowPinchZoom, isFullScreen = _a.isFullScreen, isOpen = _a.isOpen, onDismiss = _a.onDismiss, disableDismissOnClickOutside = _a.disableDismissOnClickOutside, _b = _a.size, size = _b === void 0 ? 0 : _b, overlayClassName = _a.overlayClassName, rootProps = __rest(_a, ["allowPinchZoom", "isFullScreen", "isOpen", "onDismiss", "disableDismissOnClickOutside", "size", "overlayClassName"]);
    var ownRef = React.useRef(null);
    // If a ref is forwarded, use it; otherwise, use ourselves as the ref
    var thisRef = ref || ownRef;
    return (React.createElement(framer_motion_1.AnimatePresence, null, isOpen ? (React.createElement(Overlay, { overlayClassName: overlayClassName, allowPinchZoom: allowPinchZoom, isOpen: isOpen, onDismiss: onDismiss, disableDismissOnClickOutside: disableDismissOnClickOutside }, isFullScreen ? (React.createElement(FullScreenContent, __assign({ ref: thisRef, size: size, onDismiss: onDismiss }, rootProps))) : (React.createElement(Content, __assign({ ref: thisRef, size: size, onDismiss: onDismiss }, rootProps))))) : null));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW9kYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Nb2RhbC9Nb2RhbC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEscUVBQW9FO0FBRXBFLDRDQUEyQztBQUMzQyx1Q0FBMEM7QUFDMUMsK0NBQWlFO0FBQ2pFLCtDQUt1QjtBQUN2Qix3Q0FBdUM7QUFDdkMsMkRBQW1EO0FBQ25ELGdDQUErQjtBQUMvQixxQ0FBeUM7QUFDekMsbURBQXlDO0FBQ3pDLDhDQUF3QjtBQUN4QixzRUFBeUM7QUFDekMsMkNBQStCO0FBQy9CLHFDQUFtRDtBQUVuRCxJQUFNLGVBQWUsR0FBRyxlQUFlLENBQUM7QUFDeEMsSUFBTSxjQUFjLEdBQUcsY0FBYyxDQUFDO0FBRXpCLFFBQUEsY0FBYyxHQUFHLGFBQWEsQ0FBQztBQUUvQixRQUFBLGVBQWUsR0FBRyx1QkFBdUIsQ0FBQztBQUUxQyxRQUFBLFNBQVMsR0FBRyxJQUFBLG1CQUFVLEVBQ2pDLFVBQUMsS0FBSyxJQUFLLE9BQUEsQ0FBQztJQUNWLE9BQU8sRUFBRTtRQUNQLGVBQWUsRUFBRSxvQkFBb0I7UUFDckMsTUFBTSxFQUFFLENBQUM7UUFDVCxPQUFPLEVBQUUsTUFBTTtRQUNmLGFBQWEsRUFBRSxRQUFRO1FBQ3ZCLGNBQWMsRUFBRSxRQUFRO1FBQ3hCLElBQUksRUFBRSxDQUFDO1FBQ1AsUUFBUSxFQUFFLE1BQU07UUFDaEIsUUFBUSxFQUFFLE9BQU87UUFDakIsS0FBSyxFQUFFLENBQUM7UUFDUixHQUFHLEVBQUUsQ0FBQztRQUNOLE1BQU0sRUFBRSxJQUFJO1FBQ1osc0NBQXNDLEVBQUU7WUFDdEMsY0FBYyxFQUFFLFVBQVU7U0FDM0I7S0FDRjtJQUNELE9BQU8sRUFBRTtRQUNQLFVBQVUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFL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LEVBQUUsU0FBUyxJQUNoQixTQUFTLEVBQ2IsQ0FDSCxDQUFDLENBQUMsQ0FBQyxDQUNGLG9CQUFDLE9BQU8sYUFDTixHQUFHLEVBQUUsT0FBTyxFQUNaLElBQUksRUFBRSxJQUFJLEVBQ1YsU0FBUyxFQUFFLFNBQVMsSUFDaEIsU0FBUyxFQUNiLENBQ0gsQ0FDTyxDQUNYLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDUSxDQUNuQixDQUFDO0FBQ0osQ0FBQyxDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25kaXRpb25hbFdyYXBwZXIgfSBmcm9tICcuLi9fcHJpdmF0ZS9Db25kaXRpb25hbFdyYXBwZXInO1xuaW1wb3J0IHsgR2V0Q2xhc3NlcyB9IGZyb20gJy4uLy4uL3R5cGVVdGlscyc7XG5pbXBvcnQgeyBJY29uQnV0dG9uIH0gZnJvbSAnLi4vSWNvbkJ1dHRvbic7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnLi4vLi4vc3R5bGVzJztcbmltcG9ydCB7IE1vZGFsQWN0aW9ucywgTW9kYWxBY3Rpb25zUHJvcHMgfSBmcm9tICcuL01vZGFsQWN0aW9ucyc7XG5pbXBvcnQge1xuICBtb3Rpb24sXG4gIEFuaW1hdGVQcmVzZW5jZSxcbiAgdXNlUmVkdWNlZE1vdGlvbixcbiAgVmFyaWFudHMsXG59IGZyb20gJ2ZyYW1lci1tb3Rpb24nO1xuaW1wb3J0IHsgUG9ydGFsIH0gZnJvbSAncmVha2l0L1BvcnRhbCc7XG5pbXBvcnQgeyBSZW1vdmVTY3JvbGwgfSBmcm9tICdyZWFjdC1yZW1vdmUtc2Nyb2xsJztcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi9UZXh0JztcbmltcG9ydCB7IHVzZUZvcmtlZFJlZiB9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgeyBYIH0gZnJvbSAnQGxpZmVvbWljL2Nocm9taWNvbnMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgRm9jdXNMb2NrIGZyb20gJ3JlYWN0LWZvY3VzLWxvY2snO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY29tcG9zZUV2ZW50SGFuZGxlcnMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbmNvbnN0IGFyaWFEZXNjcmliZWRCeSA9ICdtb2RhbC1jb250ZW50JztcbmNvbnN0IGFyaWFMYWJlbGxlZEJ5ID0gJ21vZGFsLWhlYWRlcic7XG5cbmV4cG9ydCBjb25zdCBNb2RhbFN0eWxlc0tleSA9ICdDaHJvbWFNb2RhbCc7XG5cbmV4cG9ydCBjb25zdCBPVkVSTEFZX1RFU1RfSUQgPSAnY2hyb21hLW92ZXJsYXktdGVzdGlkJztcblxuZXhwb3J0IGNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoXG4gICh0aGVtZSkgPT4gKHtcbiAgICBvdmVybGF5OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgb3ZlcmZsb3c6ICdhdXRvJyxcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICB6SW5kZXg6IDEyMDAsIC8vIEhhcyB0byBnbyBhYm92ZSB0aGUgSGVhZGVyIHotaW5kZXhcbiAgICAgICdAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0ODBweCknOiB7XG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNvbnRlbnQ6IHtcbiAgICAgIGJhY2tncm91bmQ6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5weFRvUmVtKDEwKSxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgbWFyZ2luOiAnMTB2aCBhdXRvJyxcbiAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgIHBhZGRpbmdUb3A6IHRoZW1lLnNwYWNpbmcoMC4yNSksXG4gICAgICBwYWRkaW5nQm90dG9tOiB0aGVtZS5zcGFjaW5nKDAuMjUpLFxuICAgICAgd2lkdGg6IHRoZW1lLnB4VG9SZW0oMzg0KSxcbiAgICAgIG1heFdpZHRoOiB0aGVtZS5weFRvUmVtKDYwMCksXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAnQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDgwcHgpJzoge1xuICAgICAgICBtYXJnaW5Cb3R0b206IHRoZW1lLnNwYWNpbmcoMC43NSksXG4gICAgICAgIG1hcmdpbkxlZnQ6IHRoZW1lLnNwYWNpbmcoMC43NSksXG4gICAgICAgIG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nKDAuNzUpLFxuICAgICAgICBtYXhIZWlnaHQ6ICc5NSUnLFxuICAgICAgICBtYXhXaWR0aDogJzQ4MHB4JyxcbiAgICAgICAgd2lkdGg6ICd1bnNldCcsXG4gICAgICB9LFxuICAgICAgJyYgZm9ybSc6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNvbnRlbnRGdWxsV2lkdGg6IHtcbiAgICAgIHdpZHRoOiAnY2FsYygxMDAlIC0gNnJlbSknLFxuICAgICAgJ0BtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQ4MHB4KSc6IHtcbiAgICAgICAgd2lkdGg6ICd1bnNldCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAgY29udGVudFNpemUwOiB7XG4gICAgICBtYXhIZWlnaHQ6IHRoZW1lLnB4VG9SZW0oMjU2KSxcbiAgICAgICdAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0ODBweCknOiB7XG4gICAgICAgIG1heEhlaWdodDogJ3Vuc2V0JyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjb250ZW50U2l6ZTE6IHtcbiAgICAgIG1heEhlaWdodDogdGhlbWUucHhUb1JlbSg0ODApLFxuICAgICAgJ0BtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQ4MHB4KSc6IHtcbiAgICAgICAgbWF4SGVpZ2h0OiAndW5zZXQnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNvbnRlbnRGdWxsU2NyZWVuOiB7XG4gICAgICBiYWNrZ3JvdW5kOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgekluZGV4OiAxMjAwLCAvLyBIYXMgdG8gZ28gYWJvdmUgdGhlIEhlYWRlciB6LWluZGV4XG4gICAgfSxcbiAgICB2ZXJ0aWNhbFBhZGRpbmc6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgIH0sXG4gICAgbW9kYWxIZWFkZXI6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5kaXZpZGVyfWAsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICAgJyY6b25seS1jaGlsZCc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiAnbm9uZScsXG4gICAgICB9LFxuICAgIH0sXG4gICAgbW9kYWxIZWFkZXJGdWxsU2NyZWVuOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHt0aGVtZS5wYWxldHRlLmRpdmlkZXJ9YCxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgICBwYWRkaW5nQm90dG9tOiB0aGVtZS5zcGFjaW5nKDAuNSksXG4gICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygyLjUpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIuNSksXG4gICAgICBwYWRkaW5nVG9wOiB0aGVtZS5zcGFjaW5nKDAuNSksXG4gICAgfSxcbiAgICBtb2RhbENoaWxkcmVuQ29udGFpbmVyOiB7XG4gICAgICBiYWNrZ3JvdW5kOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQuZGVmYXVsdCxcbiAgICAgIC8vIEFkZGVkIHBhZGRpbmcgb24gdGhlIGJvdHRvbSBzbyB0aGF0IHRoZSBzcGFjaW5nXG4gICAgICAvLyBiZXR3ZWVuIHRoZSB0aXRsZSBhbmQgdG9wIG9mIHRoZSB0ZXh0IH5lcXVhbHMgc3BhY2luZ1xuICAgICAgLy8gYmV0d2VlbiBib3R0b20gb2YgY29udGVudCBhbmQgYWN0aW9ucyBjb250YWluZXJcbiAgICAgIHBhZGRpbmc6IHRoZW1lLnNwYWNpbmcoMiwgMiwgMi41KSxcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCcsIC8vIEFkZCBpT1MgbW9tZW50dW0gc2Nyb2xsaW5nLlxuICAgIH0sXG4gICAgbW9kYWxDaGlsZHJlbkNvbnRhaW5lckZ1bGxTY3JlZW46IHtcbiAgICAgIGJhY2tncm91bmQ6IHRoZW1lLnBhbGV0dGUuZ3JleVs1MF0sXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgcGFkZGluZzogdGhlbWUuc3BhY2luZyg0LCAzLjc1LCA0LCAzLjc1KSxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJywgLy8gQWRkIGlPUyBtb21lbnR1bSBzY3JvbGxpbmcuXG4gICAgfSxcbiAgICBtb2RhbEFjdGlvbnM6IHtcbiAgICAgIC8vIE9uIG1vYmlsZSwgd2Ugd2FudCB0byBkbyB0aGUgZm9sbG93aW5nOlxuICAgICAgLy8gMSkgVmVydGljYWxseSBzdGFjayB0aGUgYnV0dG9uc1xuICAgICAgLy8gMikgUmV2ZXJzZSB0aGUgb3JkZXIgb2YgdGhlIGFjdGlvbnMuICBPbiBtb2JpbGUgZGV2aWNlcyxcbiAgICAgIC8vICAgIHRoZSBuZWdhdGl2ZS9jYW5jZWwgYWN0aW9uIGlzIG5vcm1hbGx5IGF0IHRoZSAqYm90dG9tKixcbiAgICAgIC8vICAgIHdoZXJlYXMgb3VyIGRlZmF1bHQgYmVoYXZpb3Igd2l0aCBzdGFuZGFyZCBtb2RhbHMgaXNcbiAgICAgIC8vICAgIDxjYW5jZWw+IDxzYXZlPlxuICAgICAgLy8gMykgVGFyZ2V0IHRoZSBidXR0b25zIGFuZCBzZXQgdGhlIHdpZHRocyB0byB0YWtlIDEwMCVcbiAgICAgIC8vIDQpIFRhcmdldCB0aGUgaGVpZ2h0IG9mIGJ1dHRvbnMgYW5kIG1ha2UgdGhlbSB0YWxsZXIsXG4gICAgICAvLyAgICBqdXN0IHNvIHRoYXQgdXNlcnMgaGF2ZSBhIGxhcmdlciB0YXAtdGFyZ2V0XG4gICAgICAnQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDgwcHgpJzoge1xuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4tcmV2ZXJzZScsXG4gICAgICAgICcmID4gYnV0dG9uJzoge1xuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgaGVpZ2h0OiB0aGVtZS5weFRvUmVtKDQ4KSxcbiAgICAgICAgICAvLyBTaW5jZSB3ZSBhcmUgYGNvbHVtbi1yZXZlcnNlYCwgbWFyZ2luIG9uIHRoZSBib3R0b20gaXMgbm93XG4gICAgICAgICAgLy8gbWFyZ2luIHRvcFxuICAgICAgICAgIG1hcmdpblRvcDogdGhlbWUuc3BhY2luZygxKSxcbiAgICAgICAgICAnJjpsYXN0LW9mLXR5cGUnOiB7XG4gICAgICAgICAgICBtYXJnaW5Ub3A6IDAsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSksXG4gIHsgbmFtZTogTW9kYWxTdHlsZXNLZXkgfVxuKTtcblxuZXhwb3J0IHR5cGUgTW9kYWxDbGFzc2VzID0gR2V0Q2xhc3Nlczx0eXBlb2YgdXNlU3R5bGVzPjtcblxuZXhwb3J0IGludGVyZmFjZSBNb2RhbFByb3BzXG4gIGV4dGVuZHMgUGljazxcbiAgICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8J2Rpdic+LFxuICAgICdjbGFzc05hbWUnIHwgJ29uQ2xpY2snIHwgJ29uTW91c2VEb3duJyB8ICdvbktleURvd24nXG4gID4ge1xuICBhY3Rpb25zPzogUmVhY3QuUmVhY3ROb2RlO1xuICBhbGxvd1BpbmNoWm9vbT86IGJvb2xlYW47XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBjdXN0b21IZWFkZXI/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIGNvbnRlbnRDbGFzc05hbWU/OiBzdHJpbmc7XG4gIG92ZXJsYXlDbGFzc05hbWU/OiBzdHJpbmc7XG4gIGZ1bGxXaWR0aD86IGJvb2xlYW47XG4gIGlzRm9ybUNvbnRlbnQ/OiBib29sZWFuO1xuICBpc0Z1bGxTY3JlZW4/OiBib29sZWFuO1xuICBpc09wZW4/OiBib29sZWFuO1xuICBqdXN0aWZ5QWN0aW9ucz86IE1vZGFsQWN0aW9uc1Byb3BzWydqdXN0aWZ5J107XG4gIG9uRGlzbWlzcz86IChwcm9wczogYW55KSA9PiB2b2lkO1xuICBkaXNhYmxlRGlzbWlzc09uQ2xpY2tPdXRzaWRlPzogYm9vbGVhbjtcbiAgb25Gb3JtU3VibWl0PzogKGRhdGE6IGFueSkgPT4gdm9pZDtcbiAgcG9zZXM/OiBWYXJpYW50cztcbiAgc2l6ZT86IDAgfCAxO1xuICB0aXRsZT86IHN0cmluZztcbn1cblxuY29uc3QgTW9kYWxJbm5lciA9IFJlYWN0LmZvcndhcmRSZWY8SFRNTERpdkVsZW1lbnQsIE1vZGFsUHJvcHM+KFxuICAoXG4gICAge1xuICAgICAgYWxsb3dQaW5jaFpvb20sXG4gICAgICBvdmVybGF5Q2xhc3NOYW1lLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBvbkNsaWNrLFxuICAgICAgb25EaXNtaXNzLFxuICAgICAgZGlzYWJsZURpc21pc3NPbkNsaWNrT3V0c2lkZSxcbiAgICAgIG9uTW91c2VEb3duLFxuICAgICAgb25LZXlEb3duLFxuICAgIH0sXG4gICAgcmVmXG4gICkgPT4ge1xuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoe30pO1xuICAgIGNvbnN0IG1vdXNlRG93blRhcmdldCA9IFJlYWN0LnVzZVJlZjxhbnk+KG51bGwpO1xuICAgIGNvbnN0IG92ZXJsYXlOb2RlID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICAgIGNvbnN0IHRoaXNSZWYgPSB1c2VGb3JrZWRSZWYob3ZlcmxheU5vZGUsIHJlZik7XG5cbiAgICByZXR1cm4gKFxuICAgICAgLy8gU2luY2Ugd2UgYXJlIHVzaW5nIEZvY3VzTG9jaywgd2UgY2FuIHNhZmVseSBpZ25vcmUgdGhlIGBhdXRvRm9jdXNgIEVTTGludCBjb21wbGFpbnRcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9uby1hdXRvZm9jdXNcbiAgICAgIDxGb2N1c0xvY2sgYXV0b0ZvY3VzIHJldHVybkZvY3VzPlxuICAgICAgICA8UmVtb3ZlU2Nyb2xsIGFsbG93UGluY2hab29tPXthbGxvd1BpbmNoWm9vbX0+XG4gICAgICAgICAgPG1vdGlvbi5kaXZcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPXtPVkVSTEFZX1RFU1RfSUR9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2Nsc3goY2xhc3Nlcy5vdmVybGF5LCBvdmVybGF5Q2xhc3NOYW1lKX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e2NvbXBvc2VFdmVudEhhbmRsZXJzKFtcbiAgICAgICAgICAgICAgb25DbGljayxcbiAgICAgICAgICAgICAgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG1vdXNlRG93blRhcmdldC5jdXJyZW50ID09PSBldmVudC50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgb25EaXNtaXNzICYmXG4gICAgICAgICAgICAgICAgICAgICFkaXNhYmxlRGlzbWlzc09uQ2xpY2tPdXRzaWRlICYmXG4gICAgICAgICAgICAgICAgICAgIG9uRGlzbWlzcyhldmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSl9XG4gICAgICAgICAgICBvbk1vdXNlRG93bj17Y29tcG9zZUV2ZW50SGFuZGxlcnMoW1xuICAgICAgICAgICAgICBvbk1vdXNlRG93bixcbiAgICAgICAgICAgICAgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgbW91c2VEb3duVGFyZ2V0LmN1cnJlbnQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdKX1cbiAgICAgICAgICAgIG9uS2V5RG93bj17Y29tcG9zZUV2ZW50SGFuZGxlcnMoW1xuICAgICAgICAgICAgICBvbktleURvd24sXG4gICAgICAgICAgICAgIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgIG9uRGlzbWlzcyAmJiBvbkRpc21pc3MoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0pfVxuICAgICAgICAgICAgcmVmPXt0aGlzUmVmfVxuICAgICAgICAgICAgcG9zaXRpb25UcmFuc2l0aW9uXG4gICAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAgfX1cbiAgICAgICAgICAgIGFuaW1hdGU9e3tcbiAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgdHJhbnNpdGlvbjogeyBkZWxheTogMC4xNSwgZHVyYXRpb246IDAuMiB9LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIGV4aXQ9e3sgb3BhY2l0eTogMCwgdHJhbnNpdGlvbjogeyBkdXJhdGlvbjogMC4xNSB9IH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICAgICAgPC9SZW1vdmVTY3JvbGw+XG4gICAgICA8L0ZvY3VzTG9jaz5cbiAgICApO1xuICB9XG4pO1xuXG5jb25zdCBPdmVybGF5ID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MRGl2RWxlbWVudCwgTW9kYWxQcm9wcz4oXG4gICh7IGFsbG93UGluY2hab29tLCBpc09wZW4gPSB0cnVlLCAuLi5yb290UHJvcHMgfSwgcmVmKSA9PiB7XG4gICAgY29uc3Qgb3duUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICAgIGNvbnN0IHRoaXNSZWYgPSByZWYgfHwgb3duUmVmO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIHtpc09wZW4gPyAoXG4gICAgICAgICAgPFBvcnRhbD5cbiAgICAgICAgICAgIDxNb2RhbElubmVyXG4gICAgICAgICAgICAgIGFsbG93UGluY2hab29tPXthbGxvd1BpbmNoWm9vbX1cbiAgICAgICAgICAgICAgcmVmPXt0aGlzUmVmfVxuICAgICAgICAgICAgICB7Li4ucm9vdFByb3BzfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L1BvcnRhbD5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICA8Lz5cbiAgICApO1xuICB9XG4pO1xuXG5jb25zdCBDb250ZW50ID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MRGl2RWxlbWVudCwgTW9kYWxQcm9wcz4oXG4gIChcbiAgICB7XG4gICAgICBhY3Rpb25zLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjb250ZW50Q2xhc3NOYW1lLFxuICAgICAgZnVsbFdpZHRoLFxuICAgICAganVzdGlmeUFjdGlvbnMsXG4gICAgICBpc0Zvcm1Db250ZW50LFxuICAgICAgb25Gb3JtU3VibWl0LFxuICAgICAgb25DbGljayxcbiAgICAgIG9uRGlzbWlzcyxcbiAgICAgIGN1c3RvbUhlYWRlcixcbiAgICAgIHNpemUsXG4gICAgICB0aXRsZSxcbiAgICAgIHBvc2VzID0ge30sXG4gICAgICAuLi5yb290UHJvcHNcbiAgICB9LFxuICAgIHJlZlxuICApID0+IHtcbiAgICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKHt9KTtcbiAgICBjb25zdCBzaG91bGRSZWR1Y2VNb3Rpb24gPSB1c2VSZWR1Y2VkTW90aW9uKCk7XG4gICAgY29uc3QgcG9zZVZhcmlhbnRzID0ge1xuICAgICAgaW5pdDogcG9zZXMuaW5pdCB8fCB7IHk6IDUwLCBzY2FsZTogMC4zIH0sXG4gICAgICBvcGVuOiBwb3Nlcy5vcGVuIHx8IHsgeTogMCwgc2NhbGU6IDEgfSxcbiAgICAgIGV4aXQ6IHBvc2VzLmV4aXQgfHwgeyBzY2FsZTogMC41LCB0cmFuc2l0aW9uOiB7IGR1cmF0aW9uOiAwLjE1IH0gfSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgIGNsYXNzTmFtZT17Y2xzeChcbiAgICAgICAgICBjbGFzc2VzLmNvbnRlbnQsXG4gICAgICAgICAgZnVsbFdpZHRoICYmIGNsYXNzZXMuY29udGVudEZ1bGxXaWR0aCxcbiAgICAgICAgICBjbGFzc05hbWVcbiAgICAgICAgKX1cbiAgICAgICAgcm9sZT1cImRpYWxvZ1wiXG4gICAgICAgIGFyaWEtbW9kYWw9XCJ0cnVlXCJcbiAgICAgICAgYXJpYS1kZXNjcmliZWRieT17YXJpYURlc2NyaWJlZEJ5fVxuICAgICAgICBhcmlhLWxhYmVsbGVkYnk9e2FyaWFMYWJlbGxlZEJ5fVxuICAgICAgICB0YWJJbmRleD17LTF9XG4gICAgICAgIG9uQ2xpY2s9e2NvbXBvc2VFdmVudEhhbmRsZXJzKFtcbiAgICAgICAgICBvbkNsaWNrLFxuICAgICAgICAgIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgXSl9XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICB2YXJpYW50cz17cG9zZVZhcmlhbnRzfVxuICAgICAgICBpbml0aWFsPXtzaG91bGRSZWR1Y2VNb3Rpb24gPyB7fSA6ICdpbml0J31cbiAgICAgICAgYW5pbWF0ZT17c2hvdWxkUmVkdWNlTW90aW9uID8ge30gOiAnb3Blbid9XG4gICAgICAgIGV4aXQ9e3Nob3VsZFJlZHVjZU1vdGlvbiA/IHt9IDogJ2V4aXQnfVxuICAgICAgICB7Li4ucm9vdFByb3BzfVxuICAgICAgPlxuICAgICAgICB7Y3VzdG9tSGVhZGVyID8gKFxuICAgICAgICAgIGN1c3RvbUhlYWRlclxuICAgICAgICApIDogKFxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGlkPXthcmlhTGFiZWxsZWRCeX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLm1vZGFsSGVhZGVyLCBjbGFzc2VzLnZlcnRpY2FsUGFkZGluZyl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgeyEhdGl0bGUgJiYgKFxuICAgICAgICAgICAgICA8VGV4dCBzaXplPVwic3ViYm9keVwiIHdlaWdodD1cImJvbGRcIj5cbiAgICAgICAgICAgICAgICB7dGl0bGV9XG4gICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8SWNvbkJ1dHRvblxuICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwiQ2xvc2Ugb3BlbiBtb2RhbFwiXG4gICAgICAgICAgICAgIGljb249e1h9XG4gICAgICAgICAgICAgIHNpemU9ezB9XG4gICAgICAgICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICAgICAgICBvbkNsaWNrPXtvbkRpc21pc3N9XG4gICAgICAgICAgICAgIHBhZGRpbmdSaWdodD17MH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICAgIDxDb25kaXRpb25hbFdyYXBwZXJcbiAgICAgICAgICBjb25kaXRpb249e0Jvb2xlYW4oaXNGb3JtQ29udGVudCAmJiBvbkZvcm1TdWJtaXQpfVxuICAgICAgICAgIHdyYXBwZXI9eyhjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlKSA9PiAoXG4gICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17b25Gb3JtU3VibWl0fT57Y2hpbGRyZW59PC9mb3JtPlxuICAgICAgICAgICl9XG4gICAgICAgID5cbiAgICAgICAgICB7Y2hpbGRyZW4gJiYgKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBpZD17YXJpYURlc2NyaWJlZEJ5fVxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2Nsc3goXG4gICAgICAgICAgICAgICAgY2xhc3Nlcy5tb2RhbENoaWxkcmVuQ29udGFpbmVyLFxuICAgICAgICAgICAgICAgIGNsYXNzZXMudmVydGljYWxQYWRkaW5nLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFtjbGFzc2VzLmNvbnRlbnRTaXplMF06IHNpemUgPT09IDAsXG4gICAgICAgICAgICAgICAgICBbY2xhc3Nlcy5jb250ZW50U2l6ZTFdOiBzaXplID09PSAxLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29udGVudENsYXNzTmFtZVxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApfVxuICAgICAgICAgIHshIWFjdGlvbnMgJiYgKFxuICAgICAgICAgICAgPE1vZGFsQWN0aW9uc1xuICAgICAgICAgICAgICBjbGFzc05hbWU9e2Nsc3goY2xhc3Nlcy5tb2RhbEFjdGlvbnMsIGNsYXNzZXMudmVydGljYWxQYWRkaW5nKX1cbiAgICAgICAgICAgICAganVzdGlmeT17anVzdGlmeUFjdGlvbnN9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHthY3Rpb25zfVxuICAgICAgICAgICAgPC9Nb2RhbEFjdGlvbnM+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9Db25kaXRpb25hbFdyYXBwZXI+XG4gICAgICA8L21vdGlvbi5kaXY+XG4gICAgKTtcbiAgfVxuKTtcblxuY29uc3QgRnVsbFNjcmVlbkNvbnRlbnQgPSBSZWFjdC5mb3J3YXJkUmVmPEhUTUxEaXZFbGVtZW50LCBNb2RhbFByb3BzPihcbiAgKFxuICAgIHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29udGVudENsYXNzTmFtZSxcbiAgICAgIG9uQ2xpY2ssXG4gICAgICBvbkRpc21pc3MsXG4gICAgICB0aXRsZSxcbiAgICAgIGN1c3RvbUhlYWRlcixcbiAgICAgIC4uLnJvb3RQcm9wc1xuICAgIH0sXG4gICAgcmVmXG4gICkgPT4ge1xuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoe30pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLmNvbnRlbnRGdWxsU2NyZWVuLCBjbGFzc05hbWUpfVxuICAgICAgICByb2xlPVwiZGlhbG9nXCJcbiAgICAgICAgYXJpYS1tb2RhbD1cInRydWVcIlxuICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PXthcmlhRGVzY3JpYmVkQnl9XG4gICAgICAgIGFyaWEtbGFiZWxsZWRieT17YXJpYUxhYmVsbGVkQnl9XG4gICAgICAgIHRhYkluZGV4PXstMX1cbiAgICAgICAgb25DbGljaz17Y29tcG9zZUV2ZW50SGFuZGxlcnMoW1xuICAgICAgICAgIG9uQ2xpY2ssXG4gICAgICAgICAgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB9LFxuICAgICAgICBdKX1cbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCB9fVxuICAgICAgICBhbmltYXRlPXt7XG4gICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICB0cmFuc2l0aW9uOiB7IGR1cmF0aW9uOiAwLjEsIGVhc2U6IFswLjE2LCAxLCAwLjMsIDFdIH0sIC8vIGh0dHBzOi8vZWFzaW5ncy5uZXQvI2Vhc2VPdXRFeHBvXG4gICAgICAgIH19XG4gICAgICAgIGV4aXQ9e3tcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgIHRyYW5zaXRpb246IHsgZHVyYXRpb246IDAuMDgsIGVhc2U6IFswLjcsIDAsIDAuODQsIDBdIH0sXG4gICAgICAgIH19IC8vIGh0dHBzOi8vZWFzaW5ncy5uZXQvI2Vhc2VJbkV4cG9cbiAgICAgICAgey4uLnJvb3RQcm9wc31cbiAgICAgID5cbiAgICAgICAge2N1c3RvbUhlYWRlciA/IChcbiAgICAgICAgICBjdXN0b21IZWFkZXJcbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8ZGl2IGlkPXthcmlhTGFiZWxsZWRCeX0gY2xhc3NOYW1lPXtjbGFzc2VzLm1vZGFsSGVhZGVyRnVsbFNjcmVlbn0+XG4gICAgICAgICAgICB7ISF0aXRsZSAmJiA8VGV4dCBzaXplPVwic3ViYm9keVwiPnt0aXRsZX08L1RleHQ+fVxuICAgICAgICAgICAgPEljb25CdXR0b25cbiAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIkNsb3NlIG9wZW4gbW9kYWxcIlxuICAgICAgICAgICAgICBpY29uPXtYfVxuICAgICAgICAgICAgICBzaXplPXswfVxuICAgICAgICAgICAgICB0YWJJbmRleD17MH1cbiAgICAgICAgICAgICAgb25DbGljaz17b25EaXNtaXNzfVxuICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQ9ezB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgICA8ZGl2XG4gICAgICAgICAgaWQ9e2FyaWFEZXNjcmliZWRCeX1cbiAgICAgICAgICBjbGFzc05hbWU9e2Nsc3goXG4gICAgICAgICAgICBjbGFzc2VzLm1vZGFsQ2hpbGRyZW5Db250YWluZXJGdWxsU2NyZWVuLFxuICAgICAgICAgICAgY29udGVudENsYXNzTmFtZVxuICAgICAgICAgICl9XG4gICAgICAgID5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9tb3Rpb24uZGl2PlxuICAgICk7XG4gIH1cbik7XG5cbmV4cG9ydCBjb25zdCBNb2RhbCA9IFJlYWN0LmZvcndhcmRSZWY8SFRNTERpdkVsZW1lbnQsIE1vZGFsUHJvcHM+KFxuICAoXG4gICAge1xuICAgICAgYWxsb3dQaW5jaFpvb20sXG4gICAgICBpc0Z1bGxTY3JlZW4sXG4gICAgICBpc09wZW4sXG4gICAgICBvbkRpc21pc3MsXG4gICAgICBkaXNhYmxlRGlzbWlzc09uQ2xpY2tPdXRzaWRlLFxuICAgICAgc2l6ZSA9IDAsXG4gICAgICBvdmVybGF5Q2xhc3NOYW1lLFxuICAgICAgLi4ucm9vdFByb3BzXG4gICAgfSxcbiAgICByZWZcbiAgKSA9PiB7XG4gICAgY29uc3Qgb3duUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gICAgLy8gSWYgYSByZWYgaXMgZm9yd2FyZGVkLCB1c2UgaXQ7IG90aGVyd2lzZSwgdXNlIG91cnNlbHZlcyBhcyB0aGUgcmVmXG4gICAgY29uc3QgdGhpc1JlZiA9IHJlZiB8fCBvd25SZWY7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEFuaW1hdGVQcmVzZW5jZT5cbiAgICAgICAge2lzT3BlbiA/IChcbiAgICAgICAgICA8T3ZlcmxheVxuICAgICAgICAgICAgb3ZlcmxheUNsYXNzTmFtZT17b3ZlcmxheUNsYXNzTmFtZX1cbiAgICAgICAgICAgIGFsbG93UGluY2hab29tPXthbGxvd1BpbmNoWm9vbX1cbiAgICAgICAgICAgIGlzT3Blbj17aXNPcGVufVxuICAgICAgICAgICAgb25EaXNtaXNzPXtvbkRpc21pc3N9XG4gICAgICAgICAgICBkaXNhYmxlRGlzbWlzc09uQ2xpY2tPdXRzaWRlPXtkaXNhYmxlRGlzbWlzc09uQ2xpY2tPdXRzaWRlfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtpc0Z1bGxTY3JlZW4gPyAoXG4gICAgICAgICAgICAgIDxGdWxsU2NyZWVuQ29udGVudFxuICAgICAgICAgICAgICAgIHJlZj17dGhpc1JlZn1cbiAgICAgICAgICAgICAgICBzaXplPXtzaXplfVxuICAgICAgICAgICAgICAgIG9uRGlzbWlzcz17b25EaXNtaXNzfVxuICAgICAgICAgICAgICAgIHsuLi5yb290UHJvcHN9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8Q29udGVudFxuICAgICAgICAgICAgICAgIHJlZj17dGhpc1JlZn1cbiAgICAgICAgICAgICAgICBzaXplPXtzaXplfVxuICAgICAgICAgICAgICAgIG9uRGlzbWlzcz17b25EaXNtaXNzfVxuICAgICAgICAgICAgICAgIHsuLi5yb290UHJvcHN9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvT3ZlcmxheT5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICA8L0FuaW1hdGVQcmVzZW5jZT5cbiAgICApO1xuICB9XG4pO1xuIl19