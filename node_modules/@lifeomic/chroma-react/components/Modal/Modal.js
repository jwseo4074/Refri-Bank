"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ConditionalWrapper_1 = require("../_private/ConditionalWrapper");
var IconButton_1 = require("../IconButton");
var styles_1 = require("../../styles");
var ModalActions_1 = require("./ModalActions");
var framer_motion_1 = require("framer-motion");
var Portal_1 = require("reakit/Portal");
var react_remove_scroll_1 = require("react-remove-scroll");
var Text_1 = require("../Text");
var helpers_1 = require("./helpers");
var chromicons_1 = require("@lifeomic/chromicons");
var clsx_1 = __importDefault(require("clsx"));
var react_focus_lock_1 = __importDefault(require("react-focus-lock"));
var React = __importStar(require("react"));
var ariaDescribedBy = 'modal-content';
var ariaLabelledBy = 'modal-header';
exports.ModalStylesKey = 'ChromaModal';
exports.OVERLAY_TEST_ID = 'chroma-overlay-testid';
exports.useStyles = styles_1.makeStyles(function (theme) { return ({
    overlay: {
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        bottom: 0,
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        left: 0,
        overflow: 'auto',
        position: 'fixed',
        right: 0,
        top: 0,
        zIndex: 1200,
        '@media screen and (max-width: 480px)': {
            justifyContent: 'flex-end',
        },
    },
    content: {
        background: theme.palette.common.white,
        borderRadius: theme.pxToRem(10),
        display: 'flex',
        flexDirection: 'column',
        margin: '10vh auto',
        outline: 'none',
        paddingTop: theme.spacing(0.25),
        paddingBottom: theme.spacing(0.25),
        width: theme.pxToRem(384),
        maxWidth: theme.pxToRem(600),
        overflow: 'hidden',
        '@media screen and (max-width: 480px)': {
            marginBottom: theme.spacing(0.75),
            marginLeft: theme.spacing(0.75),
            marginRight: theme.spacing(0.75),
            maxHeight: '95%',
            maxWidth: '480px',
            width: 'unset',
        },
        '& form': {
            display: 'flex',
            flexDirection: 'column',
            overflow: 'hidden',
        },
    },
    contentFullWidth: {
        width: 'calc(100% - 6rem)',
        '@media screen and (max-width: 480px)': {
            width: 'unset',
        },
    },
    contentSize0: {
        maxHeight: theme.pxToRem(256),
        '@media screen and (max-width: 480px)': {
            maxHeight: 'unset',
        },
    },
    contentSize1: {
        maxHeight: theme.pxToRem(480),
        '@media screen and (max-width: 480px)': {
            maxHeight: 'unset',
        },
    },
    contentFullScreen: {
        background: theme.palette.common.white,
        display: 'flex',
        flexDirection: 'column',
        height: '100%',
        width: '100%',
        zIndex: 1200,
    },
    verticalPadding: {
        paddingLeft: theme.spacing(2),
        paddingRight: theme.spacing(2),
    },
    modalHeader: {
        alignItems: 'center',
        borderBottom: "1px solid " + theme.palette.divider,
        display: 'flex',
        justifyContent: 'space-between',
        '&:only-child': {
            borderBottom: 'none',
        },
    },
    modalHeaderFullScreen: {
        alignItems: 'center',
        backgroundColor: theme.palette.common.white,
        borderBottom: "1px solid " + theme.palette.divider,
        display: 'flex',
        justifyContent: 'space-between',
        paddingBottom: theme.spacing(0.5),
        paddingLeft: theme.spacing(2.5),
        paddingRight: theme.spacing(2.5),
        paddingTop: theme.spacing(0.5),
    },
    modalChildrenContainer: {
        background: theme.palette.background.default,
        // Added padding on the bottom so that the spacing
        // between the title and top of the text ~equals spacing
        // between bottom of content and actions container
        padding: theme.spacing(2, 2, 2.5),
        overflowY: 'auto',
        WebkitOverflowScrolling: 'touch',
    },
    modalChildrenContainerFullScreen: {
        background: theme.palette.grey[50],
        height: '100%',
        overflowY: 'auto',
        padding: theme.spacing(4, 3.75, 4, 3.75),
        width: '100%',
        WebkitOverflowScrolling: 'touch',
    },
    modalActions: {
        // On mobile, we want to do the following:
        // 1) Vertically stack the buttons
        // 2) Reverse the order of the actions.  On mobile devices,
        //    the negative/cancel action is normally at the *bottom*,
        //    whereas our default behavior with standard modals is
        //    <cancel> <save>
        // 3) Target the buttons and set the widths to take 100%
        // 4) Target the height of buttons and make them taller,
        //    just so that users have a larger tap-target
        '@media screen and (max-width: 480px)': {
            display: 'flex',
            flexDirection: 'column-reverse',
            '& > button': {
                width: '100%',
                height: theme.pxToRem(48),
                // Since we are `column-reverse`, margin on the bottom is now
                // margin top
                marginTop: theme.spacing(1),
                '&:last-of-type': {
                    marginTop: 0,
                },
            },
        },
    },
}); }, { name: exports.ModalStylesKey });
var ModalInner = React.forwardRef(function (_a, ref) {
    var allowPinchZoom = _a.allowPinchZoom, overlayClassName = _a.overlayClassName, children = _a.children, onClick = _a.onClick, onDismiss = _a.onDismiss, disableDismissOnClickOutside = _a.disableDismissOnClickOutside, onMouseDown = _a.onMouseDown, onKeyDown = _a.onKeyDown;
    var classes = exports.useStyles({});
    var mouseDownTarget = React.useRef(null);
    var overlayNode = React.useRef(null);
    var thisRef = helpers_1.useForkedRef(overlayNode, ref);
    return (
    // Since we are using FocusLock, we can safely ignore the `autoFocus` ESLint complaint
    // eslint-disable-next-line jsx-a11y/no-autofocus
    React.createElement(react_focus_lock_1.default, { autoFocus: true, returnFocus: true },
        React.createElement(react_remove_scroll_1.RemoveScroll, { allowPinchZoom: allowPinchZoom },
            React.createElement(framer_motion_1.motion.div, { "data-testid": exports.OVERLAY_TEST_ID, className: clsx_1.default(classes.overlay, overlayClassName), onClick: helpers_1.wrapEvent(onClick, function (event) {
                    if (mouseDownTarget.current === event.target) {
                        event.stopPropagation();
                        onDismiss && !disableDismissOnClickOutside && onDismiss(event);
                    }
                }), onMouseDown: helpers_1.wrapEvent(onMouseDown, function (event) {
                    mouseDownTarget.current = event.target;
                }), onKeyDown: helpers_1.wrapEvent(onKeyDown, function (event) {
                    if (event.key === 'Escape') {
                        event.stopPropagation();
                        onDismiss && onDismiss(event);
                    }
                }), ref: thisRef, positionTransition: true, initial: { opacity: 0 }, animate: {
                    opacity: 1,
                    transition: { delay: 0.15, duration: 0.2 },
                }, exit: { opacity: 0, transition: { duration: 0.15 } } }, children))));
});
var Overlay = React.forwardRef(function (_a, ref) {
    var allowPinchZoom = _a.allowPinchZoom, _b = _a.isOpen, isOpen = _b === void 0 ? true : _b, rootProps = __rest(_a, ["allowPinchZoom", "isOpen"]);
    var ownRef = React.useRef(null);
    var thisRef = ref || ownRef;
    return (React.createElement(React.Fragment, null, isOpen ? (React.createElement(Portal_1.Portal, null,
        React.createElement(ModalInner, __assign({ allowPinchZoom: allowPinchZoom, ref: thisRef }, rootProps)))) : null));
});
var Content = React.forwardRef(function (_a, ref) {
    var _b;
    var actions = _a.actions, className = _a.className, children = _a.children, contentClassName = _a.contentClassName, fullWidth = _a.fullWidth, justifyActions = _a.justifyActions, isFormContent = _a.isFormContent, onFormSubmit = _a.onFormSubmit, onClick = _a.onClick, onDismiss = _a.onDismiss, customHeader = _a.customHeader, size = _a.size, title = _a.title, _c = _a.poses, poses = _c === void 0 ? {} : _c, rootProps = __rest(_a, ["actions", "className", "children", "contentClassName", "fullWidth", "justifyActions", "isFormContent", "onFormSubmit", "onClick", "onDismiss", "customHeader", "size", "title", "poses"]);
    var classes = exports.useStyles({});
    var shouldReduceMotion = framer_motion_1.useReducedMotion();
    var poseVariants = {
        init: poses.init || { y: 50, scale: 0.3 },
        open: poses.open || { y: 0, scale: 1 },
        exit: poses.exit || { scale: 0.5, transition: { duration: 0.15 } },
    };
    return (React.createElement(framer_motion_1.motion.div, __assign({ className: clsx_1.default(classes.content, fullWidth && classes.contentFullWidth, className), role: "dialog", "aria-modal": "true", "aria-describedby": ariaDescribedBy, "aria-labelledby": ariaLabelledBy, tabIndex: -1, onClick: helpers_1.wrapEvent(onClick, function (event) {
            event.stopPropagation();
        }), ref: ref, variants: poseVariants, initial: shouldReduceMotion ? {} : 'init', animate: shouldReduceMotion ? {} : 'open', exit: shouldReduceMotion ? {} : 'exit' }, rootProps),
        customHeader ? (customHeader) : (React.createElement("div", { id: ariaLabelledBy, className: clsx_1.default(classes.modalHeader, classes.verticalPadding) },
            !!title && (React.createElement(Text_1.Text, { size: "subbody", weight: "bold" }, title)),
            React.createElement(IconButton_1.IconButton, { "aria-label": "Close open modal", icon: chromicons_1.X, size: 0, tabIndex: 0, onClick: onDismiss, paddingRight: 0 }))),
        React.createElement(ConditionalWrapper_1.ConditionalWrapper, { condition: Boolean(isFormContent && onFormSubmit), wrapper: function (children) { return (React.createElement("form", { onSubmit: onFormSubmit }, children)); } },
            children && (React.createElement("div", { id: ariaDescribedBy, className: clsx_1.default(classes.modalChildrenContainer, classes.verticalPadding, (_b = {},
                    _b[classes.contentSize0] = size === 0,
                    _b[classes.contentSize1] = size === 1,
                    _b), contentClassName) }, children)),
            !!actions && (React.createElement(ModalActions_1.ModalActions, { className: clsx_1.default(classes.modalActions, classes.verticalPadding), justify: justifyActions }, actions)))));
});
var FullScreenContent = React.forwardRef(function (_a, ref) {
    var children = _a.children, className = _a.className, contentClassName = _a.contentClassName, onClick = _a.onClick, onDismiss = _a.onDismiss, title = _a.title, customHeader = _a.customHeader, rootProps = __rest(_a, ["children", "className", "contentClassName", "onClick", "onDismiss", "title", "customHeader"]);
    var classes = exports.useStyles({});
    return (React.createElement(framer_motion_1.motion.div, __assign({ className: clsx_1.default(classes.contentFullScreen, className), role: "dialog", "aria-modal": "true", "aria-describedby": ariaDescribedBy, "aria-labelledby": ariaLabelledBy, tabIndex: -1, onClick: helpers_1.wrapEvent(onClick, function (event) {
            event.stopPropagation();
        }), ref: ref, initial: { opacity: 0 }, animate: {
            opacity: 1,
            transition: { duration: 0.1, ease: [0.16, 1, 0.3, 1] },
        }, exit: {
            opacity: 0,
            transition: { duration: 0.08, ease: [0.7, 0, 0.84, 0] },
        } }, rootProps),
        customHeader ? (customHeader) : (React.createElement("div", { id: ariaLabelledBy, className: classes.modalHeaderFullScreen },
            !!title && React.createElement(Text_1.Text, { size: "subbody" }, title),
            React.createElement(IconButton_1.IconButton, { "aria-label": "Close open modal", icon: chromicons_1.X, size: 0, tabIndex: 0, onClick: onDismiss, paddingRight: 0 }))),
        React.createElement("div", { id: ariaDescribedBy, className: clsx_1.default(classes.modalChildrenContainerFullScreen, contentClassName) }, children)));
});
exports.Modal = React.forwardRef(function (_a, ref) {
    var allowPinchZoom = _a.allowPinchZoom, isFullScreen = _a.isFullScreen, isOpen = _a.isOpen, onDismiss = _a.onDismiss, disableDismissOnClickOutside = _a.disableDismissOnClickOutside, _b = _a.size, size = _b === void 0 ? 0 : _b, overlayClassName = _a.overlayClassName, rootProps = __rest(_a, ["allowPinchZoom", "isFullScreen", "isOpen", "onDismiss", "disableDismissOnClickOutside", "size", "overlayClassName"]);
    var ownRef = React.useRef(null);
    // If a ref is forwarded, use it; otherwise, use ourselves as the ref
    var thisRef = ref || ownRef;
    return (React.createElement(framer_motion_1.AnimatePresence, null, isOpen ? (React.createElement(Overlay, { overlayClassName: overlayClassName, allowPinchZoom: allowPinchZoom, isOpen: isOpen, onDismiss: onDismiss, disableDismissOnClickOutside: disableDismissOnClickOutside }, isFullScreen ? (React.createElement(FullScreenContent, __assign({ ref: thisRef, size: size, onDismiss: onDismiss }, rootProps))) : (React.createElement(Content, __assign({ ref: thisRef, size: size, onDismiss: onDismiss }, rootProps))))) : null));
});
//# sourceMappingURL=data:application/json;base64,