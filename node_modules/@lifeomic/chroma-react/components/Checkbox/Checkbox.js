"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Checkbox = exports.useStyles = exports.CheckboxStylesKey = void 0;
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var styles_1 = require("../../styles");
var forms_1 = require("../_private/forms");
var UniqueId_1 = require("../_private/UniqueId");
var Text_1 = require("../Text");
var framer_motion_1 = require("framer-motion");
require("focus-visible");
var screenreaderOnly_1 = require("../../styles/screenreaderOnly");
exports.CheckboxStylesKey = 'ChromaCheckbox';
exports.useStyles = (0, styles_1.makeStyles)(function (theme) { return ({
    root: {
        // All values that are animated to/from need to be specified as css variables for the
        // framer-motion library to handle the animations correctly (no mix of hex/rgb + variables)
        '--checkbox-primary': theme.palette.primary.main,
        '--checkbox-emphasis': theme.palette.primary[900],
        '--checkbox-secondary': theme.palette.graphite[100],
        '--checkbox-secondary-emphasis': theme.palette.graphite[900],
        '--checkbox-error': theme.palette.error[900],
        '--checkbox-inverse': theme.palette.common.white,
        '--tick-primary': theme.palette.common.white,
        '--tick-disabled': theme.palette.black[400],
        display: 'flex',
        flexFlow: 'column',
        position: 'relative',
        '& > p': {
            marginLeft: theme.pxToRem(29),
        },
    },
    input: {
        cursor: 'pointer',
        height: theme.pxToRem(16),
        left: 0,
        opacity: 0,
        position: 'absolute',
        transition: '0.35s ease-in',
        top: 0,
        width: theme.pxToRem(16),
        '&:disabled, &:disabled + $labelContainer, &:disabled + $labelContainer *': {
            cursor: 'not-allowed',
        },
        '&:focus.focus-visible + $labelContainer $box': {
            stroke: theme.palette.primary.main,
            strokeOpacity: 0.5,
            strokeWidth: 2.5,
            transition: '0.35s ease-out',
        },
    },
    inputInverse: {
        '&:focus.focus-visible + $labelContainer $box': {
            stroke: theme.palette.common.white,
        },
    },
    labelContainer: {
        flex: 1,
        zIndex: 2,
    },
    label: {
        cursor: 'pointer',
        display: 'inline-flex',
        marginBottom: 0,
        verticalAlign: 'top',
        '& p': {
            lineHeight: 1.25,
            marginTop: theme.spacing(0.25),
            marginLeft: theme.spacing(1),
        },
    },
    labelInverse: {
        color: theme.palette.common.white,
    },
    svg: {
        minWidth: theme.pxToRem(21),
        minHeight: theme.pxToRem(21),
        zIndex: 2,
    },
    box: {},
    srOnly: __assign({}, screenreaderOnly_1.screenreaderOnlyStyles),
}); }, { name: exports.CheckboxStylesKey });
var getBoxVariants = function (_a) {
    var disabled = _a.disabled, hasError = _a.hasError, color = _a.color;
    if (disabled && color === 'default') {
        return disabledDefaultBoxVariants;
    }
    if (disabled && color === 'inverse') {
        return disabledInverseBoxVariants;
    }
    if (hasError && color === 'default') {
        return defaultHasErrorBoxVariants;
    }
    if (hasError && color === 'inverse') {
        return inverseHasErrorBoxVariants;
    }
    if (color === 'inverse') {
        return boxInverseVariants;
    }
    return boxVariants;
};
var getTickVariants = function (_a) {
    var disabled = _a.disabled, color = _a.color, indeterminate = _a.indeterminate;
    if (disabled && color === 'inverse') {
        return disabledInverseTickVariants;
    }
    if (disabled && indeterminate) {
        return indeterminateDisabledTickVariants;
    }
    if (disabled) {
        return disabledDefaultTickVariants;
    }
    if (indeterminate) {
        return indeterminateDefaultTickVariants;
    }
    return tickVariants;
};
var tickVariants = {
    pressed: function (isChecked) { return ({
        pathLength: isChecked ? 0.85 : 0.2,
    }); },
    checked: {
        pathLength: 1,
        stroke: 'var(--tick-primary)',
        strokeOpacity: 1,
    },
    unchecked: { pathLength: 0 },
};
var disabledDefaultTickVariants = {
    checked: {
        stroke: 'var(--tick-disabled)',
        strokeOpacity: 0.65,
        pathLength: 1,
    },
    unchecked: {
        pathLength: 0,
        stroke: 'var(--tick-disabled)',
        strokeOpacity: 0.65,
    },
};
var disabledInverseTickVariants = {
    checked: {
        pathLength: 1,
        stroke: 'var(--tick-primary)',
        strokeOpacity: 0.65,
    },
    unchecked: {
        pathLength: 0,
        stroke: 'var(--tick-primary)',
        strokeOpacity: 0.65,
    },
};
var indeterminateDefaultTickVariants = {
    checked: {
        pathLength: 1,
        stroke: 'var(--tick-primary)',
    },
    unchecked: {
        pathLength: 0,
        stroke: 'var(--tick-primary)',
    },
};
var indeterminateDisabledTickVariants = {
    checked: {
        pathLength: 1,
        stroke: 'var(--tick-disabled)',
        strokeOpacity: 0.65,
    },
    unchecked: {
        pathLength: 0,
        stroke: 'var(--tick-disabled)',
        strokeOpacity: 0.65,
    },
};
var checkedBox = {
    fill: 'var(--checkbox-primary)',
    fillOpacity: 1,
    stroke: 'var(--checkbox-primary)',
    strokeWidth: 0,
};
var hoverBox = {
    strokeOpacity: 1,
    strokeWidth: 2,
};
var pressedBox = {
    fill: 'var(--checkbox-emphasis)',
    fillOpacity: 1,
    scale: 0.9,
    stroke: 'var(--checkbox-emphasis)',
};
var errorUncheckedBox = {
    fill: 'var(--checkbox-secondary)',
    fillOpacity: 0.25,
    stroke: 'var(--checkbox-error)',
    strokeOpacity: 1,
    strokeWidth: 1,
};
var disabledBox = {
    fill: 'var(--checkbox-secondary)',
    fillOpacity: 0.5,
    strokeWidth: 0,
};
var disabledInverseBox = {
    fill: 'var(--checkbox-secondary)',
    fillOpacity: 0.1,
    stroke: 'var(--checkbox-secondary)',
    strokeOpacity: 0.25,
    strokeWidth: 1,
};
var inverseBox = {
    fill: 'var(--checkbox-secondary)',
    fillOpacity: 0.1,
    stroke: 'var(--checkbox-secondary)',
    strokeOpacity: 0.55,
    strokeWidth: 1,
};
var boxVariants = {
    hover: __assign(__assign({}, hoverBox), { stroke: 'var(--checkbox-primary)' }),
    pressed: pressedBox,
    checked: checkedBox,
    unchecked: {
        fill: 'var(--checkbox-secondary-emphasis)',
        fillOpacity: 0.15,
        stroke: 'var(--checkbox-primary)',
    },
};
var boxInverseVariants = {
    hover: __assign(__assign({}, hoverBox), { stroke: 'var(--checkbox-inverse)' }),
    pressed: pressedBox,
    checked: inverseBox,
    unchecked: inverseBox,
};
var disabledDefaultBoxVariants = {
    checked: disabledBox,
    unchecked: disabledBox,
};
var disabledInverseBoxVariants = {
    checked: disabledInverseBox,
    unchecked: disabledInverseBox,
};
var defaultHasErrorBoxVariants = {
    hover: __assign(__assign({}, hoverBox), { stroke: 'var(--checkbox-error)' }),
    pressed: pressedBox,
    checked: checkedBox,
    unchecked: errorUncheckedBox,
};
var inverseHasErrorBoxVariants = {
    hover: __assign(__assign({}, hoverBox), { stroke: 'var(--checkbox-error)' }),
    pressed: pressedBox,
    checked: inverseBox,
    unchecked: errorUncheckedBox,
};
exports.Checkbox = React.forwardRef(function (_a, ref) {
    var _b;
    var ariaLabel = _a["aria-label"], checked = _a.checked, className = _a.className, additionalClasses = _a.classes, _c = _a.color, color = _c === void 0 ? 'default' : _c, _d = _a.disabled, disabled = _d === void 0 ? false : _d, errorMessage = _a.errorMessage, hasError = _a.hasError, helpMessage = _a.helpMessage, _e = _a.indeterminate, indeterminate = _e === void 0 ? false : _e, id = _a.id, label = _a.label, name = _a.name, rootProps = __rest(_a, ['aria-label', "checked", "className", "classes", "color", "disabled", "errorMessage", "hasError", "helpMessage", "indeterminate", "id", "label", "name"]);
    var classes = (0, exports.useStyles)({ classes: additionalClasses });
    var uniqueId = React.useState(function () { return id || name || (0, UniqueId_1.generateUniqueId)('checkbox-'); })[0];
    var pathLength = (0, framer_motion_1.useMotionValue)(0);
    var opacity = (0, framer_motion_1.useTransform)(pathLength, [0.05, 0.15], [0, 1]);
    if (!label && !ariaLabel && process.env.NODE_ENV === 'development') {
        throw new Error('If a "label" is not provided to Checkbox, please provide "aria-label".');
    }
    var variant = [
        checked ? 'checked' : 'unchecked',
        disabled ? 'disabled' : 'enabled',
    ];
    return (React.createElement(framer_motion_1.motion.div, { className: (0, clsx_1.default)(classes.root, className), animate: variant, initial: false, whileHover: "hover", whileTap: "pressed" },
        React.createElement("input", __assign({ "aria-describedby": (0, forms_1.buildDescribedBy)({
                hasError: hasError,
                hasHelpMessage: !!helpMessage,
                uniqueId: uniqueId,
            }), "aria-checked": checked && !indeterminate
                ? 'true'
                : !checked && !indeterminate
                    ? 'false'
                    : !checked && indeterminate
                        ? 'mixed'
                        : 'false', className: (0, clsx_1.default)(classes.input, (_b = {},
                _b[classes.inputInverse] = color === 'inverse',
                _b)), ref: ref, type: "checkbox", id: uniqueId, name: name, checked: checked, disabled: disabled, tabIndex: 0 }, rootProps)),
        React.createElement("div", { className: classes.labelContainer },
            React.createElement(framer_motion_1.motion.label, { className: classes.label, htmlFor: uniqueId, animate: variant, whileHover: "hover", whileTap: "pressed" },
                React.createElement(framer_motion_1.motion.svg, { className: classes.svg, width: "21", height: "21", viewBox: "0 0 21 21" },
                    React.createElement(framer_motion_1.motion.path, { className: classes.box, d: "M1,5.524A4.523,4.523,0,0,1,5.524,1h9.952A4.523,4.523,0,0,1,20,5.524v9.952A4.523,4.523,0,0,1,15.476,20H5.524A4.523,4.523,0,0,1,1,15.476Z", fill: "transparent", stroke: "var(--checkbox-secondary-emphasis)", strokeOpacity: "0", strokeMiterlimit: "10", strokeWidth: "2", variants: getBoxVariants({
                            disabled: disabled,
                            hasError: hasError,
                            color: color,
                        }) }),
                    indeterminate && disabled ? (React.createElement(framer_motion_1.motion.path, { d: "M6.5,10.458h8", fill: "transparent", strokeWidth: "2.25", stroke: "#FFFFFF", strokeLinecap: "round", strokeLinejoin: "round", style: { pathLength: pathLength, opacity: opacity }, custom: checked, variants: getTickVariants({
                            disabled: disabled,
                            indeterminate: indeterminate,
                            color: color,
                        }) })) : indeterminate ? (React.createElement(React.Fragment, null,
                        React.createElement(framer_motion_1.motion.path, { d: "M10.5,10.458h-4", fill: "transparent", strokeWidth: "2.25", stroke: "#FFFFFF", strokeLinecap: "round", strokeLinejoin: "round", style: { pathLength: pathLength, opacity: opacity }, custom: checked, variants: getTickVariants({
                                disabled: disabled,
                                indeterminate: indeterminate,
                                color: color,
                            }) }),
                        React.createElement(framer_motion_1.motion.path, { d: "M10.5,10.458h4", fill: "transparent", strokeWidth: "2.25", stroke: "#FFFFFF", strokeLinecap: "round", strokeLinejoin: "round", style: { pathLength: pathLength, opacity: opacity }, custom: checked, variants: getTickVariants({
                                disabled: disabled,
                                indeterminate: indeterminate,
                                color: color,
                            }) }))) : (React.createElement(framer_motion_1.motion.path, { d: "M5.761,11.962l2.187,2.187,7.291-7.3", fill: "transparent", strokeWidth: "2.25", stroke: "#FFFFFF", strokeOpacity: "1", strokeLinecap: "round", strokeLinejoin: "round", style: { pathLength: pathLength, opacity: opacity }, custom: checked, variants: getTickVariants({ disabled: disabled, indeterminate: indeterminate, color: color }) }))),
                React.createElement(Text_1.Text, { size: "subbody", className: (0, clsx_1.default)(color === 'inverse' ? classes.labelInverse : undefined, !label && ariaLabel && classes.srOnly) }, label || ariaLabel))),
        helpMessage && (React.createElement(forms_1.FormHelpMessage, { color: color, rootElementId: uniqueId, describedById: (0, forms_1.helpFor)(uniqueId) }, helpMessage)),
        hasError && (React.createElement(forms_1.FormErrorMessage, { color: color, rootElementId: uniqueId, describedById: (0, forms_1.errorFor)(uniqueId) }, errorMessage))));
});
//# sourceMappingURL=data:application/json;base64,