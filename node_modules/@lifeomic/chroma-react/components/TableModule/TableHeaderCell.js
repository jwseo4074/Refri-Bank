"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var chromicons_1 = require("@lifeomic/chromicons");
var index_1 = require("../../styles/index");
exports.TableHeaderCellStylesKey = 'ChromaTableHeaderCell';
exports.useStyles = index_1.makeStyles(function (theme) { return ({
    root: {
        transition: 'color 0.25s ease',
        background: theme.palette.common.white,
        borderCollapse: 'collapse',
        borderSpacing: 0,
        fontSize: theme.typography.caption.fontSize,
        fontWeight: theme.typography.fontWeightBold,
        lineHeight: theme.pxToRem(22),
        paddingBottom: theme.spacing(1.75),
        paddingLeft: theme.spacing(2),
        // Intentional additional padding-right to account for the
        // sort chevron
        paddingRight: theme.spacing(2.5),
        paddingTop: theme.spacing(1.75),
        position: 'sticky',
        textAlign: 'left',
        top: 0,
        whiteSpace: 'nowrap',
        zIndex: 3,
        '&::after': {
            content: "''",
            position: 'absolute',
            left: 0,
            width: '100%',
            bottom: 0,
            borderBottom: "4px solid " + theme.palette.primary.main,
        },
        // First and last headers have additional spacing intentionally
        '&:first-child': {
            paddingLeft: theme.spacing(4),
        },
        '&:last-child': {
            paddingRight: theme.spacing(4),
        },
    },
    rootAlignRight: {
        textAlign: 'right',
    },
    rootPeekIconHover: {
        '&:hover': {
            '& > svg': {
                display: 'inline',
            },
        },
    },
    clickable: {
        cursor: 'pointer',
        userSelect: 'none',
        '&:hover': {
            color: theme.palette.black[500],
            '& > *': {
                color: theme.palette.black[500],
            },
        },
    },
    icon: {
        transition: 'color 0.25s ease, opacity 0.25s ease, transform 0.25s ease',
        margin: theme.spacing(0.375, 0, 0, 0.5),
        color: theme.palette.black.main,
        position: 'absolute',
        top: '25%',
    },
    peekIcon: {
        // we rely on hovering of the root element to set this to
        // visible (see rootPeekIconHover)
        display: 'none',
        opacity: 0.5,
    },
    rotatedIcon: {
        transform: 'rotate(180deg)',
    },
}); }, { name: exports.TableHeaderCellStylesKey });
exports.TableHeaderCell = function (_a) {
    var header = _a.header, _b = _a.isSorting, isSorting = _b === void 0 ? false : _b, sortDirection = _a.sortDirection, onClick = _a.onClick, index = _a.index, headingsCount = _a.headingsCount, rootProps = __rest(_a, ["header", "isSorting", "sortDirection", "onClick", "index", "headingsCount"]);
    var classes = exports.useStyles({});
    var handleClick = function () {
        onClick === null || onClick === void 0 ? void 0 : onClick({ index: index, sortDirection: sortDirection, header: header });
    };
    var canSort = onClick && header.onSort;
    var Tag = !(header === null || header === void 0 ? void 0 : header.content) && !header.label ? 'td' : 'th';
    return (React.createElement(Tag, __assign({ className: clsx_1.default(classes.root, header.onSort && classes.clickable, canSort && classes.rootPeekIconHover, 
        // Rules of alignment:
        // - `header.align` wins over default behavior
        // - If this is the first header and there is only one column for the table
        //   then it is left-aligned
        // - If this is the last header and there is more than one column, then
        //   it is right-aligned
        // - Allow for left alignment override on last header
        // - Fallback behavior is left aligned (specified by root class)
        ((!header.align && headingsCount > 1 && index === headingsCount - 1) ||
            (header === null || header === void 0 ? void 0 : header.align) === 'right') &&
            classes.rootAlignRight, header.className), onClick: canSort ? handleClick : undefined, role: "columnheader", "aria-sort": !isSorting || !sortDirection
            ? 'none'
            : sortDirection === 'asc'
                ? 'ascending'
                : 'descending' }, rootProps),
        header.content ? header.content(header) : header.label,
        (!sortDirection || !isSorting) && canSort && (React.createElement(chromicons_1.ChevronDown, { className: clsx_1.default(classes.icon, classes.peekIcon, classes.rotatedIcon), role: "img", "aria-hidden": true, width: 18, height: 18 })),
        isSorting && sortDirection && (React.createElement(chromicons_1.ChevronDown, { className: clsx_1.default(classes.icon, sortDirection === 'asc' && classes.rotatedIcon), role: "img", "aria-hidden": true, width: 18, height: 18 }))));
};
//# sourceMappingURL=data:application/json;base64,