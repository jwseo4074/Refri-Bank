"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var react_router_dom_1 = require("react-router-dom");
var styles_1 = require("../../styles");
exports.LinkStylesKey = 'ChromaLink';
exports.useStyles = styles_1.makeStyles(function (theme) { return ({
    root: {
        color: theme.palette.primary.main,
        transition: 'color 0.25s ease',
        textDecoration: 'none',
        '&:hover': {
            color: theme.palette.primary[900],
            textDecoration: 'underline',
        },
    },
    inverse: {
        color: 'rgba(255, 255, 255, 0.9)',
        '&:hover': {
            color: theme.palette.common.white,
        },
    },
}); }, { name: exports.LinkStylesKey });
exports.Link = function (_a) {
    var _b, _c;
    var to = _a.to, children = _a.children, className = _a.className, _d = _a.color, color = _d === void 0 ? 'default' : _d, newTab = _a.newTab, dataTestId = _a["data-testid"], rootProps = __rest(_a, ["to", "children", "className", "color", "newTab", 'data-testid']);
    var classes = exports.useStyles({});
    if (newTab) {
        return (React.createElement("a", { target: "_blank", rel: "noopener noreferrer", href: to, className: clsx_1.default(classes.root, (_b = {}, _b[classes.inverse] = color === 'inverse', _b), className), "data-testid": dataTestId, onClick: rootProps.onClick
                ? rootProps.onClick
                : undefined }, children));
    }
    return (React.createElement(react_router_dom_1.NavLink, __assign({ to: to, className: clsx_1.default(classes.root, (_c = {}, _c[classes.inverse] = color === 'inverse', _c), className), "data-testid": dataTestId }, rootProps), children));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGluay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0xpbmsvTGluay50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDhDQUF3QjtBQUN4QiwyQ0FBK0I7QUFDL0IscURBRzBCO0FBQzFCLHVDQUEwQztBQUc3QixRQUFBLGFBQWEsR0FBRyxZQUFZLENBQUM7QUFFN0IsUUFBQSxTQUFTLEdBQUcsbUJBQVUsQ0FDakMsVUFBQyxLQUFLLElBQUssT0FBQSxDQUFDO0lBQ1YsSUFBSSxFQUFFO1FBQ0osS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUk7UUFDakMsVUFBVSxFQUFFLGtCQUFrQjtRQUM5QixjQUFjLEVBQUUsTUFBTTtRQUN0QixTQUFTLEVBQUU7WUFDVCxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQ2pDLGNBQWMsRUFBRSxXQUFXO1NBQzVCO0tBQ0Y7SUFDRCxPQUFPLEVBQUU7UUFDUCxLQUFLLEVBQUUsMEJBQTBCO1FBQ2pDLFNBQVMsRUFBRTtZQUNULEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLO1NBQ2xDO0tBQ0Y7Q0FDRixDQUFDLEVBaEJTLENBZ0JULEVBQ0YsRUFBRSxJQUFJLEVBQUUscUJBQWEsRUFBRSxDQUN4QixDQUFDO0FBZ0JXLFFBQUEsSUFBSSxHQUF3QixVQUFDLEVBUXpDOztJQVBDLElBQUEsVUFBRSxFQUNGLHNCQUFRLEVBQ1Isd0JBQVMsRUFDVCxhQUFpQixFQUFqQixzQ0FBaUIsRUFDakIsa0JBQU0sRUFDTiw4QkFBeUIsRUFDekIseUZBQVk7SUFFWixJQUFNLE9BQU8sR0FBRyxpQkFBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTlCLElBQUksTUFBTSxFQUFFO1FBQ1YsT0FBTyxDQUNMLDJCQUNFLE1BQU0sRUFBQyxRQUFRLEVBQ2YsR0FBRyxFQUFDLHFCQUFxQixFQUN6QixJQUFJLEVBQUUsRUFBWSxFQUNsQixTQUFTLEVBQUUsY0FBSSxDQUNiLE9BQU8sQ0FBQyxJQUFJLFlBQ1YsR0FBQyxPQUFPLENBQUMsT0FBTyxJQUFHLEtBQUssS0FBSyxTQUFTLE9BQ3hDLFNBQVMsQ0FDVixpQkFDWSxVQUFVLEVBQ3ZCLE9BQU8sRUFDTCxTQUFTLENBQUMsT0FBTztnQkFDZixDQUFDLENBQUUsU0FBUyxDQUFDLE9BSUc7Z0JBQ2hCLENBQUMsQ0FBQyxTQUFTLElBR2QsUUFBUSxDQUNQLENBQ0wsQ0FBQztLQUNIO0lBRUQsT0FBTyxDQUNMLG9CQUFDLDBCQUFPLGFBQ04sRUFBRSxFQUFFLEVBQUUsRUFDTixTQUFTLEVBQUUsY0FBSSxDQUNiLE9BQU8sQ0FBQyxJQUFJLFlBQ1YsR0FBQyxPQUFPLENBQUMsT0FBTyxJQUFHLEtBQUssS0FBSyxTQUFTLE9BQ3hDLFNBQVMsQ0FDVixpQkFDWSxVQUFVLElBQ25CLFNBQVMsR0FFWixRQUFRLENBQ0QsQ0FDWCxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBOYXZMaW5rLFxuICBOYXZMaW5rUHJvcHMgYXMgUm91dGVyRG9tTmF2TGlua1Byb3BzLFxufSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICcuLi8uLi9zdHlsZXMnO1xuaW1wb3J0IHsgR2V0Q2xhc3NlcyB9IGZyb20gJy4uLy4uL3R5cGVVdGlscyc7XG5cbmV4cG9ydCBjb25zdCBMaW5rU3R5bGVzS2V5ID0gJ0Nocm9tYUxpbmsnO1xuXG5leHBvcnQgY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhcbiAgKHRoZW1lKSA9PiAoe1xuICAgIHJvb3Q6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgIHRyYW5zaXRpb246ICdjb2xvciAwLjI1cyBlYXNlJyxcbiAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeVs5MDBdLFxuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ3VuZGVybGluZScsXG4gICAgICB9LFxuICAgIH0sXG4gICAgaW52ZXJzZToge1xuICAgICAgY29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOSknLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSksXG4gIHsgbmFtZTogTGlua1N0eWxlc0tleSB9XG4pO1xuXG5leHBvcnQgdHlwZSBMaW5rQ2xhc3NlcyA9IEdldENsYXNzZXM8dHlwZW9mIHVzZVN0eWxlcz47XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlua1Byb3BzXG4gIGV4dGVuZHMgUm91dGVyRG9tTmF2TGlua1Byb3BzPFxuICAgIFJlYWN0LkRldGFpbGVkSFRNTFByb3BzPFxuICAgICAgUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTEFuY2hvckVsZW1lbnQ+LFxuICAgICAgSFRNTEFuY2hvckVsZW1lbnRcbiAgICA+XG4gID4ge1xuICBbJ2RhdGEtdGVzdGlkJ10/OiBzdHJpbmc7XG4gIG5ld1RhYj86IGJvb2xlYW47XG4gIGNvbG9yPzogJ2RlZmF1bHQnIHwgJ2ludmVyc2UnO1xufVxuXG5leHBvcnQgY29uc3QgTGluazogUmVhY3QuRkM8TGlua1Byb3BzPiA9ICh7XG4gIHRvLFxuICBjaGlsZHJlbixcbiAgY2xhc3NOYW1lLFxuICBjb2xvciA9ICdkZWZhdWx0JyxcbiAgbmV3VGFiLFxuICAnZGF0YS10ZXN0aWQnOiBkYXRhVGVzdElkLFxuICAuLi5yb290UHJvcHNcbn0pID0+IHtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcyh7fSk7XG5cbiAgaWYgKG5ld1RhYikge1xuICAgIHJldHVybiAoXG4gICAgICA8YVxuICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgaHJlZj17dG8gYXMgc3RyaW5nfVxuICAgICAgICBjbGFzc05hbWU9e2Nsc3goXG4gICAgICAgICAgY2xhc3Nlcy5yb290LFxuICAgICAgICAgIHsgW2NsYXNzZXMuaW52ZXJzZV06IGNvbG9yID09PSAnaW52ZXJzZScgfSxcbiAgICAgICAgICBjbGFzc05hbWVcbiAgICAgICAgKX1cbiAgICAgICAgZGF0YS10ZXN0aWQ9e2RhdGFUZXN0SWR9XG4gICAgICAgIG9uQ2xpY2s9e1xuICAgICAgICAgIHJvb3RQcm9wcy5vbkNsaWNrXG4gICAgICAgICAgICA/IChyb290UHJvcHMub25DbGljayBhc1xuICAgICAgICAgICAgICAgIHwgKChcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEFuY2hvckVsZW1lbnQsIE1vdXNlRXZlbnQ+XG4gICAgICAgICAgICAgICAgICApID0+IHZvaWQpXG4gICAgICAgICAgICAgICAgfCB1bmRlZmluZWQpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvYT5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8TmF2TGlua1xuICAgICAgdG89e3RvfVxuICAgICAgY2xhc3NOYW1lPXtjbHN4KFxuICAgICAgICBjbGFzc2VzLnJvb3QsXG4gICAgICAgIHsgW2NsYXNzZXMuaW52ZXJzZV06IGNvbG9yID09PSAnaW52ZXJzZScgfSxcbiAgICAgICAgY2xhc3NOYW1lXG4gICAgICApfVxuICAgICAgZGF0YS10ZXN0aWQ9e2RhdGFUZXN0SWR9XG4gICAgICB7Li4ucm9vdFByb3BzfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L05hdkxpbms+XG4gICk7XG59O1xuIl19