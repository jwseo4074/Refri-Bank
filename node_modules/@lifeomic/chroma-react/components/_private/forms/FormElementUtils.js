"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.helpFor = exports.errorFor = exports.buildDescribedBy = void 0;
/**
 * A utility function to build the `aria-describedby` attribute.
 *
 * @param hasError - Boolean to define if component has an error
 * @param hasHelpMessage - Boolean to define if component has a help message
 * @param uniqueId - Unique identifier for the element.
 */
var buildDescribedBy = function (_a) {
    var hasError = _a.hasError, hasHelpMessage = _a.hasHelpMessage, uniqueId = _a.uniqueId;
    if (!exports.buildDescribedBy || (!hasHelpMessage && !hasError)) {
        // Type requires either string | undefined
        return undefined;
    }
    if (hasError && hasHelpMessage) {
        return "".concat((0, exports.errorFor)(uniqueId), " ").concat((0, exports.helpFor)(uniqueId));
    }
    if (hasError) {
        return (0, exports.errorFor)(uniqueId);
    }
    if (hasHelpMessage) {
        return (0, exports.helpFor)(uniqueId);
    }
};
exports.buildDescribedBy = buildDescribedBy;
var errorFor = function (uniqueId) { return "error-for-".concat(uniqueId); };
exports.errorFor = errorFor;
var helpFor = function (uniqueId) { return "help-for-".concat(uniqueId); };
exports.helpFor = helpFor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9ybUVsZW1lbnRVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL19wcml2YXRlL2Zvcm1zL0Zvcm1FbGVtZW50VXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBbURBOzs7Ozs7R0FNRztBQUNJLElBQU0sZ0JBQWdCLEdBQUcsVUFBQyxFQUlUO1FBSHRCLFFBQVEsY0FBQSxFQUNSLGNBQWMsb0JBQUEsRUFDZCxRQUFRLGNBQUE7SUFFUixJQUFJLENBQUMsd0JBQWdCLElBQUksQ0FBQyxDQUFDLGNBQWMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ3ZELDBDQUEwQztRQUMxQyxPQUFPLFNBQVMsQ0FBQztLQUNsQjtJQUVELElBQUksUUFBUSxJQUFJLGNBQWMsRUFBRTtRQUM5QixPQUFPLFVBQUcsSUFBQSxnQkFBUSxFQUFDLFFBQVEsQ0FBQyxjQUFJLElBQUEsZUFBTyxFQUFDLFFBQVEsQ0FBQyxDQUFFLENBQUM7S0FDckQ7SUFFRCxJQUFJLFFBQVEsRUFBRTtRQUNaLE9BQU8sSUFBQSxnQkFBUSxFQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQzNCO0lBRUQsSUFBSSxjQUFjLEVBQUU7UUFDbEIsT0FBTyxJQUFBLGVBQU8sRUFBQyxRQUFRLENBQUMsQ0FBQztLQUMxQjtBQUNILENBQUMsQ0FBQztBQXJCVyxRQUFBLGdCQUFnQixvQkFxQjNCO0FBRUssSUFBTSxRQUFRLEdBQUcsVUFBQyxRQUFnQixJQUFLLE9BQUEsb0JBQWEsUUFBUSxDQUFFLEVBQXZCLENBQXVCLENBQUM7QUFBekQsUUFBQSxRQUFRLFlBQWlEO0FBQy9ELElBQU0sT0FBTyxHQUFHLFVBQUMsUUFBZ0IsSUFBSyxPQUFBLG1CQUFZLFFBQVEsQ0FBRSxFQUF0QixDQUFzQixDQUFDO0FBQXZELFFBQUEsT0FBTyxXQUFnRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGRlc2NyaXB0aW9uIEJhc2UgaW50ZXJmYWNlIGZvciBhbGwgZm9ybSBjb21wb25lbnRzLiAgRXh0ZW5kcyB0aGUgPGlucHV0IC8+XG4gKiBlbGVtZW50IHByb3BzLiAgQWxsb3dzIGZvciBSZWFjdE5vZGUgb24gbGFiZWwgcHJvcC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYXNlRm9ybUVsZW1lbnRXaXRoTm9kZUxhYmVsXG4gIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPCdpbnB1dCc+IHtcbiAgY29sb3I/OiAnZGVmYXVsdCcgfCAnaW52ZXJzZSc7XG4gIGhhc0Vycm9yPzogYm9vbGVhbjtcbiAgZXJyb3JNZXNzYWdlPzogc3RyaW5nO1xuICBoZWxwTWVzc2FnZT86IHN0cmluZztcbiAgbGFiZWw6IHN0cmluZyB8IFJlYWN0LlJlYWN0Tm9kZTtcbn1cblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gQmFzZSBpbnRlcmZhY2UgZm9yIGFsbCBmb3JtIGNvbXBvbmVudHMuICBFeHRlbmRzIHRoZSA8aW5wdXQgLz5cbiAqIGVsZW1lbnQgcHJvcHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUZvcm1FbGVtZW50IGV4dGVuZHMgQmFzZUZvcm1FbGVtZW50V2l0aE5vZGVMYWJlbCB7XG4gIGxhYmVsOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIEJhc2UgaW50ZXJmYWNlIGZvciBmb3JtIG1lc3NhZ2VzLiAgVGhlc2UgYXJlIHR5cGljYWxseSBoZWxwXG4gKiBvciBlcnJvciBtZXNzYWdlcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYXNlRm9ybU1lc3NhZ2Uge1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBjb2xvcj86ICdkZWZhdWx0JyB8ICdpbnZlcnNlJztcbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBUaGUgcm9vdCBmb3JtIGVsZW1lbnQgXCJpZFwiLiAgVGhpcyBpcyBub3JtYWxseSB0aGUgaWRcbiAgICogYXBwbGllZCB0byBhbiA8aW5wdXQgLz4gZWxlbWVudC4gIFdlIHVzZSB0aGlzIHByb3AgdG8gc2V0IHRoZVxuICAgKiBcImVycm9yLWZvclwiIGFuZCBcImhlbHAtZm9yXCIgYXR0cmlidXRlcy5cbiAgICovXG4gIHJvb3RFbGVtZW50SWQ/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gQSB1bmlxdWUgaW5kZW50aWZpZXIgdXNlZCB0byBzZXQgdGhlIFwiaWRcIiBvZiB0aGlzIGVsZW1lbnQsXG4gICAqIHdoaWNoIGNvbm5lY3RzIGl0IHdpdGggdGhlIHJvb3QgZWxlbWVudC4gIFRoaXMgZW5zdXJlcyBzY3JlZW4gcmVhZGVyc1xuICAgKiBjYW4gcmVhZCB0aGUgZXJyb3IgYW5kIGhlbHAgbWVzc2FnZXMgd2hlbiBvbmUgYXBwZWFycy5cbiAgICogVGhpcyBJRCBzaG91bGQgYmUgc29tZXRoaW5nIGxpa2UgXCJlcnJvci1mb3ItPGlkLW9mLWlucHV0LWVsZW1lbnQ+XCIgb3JcbiAgICogXCJoZWxwLWZvci08aWQtb2YtaW5wdXQtZWxlbWVudD5cIi5cbiAgICovXG4gIGRlc2NyaWJlZEJ5SWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgYnVpbGREZXNjcmliZWRCeVByb3BzIHtcbiAgaGFzRXJyb3I/OiBib29sZWFuO1xuICBoYXNIZWxwTWVzc2FnZT86IGJvb2xlYW47XG4gIHVuaXF1ZUlkOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQSB1dGlsaXR5IGZ1bmN0aW9uIHRvIGJ1aWxkIHRoZSBgYXJpYS1kZXNjcmliZWRieWAgYXR0cmlidXRlLlxuICpcbiAqIEBwYXJhbSBoYXNFcnJvciAtIEJvb2xlYW4gdG8gZGVmaW5lIGlmIGNvbXBvbmVudCBoYXMgYW4gZXJyb3JcbiAqIEBwYXJhbSBoYXNIZWxwTWVzc2FnZSAtIEJvb2xlYW4gdG8gZGVmaW5lIGlmIGNvbXBvbmVudCBoYXMgYSBoZWxwIG1lc3NhZ2VcbiAqIEBwYXJhbSB1bmlxdWVJZCAtIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgZWxlbWVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IGJ1aWxkRGVzY3JpYmVkQnkgPSAoe1xuICBoYXNFcnJvcixcbiAgaGFzSGVscE1lc3NhZ2UsXG4gIHVuaXF1ZUlkLFxufTogYnVpbGREZXNjcmliZWRCeVByb3BzKSA9PiB7XG4gIGlmICghYnVpbGREZXNjcmliZWRCeSB8fCAoIWhhc0hlbHBNZXNzYWdlICYmICFoYXNFcnJvcikpIHtcbiAgICAvLyBUeXBlIHJlcXVpcmVzIGVpdGhlciBzdHJpbmcgfCB1bmRlZmluZWRcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKGhhc0Vycm9yICYmIGhhc0hlbHBNZXNzYWdlKSB7XG4gICAgcmV0dXJuIGAke2Vycm9yRm9yKHVuaXF1ZUlkKX0gJHtoZWxwRm9yKHVuaXF1ZUlkKX1gO1xuICB9XG5cbiAgaWYgKGhhc0Vycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yRm9yKHVuaXF1ZUlkKTtcbiAgfVxuXG4gIGlmIChoYXNIZWxwTWVzc2FnZSkge1xuICAgIHJldHVybiBoZWxwRm9yKHVuaXF1ZUlkKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGVycm9yRm9yID0gKHVuaXF1ZUlkOiBzdHJpbmcpID0+IGBlcnJvci1mb3ItJHt1bmlxdWVJZH1gO1xuZXhwb3J0IGNvbnN0IGhlbHBGb3IgPSAodW5pcXVlSWQ6IHN0cmluZykgPT4gYGhlbHAtZm9yLSR7dW5pcXVlSWR9YDtcbiJdfQ==