"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var styles_1 = require("../../styles");
var UniqueId_1 = require("../_private/UniqueId");
require("focus-visible");
exports.ButtonFilePickerStylesKey = 'ChromaButtonFilePicker';
exports.useStyles = styles_1.makeStyles(function (theme) { return ({
    root: {
        alignItems: 'center',
        background: theme.palette.primary.main,
        border: '0',
        borderRadius: theme.pxToRem(4),
        color: theme.palette.common.white,
        cursor: 'pointer',
        display: 'inline-flex',
        whiteSpace: 'nowrap',
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.typography.button.fontSize,
        fontWeight: theme.typography.fontWeightBold,
        justifyContent: 'center',
        letterSpacing: theme.pxToRem(0.5),
        lineHeight: 1.4,
        margin: 0,
        minHeight: theme.pxToRem(32),
        minWidth: theme.pxToRem(64),
        outline: 'none',
        paddingBottom: theme.pxToRem(8),
        paddingLeft: theme.pxToRem(11),
        paddingRight: theme.pxToRem(11),
        paddingTop: theme.pxToRem(8),
        position: 'relative',
        transition: 'background-color 0.25s ease, color 0.25s ease, opacity 0.25s ease',
        userSelect: 'none',
        '&:hover, &:focus': {
            backgroundColor: theme.palette.primary[900],
            outline: 'none',
        },
        '&.focus.focus-visible, &:focus-within': {
            boxShadow: theme.boxShadows.focusVisible,
        },
    },
    inverse: {
        '&.focus.focus-visible, &:focus-within': {
            boxShadow: theme.boxShadows.focusVisibleInverse,
        },
    },
    rootDisabled: {
        cursor: 'default',
        pointerEvents: 'none',
        backgroundColor: theme.palette.primary.main,
        opacity: 0.44,
    },
    containedInverse: {
        backgroundColor: theme.palette.common.white,
        color: theme.palette.primary.main,
        '&:hover': {
            backgroundColor: theme.palette.common.white,
            color: theme.palette.primary.main,
            opacity: 0.85,
        },
        '&:focus': {
            backgroundColor: theme.palette.common.white,
            color: theme.palette.primary.main,
            opacity: 0.75,
        },
    },
    containedInverseDisabled: {
        backgroundColor: 'rgba(255, 255, 255, 0.45)',
        opacity: 1,
        color: theme.palette.text.secondary,
    },
    outlined: {
        backgroundColor: 'transparent',
        border: "1px solid " + theme.palette.primary.main,
        color: theme.palette.primary.main,
        transition: 'border 0.25s ease, color 0.25s ease',
        '&:hover, &:focus': {
            backgroundColor: 'transparent',
            border: "1px solid " + theme.palette.primary[900],
            color: theme.palette.primary[900],
        },
    },
    outlinedDisabled: {
        backgroundColor: 'transparent',
        border: "1px solid " + theme.palette.primary.main,
        color: theme.palette.primary.main,
        opacity: 0.44,
    },
    outlinedInverse: {
        borderColor: theme.palette.common.white,
        color: theme.palette.common.white,
        '&:hover': {
            color: theme.palette.common.white,
            opacity: 0.85,
            borderColor: 'rgba(255, 255, 255, 0.85)',
        },
        '&:focus': {
            color: theme.palette.common.white,
            opacity: 0.75,
            borderColor: 'rgba(255, 255, 255, 0.75)',
        },
    },
    outlinedInverseDisabled: {
        color: 'rgba(255, 255, 255, 0.45)',
        opacity: 1,
        borderColor: 'rgba(255, 255, 255, 0.45)',
    },
    text: {
        backgroundColor: 'transparent',
        border: 'unset',
        color: theme.palette.primary.main,
        transition: 'color 0.25s ease',
        '&:hover, &:focus': {
            backgroundColor: 'transparent',
            color: theme.palette.primary[900],
        },
    },
    textDisabled: {
        backgroundColor: 'transparent',
        color: theme.palette.primary.main,
        opacity: 0.44,
    },
    textInverse: {
        color: theme.palette.common.white,
        '&:hover': {
            color: theme.palette.common.white,
            opacity: 0.85,
        },
        '&:focus': {
            color: theme.palette.common.white,
            opacity: 0.75,
        },
    },
    textInverseDisabled: {
        color: theme.palette.common.white,
        opacity: 0.44,
    },
    fullWidth: {
        width: '100%',
    },
    icon: {
        width: theme.spacing(2),
        height: theme.spacing(2),
        marginRight: theme.spacing(1),
    },
    input: {
        position: 'absolute',
        top: 0,
        left: 0,
        opacity: 0,
        height: '100%',
        width: '100%',
        cursor: 'pointer',
        '&::-webkit-file-upload-button:hover': {
            cursor: 'pointer',
        },
    },
    disabled: {
        cursor: 'not-allowed',
    },
}); }, { name: exports.ButtonFilePickerStylesKey });
exports.ButtonFilePicker = React.forwardRef(function (_a, ref) {
    var _b, _c, _d;
    var accept = _a.accept, _e = _a.allowMultipleSelection, allowMultipleSelection = _e === void 0 ? false : _e, children = _a.children, className = _a.className, _f = _a.color, color = _f === void 0 ? 'default' : _f, _g = _a.disabled, disabled = _g === void 0 ? false : _g, fullWidth = _a.fullWidth, Icon = _a.icon, providedId = _a.id, onChange = _a.onChange, _h = _a.variant, variant = _h === void 0 ? 'contained' : _h, rootProps = __rest(_a, ["accept", "allowMultipleSelection", "children", "className", "color", "disabled", "fullWidth", "icon", "id", "onChange", "variant"]);
    var classes = exports.useStyles({});
    var id = React.useState(function () { return providedId || UniqueId_1.generateUniqueId('filePicker-'); })[0];
    return (React.createElement("label", __assign({ ref: ref, className: clsx_1.default(classes.root, (_b = {},
            _b[classes.outlined] = variant === 'outlined',
            _b[classes.text] = variant === 'text',
            _b), (_c = {},
            _c[classes.containedInverse] = variant === 'contained' && color === 'inverse',
            _c[classes.outlinedInverse] = variant === 'outlined' && color === 'inverse',
            _c[classes.textInverse] = variant === 'text' && color === 'inverse',
            _c), color === 'inverse' && classes.inverse, 
        // Root disabled class
        disabled && classes.rootDisabled, (_d = {},
            _d[classes.outlinedDisabled] = disabled && variant === 'outlined' && color === 'default',
            _d[classes.outlinedInverseDisabled] = disabled && variant === 'outlined' && color === 'inverse',
            _d[classes.textDisabled] = disabled && variant === 'text' && color === 'default',
            _d[classes.textInverseDisabled] = disabled && variant === 'text' && color === 'inverse',
            _d[classes.containedInverseDisabled] = disabled && variant === 'contained' && color === 'inverse',
            _d), fullWidth && classes.fullWidth, className), htmlFor: id }, rootProps),
        !!Icon && React.createElement(Icon, { role: "img", "aria-hidden": true, className: classes.icon }),
        children,
        React.createElement("input", { id: id, disabled: disabled, tabIndex: 0, className: clsx_1.default(classes.input, disabled && classes.disabled), type: "file", accept: accept, onChange: onChange, multiple: allowMultipleSelection })));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnV0dG9uRmlsZVBpY2tlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0J1dHRvbkZpbGVQaWNrZXIvQnV0dG9uRmlsZVBpY2tlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDhDQUF3QjtBQUN4QiwyQ0FBK0I7QUFDL0IsdUNBQTBDO0FBRTFDLGlEQUF3RDtBQUV4RCx5QkFBdUI7QUFFVixRQUFBLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBRXJELFFBQUEsU0FBUyxHQUFHLG1CQUFVLENBQ2pDLFVBQUMsS0FBSyxJQUFLLE9BQUEsQ0FBQztJQUNWLElBQUksRUFBRTtRQUNKLFVBQVUsRUFBRSxRQUFRO1FBQ3BCLFVBQVUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJO1FBQ3RDLE1BQU0sRUFBRSxHQUFHO1FBQ1gsWUFBWSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzlCLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLO1FBQ2pDLE1BQU0sRUFBRSxTQUFTO1FBQ2pCLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLFVBQVUsRUFBRSxRQUFRO1FBQ3BCLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVU7UUFDdkMsUUFBUSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFFBQVE7UUFDMUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsY0FBYztRQUMzQyxjQUFjLEVBQUUsUUFBUTtRQUN4QixhQUFhLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDakMsVUFBVSxFQUFFLEdBQUc7UUFDZixNQUFNLEVBQUUsQ0FBQztRQUNULFNBQVMsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztR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SUFDL0IsUUFBUSxJQUFJLE9BQU8sS0FBSyxXQUFXLElBQUksS0FBSyxLQUFLLFNBQVM7aUJBRTlELFNBQVMsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUM5QixTQUFTLENBQ1YsRUFDRCxPQUFPLEVBQUUsRUFBRSxJQUNQLFNBQVM7UUFFWixDQUFDLENBQUMsSUFBSSxJQUFJLG9CQUFDLElBQUksSUFBQyxJQUFJLEVBQUMsS0FBSyx1QkFBYSxTQUFTLEVBQUUsT0FBTyxDQUFDLElBQUksR0FBSTtRQUNsRSxRQUFRO1FBQ1QsK0JBQ0UsRUFBRSxFQUFFLEVBQUUsRUFDTixRQUFRLEVBQUUsUUFBUSxFQUNsQixRQUFRLEVBQUUsQ0FBQyxFQUNYLFNBQVMsRUFBRSxjQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUM1RCxJQUFJLEVBQUMsTUFBTSxFQUNYLE1BQU0sRUFBRSxNQUFNLEVBQ2QsUUFBUSxFQUFFLFFBQVEsRUFDbEIsUUFBUSxFQUFFLHNCQUFzQixHQUNoQyxDQUNJLENBQ1QsQ0FBQztBQUNKLENBQUMsQ0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnLi4vLi4vc3R5bGVzJztcbmltcG9ydCB7IEdldENsYXNzZXMgfSBmcm9tICcuLi8uLi90eXBlVXRpbHMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVVbmlxdWVJZCB9IGZyb20gJy4uL19wcml2YXRlL1VuaXF1ZUlkJztcbmltcG9ydCB7IEJ1dHRvblByb3BzIH0gZnJvbSAnLi4vQnV0dG9uJztcbmltcG9ydCAnZm9jdXMtdmlzaWJsZSc7XG5cbmV4cG9ydCBjb25zdCBCdXR0b25GaWxlUGlja2VyU3R5bGVzS2V5ID0gJ0Nocm9tYUJ1dHRvbkZpbGVQaWNrZXInO1xuXG5leHBvcnQgY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhcbiAgKHRoZW1lKSA9PiAoe1xuICAgIHJvb3Q6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgYmFja2dyb3VuZDogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBib3JkZXI6ICcwJyxcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUucHhUb1JlbSg0KSxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLmZvbnRTaXplLFxuICAgICAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0Qm9sZCxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgIGxldHRlclNwYWNpbmc6IHRoZW1lLnB4VG9SZW0oMC41KSxcbiAgICAgIGxpbmVIZWlnaHQ6IDEuNCxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIG1pbkhlaWdodDogdGhlbWUucHhUb1JlbSgzMiksXG4gICAgICBtaW5XaWR0aDogdGhlbWUucHhUb1JlbSg2NCksXG4gICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICBwYWRkaW5nQm90dG9tOiB0aGVtZS5weFRvUmVtKDgpLFxuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnB4VG9SZW0oMTEpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5weFRvUmVtKDExKSxcbiAgICAgIHBhZGRpbmdUb3A6IHRoZW1lLnB4VG9SZW0oOCksXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIHRyYW5zaXRpb246XG4gICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yIDAuMjVzIGVhc2UsIGNvbG9yIDAuMjVzIGVhc2UsIG9wYWNpdHkgMC4yNXMgZWFzZScsXG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAnJjpob3ZlciwgJjpmb2N1cyc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnlbOTAwXSxcbiAgICAgICAgb3V0bGluZTogJ25vbmUnLFxuICAgICAgfSxcbiAgICAgICcmLmZvY3VzLmZvY3VzLXZpc2libGUsICY6Zm9jdXMtd2l0aGluJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLmJveFNoYWRvd3MuZm9jdXNWaXNpYmxlLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGludmVyc2U6IHtcbiAgICAgICcmLmZvY3VzLmZvY3VzLXZpc2libGUsICY6Zm9jdXMtd2l0aGluJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLmJveFNoYWRvd3MuZm9jdXNWaXNpYmxlSW52ZXJzZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICByb290RGlzYWJsZWQ6IHtcbiAgICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgIG9wYWNpdHk6IDAuNDQsXG4gICAgfSxcbiAgICBjb250YWluZWRJbnZlcnNlOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgICAgb3BhY2l0eTogMC44NSxcbiAgICAgIH0sXG4gICAgICAnJjpmb2N1cyc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgICBvcGFjaXR5OiAwLjc1LFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNvbnRhaW5lZEludmVyc2VEaXNhYmxlZDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjQ1KScsXG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gICAgfSxcbiAgICBvdXRsaW5lZDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW59YCxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgIHRyYW5zaXRpb246ICdib3JkZXIgMC4yNXMgZWFzZSwgY29sb3IgMC4yNXMgZWFzZScsXG4gICAgICAnJjpob3ZlciwgJjpmb2N1cyc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBib3JkZXI6IGAxcHggc29saWQgJHt0aGVtZS5wYWxldHRlLnByaW1hcnlbOTAwXX1gLFxuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5WzkwMF0sXG4gICAgICB9LFxuICAgIH0sXG4gICAgb3V0bGluZWREaXNhYmxlZDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW59YCxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgIG9wYWNpdHk6IDAuNDQsXG4gICAgfSxcbiAgICBvdXRsaW5lZEludmVyc2U6IHtcbiAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICAgIG9wYWNpdHk6IDAuODUsXG4gICAgICAgIGJvcmRlckNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjg1KScsXG4gICAgICB9LFxuICAgICAgJyY6Zm9jdXMnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcbiAgICAgICAgb3BhY2l0eTogMC43NSxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNzUpJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBvdXRsaW5lZEludmVyc2VEaXNhYmxlZDoge1xuICAgICAgY29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNDUpJyxcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICBib3JkZXJDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC40NSknLFxuICAgIH0sXG4gICAgdGV4dDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgYm9yZGVyOiAndW5zZXQnLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgdHJhbnNpdGlvbjogJ2NvbG9yIDAuMjVzIGVhc2UnLFxuICAgICAgJyY6aG92ZXIsICY6Zm9jdXMnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeVs5MDBdLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHRleHREaXNhYmxlZDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgb3BhY2l0eTogMC40NCxcbiAgICB9LFxuICAgIHRleHRJbnZlcnNlOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICAgICAgICBvcGFjaXR5OiAwLjg1LFxuICAgICAgfSxcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICAgIG9wYWNpdHk6IDAuNzUsXG4gICAgICB9LFxuICAgIH0sXG4gICAgdGV4dEludmVyc2VEaXNhYmxlZDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICAgICAgb3BhY2l0eTogMC40NCxcbiAgICB9LFxuICAgIGZ1bGxXaWR0aDoge1xuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICB9LFxuICAgIGljb246IHtcbiAgICAgIHdpZHRoOiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgaGVpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgbWFyZ2luUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMSksXG4gICAgfSxcbiAgICBpbnB1dDoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgJyY6Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uOmhvdmVyJzoge1xuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBkaXNhYmxlZDoge1xuICAgICAgY3Vyc29yOiAnbm90LWFsbG93ZWQnLFxuICAgIH0sXG4gIH0pLFxuICB7IG5hbWU6IEJ1dHRvbkZpbGVQaWNrZXJTdHlsZXNLZXkgfVxuKTtcblxuZXhwb3J0IHR5cGUgQnV0dG9uRmlsZVBpY2tlckNsYXNzZXMgPSBHZXRDbGFzc2VzPHR5cGVvZiB1c2VTdHlsZXM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJ1dHRvbkZpbGVQaWNrZXJQcm9wcyB7XG4gIGFjY2VwdD86IHN0cmluZztcbiAgYWxsb3dNdWx0aXBsZVNlbGVjdGlvbj86IGJvb2xlYW47XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGNvbG9yPzogQnV0dG9uUHJvcHNbJ2NvbG9yJ107XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgZnVsbFdpZHRoPzogQnV0dG9uUHJvcHNbJ2Z1bGxXaWR0aCddO1xuICBpY29uPzogQnV0dG9uUHJvcHNbJ2ljb24nXTtcbiAgaWQ/OiBzdHJpbmc7XG4gIG9uQ2hhbmdlPzogKChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQpIHwgdW5kZWZpbmVkO1xuICB2YXJpYW50PzogQnV0dG9uUHJvcHNbJ3ZhcmlhbnQnXTtcbn1cblxuZXhwb3J0IGNvbnN0IEJ1dHRvbkZpbGVQaWNrZXIgPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBIVE1MTGFiZWxFbGVtZW50LFxuICBCdXR0b25GaWxlUGlja2VyUHJvcHNcbj4oXG4gIChcbiAgICB7XG4gICAgICBhY2NlcHQsXG4gICAgICBhbGxvd011bHRpcGxlU2VsZWN0aW9uID0gZmFsc2UsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gJ2RlZmF1bHQnLFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIGZ1bGxXaWR0aCxcbiAgICAgIGljb246IEljb24sXG4gICAgICBpZDogcHJvdmlkZWRJZCxcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgdmFyaWFudCA9ICdjb250YWluZWQnLFxuICAgICAgLi4ucm9vdFByb3BzXG4gICAgfSxcbiAgICByZWZcbiAgKSA9PiB7XG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcyh7fSk7XG4gICAgY29uc3QgW2lkXSA9IFJlYWN0LnVzZVN0YXRlPHN0cmluZz4oXG4gICAgICAoKSA9PiBwcm92aWRlZElkIHx8IGdlbmVyYXRlVW5pcXVlSWQoJ2ZpbGVQaWNrZXItJylcbiAgICApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxsYWJlbFxuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgY2xhc3NOYW1lPXtjbHN4KFxuICAgICAgICAgIGNsYXNzZXMucm9vdCxcbiAgICAgICAgICAvLyBWYXJpYW50IGNsYXNzZXNcbiAgICAgICAgICB7XG4gICAgICAgICAgICBbY2xhc3Nlcy5vdXRsaW5lZF06IHZhcmlhbnQgPT09ICdvdXRsaW5lZCcsXG4gICAgICAgICAgICBbY2xhc3Nlcy50ZXh0XTogdmFyaWFudCA9PT0gJ3RleHQnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgLy8gVmFyaWFudCArIENvbG9yIGNvbWJpbmF0aW9uIGNsYXNzZXNcbiAgICAgICAgICB7XG4gICAgICAgICAgICBbY2xhc3Nlcy5jb250YWluZWRJbnZlcnNlXTpcbiAgICAgICAgICAgICAgdmFyaWFudCA9PT0gJ2NvbnRhaW5lZCcgJiYgY29sb3IgPT09ICdpbnZlcnNlJyxcbiAgICAgICAgICAgIFtjbGFzc2VzLm91dGxpbmVkSW52ZXJzZV06XG4gICAgICAgICAgICAgIHZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYgY29sb3IgPT09ICdpbnZlcnNlJyxcbiAgICAgICAgICAgIFtjbGFzc2VzLnRleHRJbnZlcnNlXTogdmFyaWFudCA9PT0gJ3RleHQnICYmIGNvbG9yID09PSAnaW52ZXJzZScsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb2xvciA9PT0gJ2ludmVyc2UnICYmIGNsYXNzZXMuaW52ZXJzZSxcbiAgICAgICAgICAvLyBSb290IGRpc2FibGVkIGNsYXNzXG4gICAgICAgICAgZGlzYWJsZWQgJiYgY2xhc3Nlcy5yb290RGlzYWJsZWQsXG4gICAgICAgICAgLy8gVmFyaWFudCArIENvbG9yIERpc2FibGVkIGNvbWJpbmF0aW9uIGNsYXNzZXNcbiAgICAgICAgICB7XG4gICAgICAgICAgICBbY2xhc3Nlcy5vdXRsaW5lZERpc2FibGVkXTpcbiAgICAgICAgICAgICAgZGlzYWJsZWQgJiYgdmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiBjb2xvciA9PT0gJ2RlZmF1bHQnLFxuICAgICAgICAgICAgW2NsYXNzZXMub3V0bGluZWRJbnZlcnNlRGlzYWJsZWRdOlxuICAgICAgICAgICAgICBkaXNhYmxlZCAmJiB2YXJpYW50ID09PSAnb3V0bGluZWQnICYmIGNvbG9yID09PSAnaW52ZXJzZScsXG4gICAgICAgICAgICBbY2xhc3Nlcy50ZXh0RGlzYWJsZWRdOlxuICAgICAgICAgICAgICBkaXNhYmxlZCAmJiB2YXJpYW50ID09PSAndGV4dCcgJiYgY29sb3IgPT09ICdkZWZhdWx0JyxcbiAgICAgICAgICAgIFtjbGFzc2VzLnRleHRJbnZlcnNlRGlzYWJsZWRdOlxuICAgICAgICAgICAgICBkaXNhYmxlZCAmJiB2YXJpYW50ID09PSAndGV4dCcgJiYgY29sb3IgPT09ICdpbnZlcnNlJyxcbiAgICAgICAgICAgIFtjbGFzc2VzLmNvbnRhaW5lZEludmVyc2VEaXNhYmxlZF06XG4gICAgICAgICAgICAgIGRpc2FibGVkICYmIHZhcmlhbnQgPT09ICdjb250YWluZWQnICYmIGNvbG9yID09PSAnaW52ZXJzZScsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmdWxsV2lkdGggJiYgY2xhc3Nlcy5mdWxsV2lkdGgsXG4gICAgICAgICAgY2xhc3NOYW1lXG4gICAgICAgICl9XG4gICAgICAgIGh0bWxGb3I9e2lkfVxuICAgICAgICB7Li4ucm9vdFByb3BzfVxuICAgICAgPlxuICAgICAgICB7ISFJY29uICYmIDxJY29uIHJvbGU9XCJpbWdcIiBhcmlhLWhpZGRlbiBjbGFzc05hbWU9e2NsYXNzZXMuaWNvbn0gLz59XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgaWQ9e2lkfVxuICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICB0YWJJbmRleD17MH1cbiAgICAgICAgICBjbGFzc05hbWU9e2Nsc3goY2xhc3Nlcy5pbnB1dCwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCl9XG4gICAgICAgICAgdHlwZT1cImZpbGVcIlxuICAgICAgICAgIGFjY2VwdD17YWNjZXB0fVxuICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICBtdWx0aXBsZT17YWxsb3dNdWx0aXBsZVNlbGVjdGlvbn1cbiAgICAgICAgLz5cbiAgICAgIDwvbGFiZWw+XG4gICAgKTtcbiAgfVxuKTtcbiJdfQ==