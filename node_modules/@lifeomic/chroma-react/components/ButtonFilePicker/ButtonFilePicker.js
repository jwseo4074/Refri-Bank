"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ButtonFilePicker = exports.useStyles = exports.ButtonFilePickerStylesKey = void 0;
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var styles_1 = require("../../styles");
var UniqueId_1 = require("../_private/UniqueId");
require("focus-visible");
exports.ButtonFilePickerStylesKey = 'ChromaButtonFilePicker';
exports.useStyles = (0, styles_1.makeStyles)(function (theme) { return ({
    root: {
        background: theme.palette.primary.main,
        border: "1px solid transparent",
        borderRadius: theme.pxToRem(4),
        color: theme.palette.common.white,
        cursor: 'pointer',
        display: 'inline-block',
        whiteSpace: 'nowrap',
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.typography.button.fontSize,
        fontWeight: theme.typography.fontWeightBold,
        letterSpacing: theme.pxToRem(0.5),
        lineHeight: theme.pxToRem(19),
        margin: 0,
        maxHeight: theme.pxToRem(35),
        minWidth: theme.pxToRem(64),
        outline: 'none',
        overflow: 'hidden',
        paddingBottom: theme.pxToRem(7),
        paddingLeft: theme.pxToRem(11),
        paddingRight: theme.pxToRem(11),
        paddingTop: theme.pxToRem(7),
        position: 'relative',
        textAlign: 'center',
        textOverflow: 'ellipsis',
        transition: 'background-color 0.25s ease, color 0.25s ease, opacity 0.25s ease',
        userSelect: 'none',
        verticalAlign: 'middle',
        '&:hover, &:focus': {
            backgroundColor: theme.palette.primary[900],
            outline: 'none',
        },
        '&.focus.focus-visible, &:focus-within': {
            boxShadow: theme.boxShadows.focusVisible,
        },
    },
    inverse: {
        '&.focus.focus-visible, &:focus-within': {
            boxShadow: theme.boxShadows.focusVisibleInverse,
        },
    },
    rootDisabled: {
        cursor: 'default',
        pointerEvents: 'none',
        backgroundColor: theme.palette.primary.main,
        opacity: 0.44,
    },
    containedInverse: {
        backgroundColor: theme.palette.common.white,
        color: theme.palette.primary.main,
        '&:hover': {
            backgroundColor: theme.palette.common.white,
            color: theme.palette.primary.main,
            opacity: 0.85,
        },
        '&:focus': {
            backgroundColor: theme.palette.common.white,
            color: theme.palette.primary.main,
            opacity: 0.75,
        },
    },
    containedInverseDisabled: {
        backgroundColor: 'rgba(255, 255, 255, 0.45)',
        opacity: 1,
        color: theme.palette.text.secondary,
    },
    outlined: {
        backgroundColor: 'transparent',
        borderColor: theme.palette.primary.main,
        color: theme.palette.primary.main,
        transition: 'border 0.25s ease, color 0.25s ease',
        '&:hover, &:focus': {
            backgroundColor: 'transparent',
            borderColor: theme.palette.primary[900],
            color: theme.palette.primary[900],
        },
    },
    outlinedDisabled: {
        backgroundColor: 'transparent',
        borderColor: theme.palette.primary.main,
        color: theme.palette.primary.main,
        opacity: 0.44,
    },
    outlinedInverse: {
        borderColor: theme.palette.common.white,
        color: theme.palette.common.white,
        '&:hover': {
            color: theme.palette.common.white,
            opacity: 0.85,
            borderColor: 'rgba(255, 255, 255, 0.85)',
        },
        '&:focus': {
            color: theme.palette.common.white,
            opacity: 0.75,
            borderColor: 'rgba(255, 255, 255, 0.75)',
        },
    },
    outlinedInverseDisabled: {
        color: 'rgba(255, 255, 255, 0.45)',
        opacity: 1,
        borderColor: 'rgba(255, 255, 255, 0.45)',
    },
    text: {
        backgroundColor: 'transparent',
        color: theme.palette.primary.main,
        transition: 'color 0.25s ease',
        '&:hover, &:focus': {
            backgroundColor: 'transparent',
            color: theme.palette.primary[900],
        },
    },
    textDisabled: {
        backgroundColor: 'transparent',
        color: theme.palette.primary.main,
        opacity: 0.44,
    },
    textInverse: {
        color: theme.palette.common.white,
        '&:hover': {
            color: theme.palette.common.white,
            opacity: 0.85,
        },
        '&:focus': {
            color: theme.palette.common.white,
            opacity: 0.75,
        },
    },
    textInverseDisabled: {
        color: theme.palette.common.white,
        opacity: 0.44,
    },
    fullWidth: {
        width: '100%',
    },
    icon: {
        height: theme.spacing(2),
        marginRight: theme.spacing(1),
        position: 'relative',
        top: theme.pxToRem(-1),
        verticalAlign: 'middle',
        width: theme.spacing(2),
    },
    input: {
        position: 'absolute',
        top: 0,
        left: 0,
        opacity: 0,
        height: '100%',
        width: '100%',
        cursor: 'pointer',
        '&::-webkit-file-upload-button:hover': {
            cursor: 'pointer',
        },
    },
    disabled: {
        cursor: 'not-allowed',
    },
}); }, { name: exports.ButtonFilePickerStylesKey });
exports.ButtonFilePicker = React.forwardRef(function (_a, ref) {
    var _b, _c, _d;
    var accept = _a.accept, _e = _a.allowMultipleSelection, allowMultipleSelection = _e === void 0 ? false : _e, children = _a.children, className = _a.className, _f = _a.color, color = _f === void 0 ? 'default' : _f, _g = _a.disabled, disabled = _g === void 0 ? false : _g, fullWidth = _a.fullWidth, Icon = _a.icon, providedId = _a.id, onChange = _a.onChange, _h = _a.variant, variant = _h === void 0 ? 'contained' : _h, rootProps = __rest(_a, ["accept", "allowMultipleSelection", "children", "className", "color", "disabled", "fullWidth", "icon", "id", "onChange", "variant"]);
    var classes = (0, exports.useStyles)({});
    var id = React.useState(function () { return providedId || (0, UniqueId_1.generateUniqueId)('filePicker-'); })[0];
    return (React.createElement("label", __assign({ ref: ref, className: (0, clsx_1.default)(classes.root, (_b = {},
            _b[classes.outlined] = variant === 'outlined',
            _b[classes.text] = variant === 'text',
            _b), (_c = {},
            _c[classes.containedInverse] = variant === 'contained' && color === 'inverse',
            _c[classes.outlinedInverse] = variant === 'outlined' && color === 'inverse',
            _c[classes.textInverse] = variant === 'text' && color === 'inverse',
            _c), color === 'inverse' && classes.inverse, 
        // Root disabled class
        disabled && classes.rootDisabled, (_d = {},
            _d[classes.outlinedDisabled] = disabled && variant === 'outlined' && color === 'default',
            _d[classes.outlinedInverseDisabled] = disabled && variant === 'outlined' && color === 'inverse',
            _d[classes.textDisabled] = disabled && variant === 'text' && color === 'default',
            _d[classes.textInverseDisabled] = disabled && variant === 'text' && color === 'inverse',
            _d[classes.containedInverseDisabled] = disabled && variant === 'contained' && color === 'inverse',
            _d), fullWidth && classes.fullWidth, className), htmlFor: id }, rootProps),
        !!Icon && React.createElement(Icon, { role: "img", "aria-hidden": true, className: classes.icon }),
        children,
        React.createElement("input", { id: id, disabled: disabled, tabIndex: 0, className: (0, clsx_1.default)(classes.input, disabled && classes.disabled), type: "file", accept: accept, onChange: onChange, multiple: allowMultipleSelection })));
});
//# sourceMappingURL=data:application/json;base64,