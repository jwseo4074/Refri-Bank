"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IconTile = exports.useStyles = exports.IconTileStylesKey = void 0;
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var styles_1 = require("../../styles");
exports.IconTileStylesKey = 'ChromaIconTile';
exports.useStyles = (0, styles_1.makeStyles)(function (theme) { return ({
    root: {
        width: theme.pxToRem(202),
        height: theme.pxToRem(200),
        borderRadius: 10,
        overflow: 'hidden',
        position: 'relative',
        display: 'flex',
        flexDirection: 'column',
        background: theme.palette.common.white,
        boxShadow: theme.boxShadows.table,
    },
    cursorPointer: {
        cursor: 'pointer',
        transition: 'transform 0.5s ease, box-shadow 0.25s ease-out',
        '&:hover, &:focus': {
            outline: 'none',
            transform: 'translate3d(0, -2px, 0)',
            boxShadow: theme.boxShadows.elevatedContent,
            '& > * > p,span': {
                transition: 'color 0.5s ease',
                color: theme.palette.primary.main,
            },
        },
    },
}); }, { name: exports.IconTileStylesKey });
exports.IconTile = React.forwardRef(function (_a, ref) {
    var children = _a.children, className = _a.className, onClick = _a.onClick, rootProps = __rest(_a, ["children", "className", "onClick"]);
    var classes = (0, exports.useStyles)({});
    return (
    // We conditionally add the role if `onClick` is provided
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    React.createElement("div", __assign({ ref: ref, className: (0, clsx_1.default)(classes.root, className, !!onClick && classes.cursorPointer), role: onClick ? 'button' : undefined, tabIndex: onClick ? 0 : undefined, onClick: onClick }, rootProps), children));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSWNvblRpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9JY29uVGlsZS9JY29uVGlsZS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsOENBQXdCO0FBQ3hCLDJDQUErQjtBQUMvQix1Q0FBMEM7QUFHN0IsUUFBQSxpQkFBaUIsR0FBRyxnQkFBZ0IsQ0FBQztBQUVyQyxRQUFBLFNBQVMsR0FBRyxJQUFBLG1CQUFVLEVBQ2pDLFVBQUMsS0FBSyxJQUFLLE9BQUEsQ0FBQztJQUNWLElBQUksRUFBRTtRQUNKLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUN6QixNQUFNLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDMUIsWUFBWSxFQUFFLEVBQUU7UUFDaEIsUUFBUSxFQUFFLFFBQVE7UUFDbEIsUUFBUSxFQUFFLFVBQVU7UUFDcEIsT0FBTyxFQUFFLE1BQU07UUFDZixhQUFhLEVBQUUsUUFBUTtRQUN2QixVQUFVLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSztRQUN0QyxTQUFTLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLO0tBQ2xDO0lBQ0QsYUFBYSxFQUFFO1FBQ2IsTUFBTSxFQUFFLFNBQVM7UUFDakIsVUFBVSxFQUFFLGdEQUFnRDtRQUM1RCxrQkFBa0IsRUFBRTtZQUNsQixPQUFPLEVBQUUsTUFBTTtZQUNmLFNBQVMsRUFBRSx5QkFBeUI7WUFDcEMsU0FBUyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsZUFBZTtZQUMzQyxnQkFBZ0IsRUFBRTtnQkFDaEIsVUFBVSxFQUFFLGlCQUFpQjtnQkFDN0IsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUk7YUFDbEM7U0FDRjtLQUNGO0NBQ0YsQ0FBQyxFQXpCUyxDQXlCVCxFQUNGLEVBQUUsSUFBSSxFQUFFLHlCQUFpQixFQUFFLENBQzVCLENBQUM7QUFjVyxRQUFBLFFBQVEsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUN0QyxVQUFDLEVBQThDLEVBQUUsR0FBRztJQUFqRCxJQUFBLFFBQVEsY0FBQSxFQUFFLFNBQVMsZUFBQSxFQUFFLE9BQU8sYUFBQSxFQUFLLFNBQVMsY0FBNUMsb0NBQThDLENBQUY7SUFDM0MsSUFBTSxPQUFPLEdBQUcsSUFBQSxpQkFBUyxFQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTlCLE9BQU87SUFDTCx5REFBeUQ7SUFDekQsbUVBQW1FO0lBQ25FLHNDQUNFLEdBQUcsRUFBRSxHQUFHLEVBQ1IsU0FBUyxFQUFFLElBQUEsY0FBSSxFQUNiLE9BQU8sQ0FBQyxJQUFJLEVBQ1osU0FBUyxFQUNULENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLGFBQWEsQ0FDbkMsRUFDRCxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFDcEMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQ2pDLE9BQU8sRUFBRSxPQUFPLElBQ1osU0FBUyxHQUVaLFFBQVEsQ0FDTCxDQUNQLENBQUM7QUFDSixDQUFDLENBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJy4uLy4uL3N0eWxlcyc7XG5pbXBvcnQgeyBHZXRDbGFzc2VzIH0gZnJvbSAnLi4vLi4vdHlwZVV0aWxzJztcblxuZXhwb3J0IGNvbnN0IEljb25UaWxlU3R5bGVzS2V5ID0gJ0Nocm9tYUljb25UaWxlJztcblxuZXhwb3J0IGNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoXG4gICh0aGVtZSkgPT4gKHtcbiAgICByb290OiB7XG4gICAgICB3aWR0aDogdGhlbWUucHhUb1JlbSgyMDIpLFxuICAgICAgaGVpZ2h0OiB0aGVtZS5weFRvUmVtKDIwMCksXG4gICAgICBib3JkZXJSYWRpdXM6IDEwLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgIGJhY2tncm91bmQ6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICAgICAgYm94U2hhZG93OiB0aGVtZS5ib3hTaGFkb3dzLnRhYmxlLFxuICAgIH0sXG4gICAgY3Vyc29yUG9pbnRlcjoge1xuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICB0cmFuc2l0aW9uOiAndHJhbnNmb3JtIDAuNXMgZWFzZSwgYm94LXNoYWRvdyAwLjI1cyBlYXNlLW91dCcsXG4gICAgICAnJjpob3ZlciwgJjpmb2N1cyc6IHtcbiAgICAgICAgb3V0bGluZTogJ25vbmUnLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCAtMnB4LCAwKScsIC8vIEdQVSBhY2NlbGVyYXRpb24gb24gdHJhbnNpdGlvblxuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLmJveFNoYWRvd3MuZWxldmF0ZWRDb250ZW50LFxuICAgICAgICAnJiA+ICogPiBwLHNwYW4nOiB7XG4gICAgICAgICAgdHJhbnNpdGlvbjogJ2NvbG9yIDAuNXMgZWFzZScsXG4gICAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICB9KSxcbiAgeyBuYW1lOiBJY29uVGlsZVN0eWxlc0tleSB9XG4pO1xuXG5leHBvcnQgaW50ZXJmYWNlIEljb25UaWxlT3duUHJvcHNcbiAgZXh0ZW5kcyBSZWFjdC5EZXRhaWxlZEhUTUxQcm9wczxcbiAgICBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD4sXG4gICAgSFRNTERpdkVsZW1lbnRcbiAgPiB7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xufVxuXG5leHBvcnQgdHlwZSBJY29uVGlsZUNsYXNzZXMgPSBHZXRDbGFzc2VzPHR5cGVvZiB1c2VTdHlsZXM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEljb25UaWxlUHJvcHMgZXh0ZW5kcyBJY29uVGlsZU93blByb3BzIHt9XG5cbmV4cG9ydCBjb25zdCBJY29uVGlsZSA9IFJlYWN0LmZvcndhcmRSZWY8SFRNTERpdkVsZW1lbnQsIEljb25UaWxlUHJvcHM+KFxuICAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBvbkNsaWNrLCAuLi5yb290UHJvcHMgfSwgcmVmKSA9PiB7XG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcyh7fSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgLy8gV2UgY29uZGl0aW9uYWxseSBhZGQgdGhlIHJvbGUgaWYgYG9uQ2xpY2tgIGlzIHByb3ZpZGVkXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvbm8tc3RhdGljLWVsZW1lbnQtaW50ZXJhY3Rpb25zXG4gICAgICA8ZGl2XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICBjbGFzc05hbWU9e2Nsc3goXG4gICAgICAgICAgY2xhc3Nlcy5yb290LFxuICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgICAhIW9uQ2xpY2sgJiYgY2xhc3Nlcy5jdXJzb3JQb2ludGVyXG4gICAgICAgICl9XG4gICAgICAgIHJvbGU9e29uQ2xpY2sgPyAnYnV0dG9uJyA6IHVuZGVmaW5lZH1cbiAgICAgICAgdGFiSW5kZXg9e29uQ2xpY2sgPyAwIDogdW5kZWZpbmVkfVxuICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgICB7Li4ucm9vdFByb3BzfVxuICAgICAgPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG4pO1xuIl19