"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Breadcrumb = exports.useStyles = exports.BreadcrumbStylesKey = void 0;
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var react_router_dom_1 = require("react-router-dom");
var index_1 = require("../../styles/index");
exports.BreadcrumbStylesKey = 'ChromaBreadcrumb';
exports.useStyles = (0, index_1.makeStyles)(function (theme) { return ({
    root: {
        display: 'inline',
        margin: 0,
        padding: 0,
        '& + li:before': {
            display: 'inline-block',
            marginTop: 0,
            marginBottom: 0,
            marginLeft: theme.spacing(1),
            marginRight: theme.spacing(1),
            transform: 'rotate(15deg)',
            borderRight: "".concat(theme.pxToRem(1), " solid ").concat(theme.palette.text.dark),
            height: '0.75rem',
            content: "''",
        },
    },
    rootInverse: {
        '& + li:before': {
            borderRight: "".concat(theme.pxToRem(1), " solid ").concat(theme.palette.common.white),
        },
    },
    link: {
        fontSize: theme.pxToRem(16),
        letterSpacing: theme.pxToRem(0.5),
        textDecoration: 'none',
        color: theme.palette.text.dark,
        transition: 'color 0.5s ease',
        '&:hover': {
            color: theme.palette.primary.main,
            textDecoration: 'underline',
        },
    },
    linkInverse: {
        color: theme.palette.common.white,
        transition: 'opacity 0.5s ease',
        opacity: 1,
        '&:hover': {
            color: theme.palette.common.white,
            opacity: 0.85,
        },
    },
}); }, { name: exports.BreadcrumbStylesKey });
var Breadcrumb = function (_a) {
    var _b, _c;
    var className = _a.className, _d = _a.color, color = _d === void 0 ? 'default' : _d, _e = _a.isCurrentPage, isCurrentPage = _e === void 0 ? false : _e, text = _a.text, url = _a.url, rootProps = __rest(_a, ["className", "color", "isCurrentPage", "text", "url"]);
    var classes = (0, exports.useStyles)({});
    return (React.createElement("li", __assign({ className: (0, clsx_1.default)(classes.root, (_b = {},
            _b[classes.rootInverse] = color === 'inverse',
            _b), className) }, rootProps),
        React.createElement(react_router_dom_1.Link, { "aria-current": isCurrentPage ? 'page' : undefined, className: (0, clsx_1.default)(classes.link, (_c = {},
                _c[classes.linkInverse] = color === 'inverse',
                _c)), to: url }, text)));
};
exports.Breadcrumb = Breadcrumb;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJlYWRjcnVtYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0JyZWFkY3J1bWJzL0JyZWFkY3J1bWIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDhDQUF3QjtBQUN4QiwyQ0FBK0I7QUFDL0IscURBQXdDO0FBQ3hDLDRDQUFnRDtBQUduQyxRQUFBLG1CQUFtQixHQUFHLGtCQUFrQixDQUFDO0FBRXpDLFFBQUEsU0FBUyxHQUFHLElBQUEsa0JBQVUsRUFDakMsVUFBQyxLQUFLLElBQUssT0FBQSxDQUFDO0lBQ1YsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLFFBQVE7UUFDakIsTUFBTSxFQUFFLENBQUM7UUFDVCxPQUFPLEVBQUUsQ0FBQztRQUNWLGVBQWUsRUFBRTtZQUNmLE9BQU8sRUFBRSxjQUFjO1lBQ3ZCLFNBQVMsRUFBRSxDQUFDO1lBQ1osWUFBWSxFQUFFLENBQUM7WUFDZixVQUFVLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDNUIsV0FBVyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQzdCLFNBQVMsRUFBRSxlQUFlO1lBQzFCLFdBQVcsRUFBRSxVQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLG9CQUFVLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBRTtZQUNuRSxNQUFNLEVBQUUsU0FBUztZQUNqQixPQUFPLEVBQUUsSUFBSTtTQUNkO0tBQ0Y7SUFDRCxXQUFXLEVBQUU7UUFDWCxlQUFlLEVBQUU7WUFDZixXQUFXLEVBQUUsVUFBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxvQkFBVSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUU7U0FDdkU7S0FDRjtJQUNELElBQUksRUFBRTtRQUNKLFFBQVEsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUMzQixhQUFhLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDakMsY0FBYyxFQUFFLE1BQU07UUFDdEIsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUk7UUFDOUIsVUFBVSxFQUFFLGlCQUFpQjtRQUM3QixTQUFTLEVBQUU7WUFDVCxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSTtZQUNqQyxjQUFjLEVBQUUsV0FBVztTQUM1QjtLQUNGO0lBQ0QsV0FBVyxFQUFFO1FBQ1gsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUs7UUFDakMsVUFBVSxFQUFFLG1CQUFtQjtRQUMvQixPQUFPLEVBQUUsQ0FBQztRQUNWLFNBQVMsRUFBRTtZQUNULEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLO1lBQ2pDLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7S0FDRjtDQUNGLENBQUMsRUExQ1MsQ0EwQ1QsRUFDRixFQUFFLElBQUksRUFBRSwyQkFBbUIsRUFBRSxDQUM5QixDQUFDO0FBZ0JLLElBQU0sVUFBVSxHQUE4QixVQUFDLEVBT3JEOztJQU5DLElBQUEsU0FBUyxlQUFBLEVBQ1QsYUFBaUIsRUFBakIsS0FBSyxtQkFBRyxTQUFTLEtBQUEsRUFDakIscUJBQXFCLEVBQXJCLGFBQWEsbUJBQUcsS0FBSyxLQUFBLEVBQ3JCLElBQUksVUFBQSxFQUNKLEdBQUcsU0FBQSxFQUNBLFNBQVMsY0FOd0Msc0RBT3JELENBRGE7SUFFWixJQUFNLE9BQU8sR0FBRyxJQUFBLGlCQUFTLEVBQUMsRUFBRSxDQUFDLENBQUM7SUFFOUIsT0FBTyxDQUNMLHFDQUNFLFNBQVMsRUFBRSxJQUFBLGNBQUksRUFDYixPQUFPLENBQUMsSUFBSTtZQUVWLEdBQUMsT0FBTyxDQUFDLFdBQVcsSUFBRyxLQUFLLEtBQUssU0FBUztpQkFFNUMsU0FBUyxDQUNWLElBQ0csU0FBUztRQUViLG9CQUFDLHVCQUFJLG9CQUNXLGFBQWEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQ2hELFNBQVMsRUFBRSxJQUFBLGNBQUksRUFBQyxPQUFPLENBQUMsSUFBSTtnQkFDMUIsR0FBQyxPQUFPLENBQUMsV0FBVyxJQUFHLEtBQUssS0FBSyxTQUFTO29CQUMxQyxFQUNGLEVBQUUsRUFBRSxHQUFHLElBRU4sSUFBSSxDQUNBLENBQ0osQ0FDTixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBaENXLFFBQUEsVUFBVSxjQWdDckIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICcuLi8uLi9zdHlsZXMvaW5kZXgnO1xuaW1wb3J0IHsgR2V0Q2xhc3NlcyB9IGZyb20gJy4uLy4uL3R5cGVVdGlscyc7XG5cbmV4cG9ydCBjb25zdCBCcmVhZGNydW1iU3R5bGVzS2V5ID0gJ0Nocm9tYUJyZWFkY3J1bWInO1xuXG5leHBvcnQgY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhcbiAgKHRoZW1lKSA9PiAoe1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUnLFxuICAgICAgbWFyZ2luOiAwLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgICcmICsgbGk6YmVmb3JlJzoge1xuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgbWFyZ2luVG9wOiAwLFxuICAgICAgICBtYXJnaW5Cb3R0b206IDAsXG4gICAgICAgIG1hcmdpbkxlZnQ6IHRoZW1lLnNwYWNpbmcoMSksXG4gICAgICAgIG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nKDEpLFxuICAgICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMTVkZWcpJyxcbiAgICAgICAgYm9yZGVyUmlnaHQ6IGAke3RoZW1lLnB4VG9SZW0oMSl9IHNvbGlkICR7dGhlbWUucGFsZXR0ZS50ZXh0LmRhcmt9YCxcbiAgICAgICAgaGVpZ2h0OiAnMC43NXJlbScsXG4gICAgICAgIGNvbnRlbnQ6IGAnJ2AsXG4gICAgICB9LFxuICAgIH0sXG4gICAgcm9vdEludmVyc2U6IHtcbiAgICAgICcmICsgbGk6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJSaWdodDogYCR7dGhlbWUucHhUb1JlbSgxKX0gc29saWQgJHt0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZX1gLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGxpbms6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS5weFRvUmVtKDE2KSxcbiAgICAgIGxldHRlclNwYWNpbmc6IHRoZW1lLnB4VG9SZW0oMC41KSxcbiAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRhcmssXG4gICAgICB0cmFuc2l0aW9uOiAnY29sb3IgMC41cyBlYXNlJyxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICAgIHRleHREZWNvcmF0aW9uOiAndW5kZXJsaW5lJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBsaW5rSW52ZXJzZToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICAgICAgdHJhbnNpdGlvbjogJ29wYWNpdHkgMC41cyBlYXNlJyxcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICAgICAgICBvcGFjaXR5OiAwLjg1LFxuICAgICAgfSxcbiAgICB9LFxuICB9KSxcbiAgeyBuYW1lOiBCcmVhZGNydW1iU3R5bGVzS2V5IH1cbik7XG5cbmV4cG9ydCB0eXBlIEJyZWFkY3J1bWJDbGFzc2VzID0gR2V0Q2xhc3Nlczx0eXBlb2YgdXNlU3R5bGVzPjtcblxuZXhwb3J0IGludGVyZmFjZSBCcmVhZGNydW1iUHJvcHNcbiAgZXh0ZW5kcyBSZWFjdC5EZXRhaWxlZEhUTUxQcm9wczxcbiAgICBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MTElFbGVtZW50PixcbiAgICBIVE1MTElFbGVtZW50XG4gID4ge1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgY29sb3I/OiAnaW52ZXJzZScgfCAnZGVmYXVsdCc7XG4gIGlzQ3VycmVudFBhZ2U/OiBib29sZWFuO1xuICB0ZXh0OiBzdHJpbmc7XG4gIHVybDogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgQnJlYWRjcnVtYjogUmVhY3QuRkM8QnJlYWRjcnVtYlByb3BzPiA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgY29sb3IgPSAnZGVmYXVsdCcsXG4gIGlzQ3VycmVudFBhZ2UgPSBmYWxzZSxcbiAgdGV4dCxcbiAgdXJsLFxuICAuLi5yb290UHJvcHNcbn0pID0+IHtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcyh7fSk7XG5cbiAgcmV0dXJuIChcbiAgICA8bGlcbiAgICAgIGNsYXNzTmFtZT17Y2xzeChcbiAgICAgICAgY2xhc3Nlcy5yb290LFxuICAgICAgICB7XG4gICAgICAgICAgW2NsYXNzZXMucm9vdEludmVyc2VdOiBjb2xvciA9PT0gJ2ludmVyc2UnLFxuICAgICAgICB9LFxuICAgICAgICBjbGFzc05hbWVcbiAgICAgICl9XG4gICAgICB7Li4ucm9vdFByb3BzfVxuICAgID5cbiAgICAgIDxMaW5rXG4gICAgICAgIGFyaWEtY3VycmVudD17aXNDdXJyZW50UGFnZSA/ICdwYWdlJyA6IHVuZGVmaW5lZH1cbiAgICAgICAgY2xhc3NOYW1lPXtjbHN4KGNsYXNzZXMubGluaywge1xuICAgICAgICAgIFtjbGFzc2VzLmxpbmtJbnZlcnNlXTogY29sb3IgPT09ICdpbnZlcnNlJyxcbiAgICAgICAgfSl9XG4gICAgICAgIHRvPXt1cmx9XG4gICAgICA+XG4gICAgICAgIHt0ZXh0fVxuICAgICAgPC9MaW5rPlxuICAgIDwvbGk+XG4gICk7XG59O1xuIl19