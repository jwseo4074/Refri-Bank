"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var react_router_dom_1 = require("react-router-dom");
var index_1 = require("../../styles/index");
exports.BreadcrumbStylesKey = 'ChromaBreadcrumb';
exports.useStyles = index_1.makeStyles(function (theme) { return ({
    root: {
        display: 'inline',
        margin: 0,
        padding: 0,
        '& + li:before': {
            display: 'inline-block',
            marginTop: 0,
            marginBottom: 0,
            marginLeft: theme.spacing(1),
            marginRight: theme.spacing(1),
            transform: 'rotate(15deg)',
            borderRight: theme.pxToRem(1) + " solid " + theme.palette.text.dark,
            height: '0.75rem',
            content: "''",
        },
    },
    rootInverse: {
        '& + li:before': {
            borderRight: theme.pxToRem(1) + " solid " + theme.palette.common.white,
        },
    },
    link: {
        fontSize: theme.pxToRem(16),
        letterSpacing: theme.pxToRem(0.5),
        textDecoration: 'none',
        color: theme.palette.text.dark,
        transition: 'color 0.5s ease',
        '&:hover': {
            color: theme.palette.primary.main,
            textDecoration: 'underline',
        },
    },
    linkInverse: {
        color: theme.palette.common.white,
        transition: 'opacity 0.5s ease',
        opacity: 1,
        '&:hover': {
            color: theme.palette.common.white,
            opacity: 0.85,
        },
    },
}); }, { name: exports.BreadcrumbStylesKey });
exports.Breadcrumb = function (_a) {
    var _b, _c;
    var className = _a.className, _d = _a.color, color = _d === void 0 ? 'default' : _d, _e = _a.isCurrentPage, isCurrentPage = _e === void 0 ? false : _e, text = _a.text, url = _a.url, rootProps = __rest(_a, ["className", "color", "isCurrentPage", "text", "url"]);
    var classes = exports.useStyles({});
    return (React.createElement("li", __assign({ className: clsx_1.default(classes.root, (_b = {},
            _b[classes.rootInverse] = color === 'inverse',
            _b), className) }, rootProps),
        React.createElement(react_router_dom_1.Link, { "aria-current": isCurrentPage ? 'page' : undefined, className: clsx_1.default(classes.link, (_c = {},
                _c[classes.linkInverse] = color === 'inverse',
                _c)), to: url }, text)));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJlYWRjcnVtYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0JyZWFkY3J1bWJzL0JyZWFkY3J1bWIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw4Q0FBd0I7QUFDeEIsMkNBQStCO0FBQy9CLHFEQUF3QztBQUN4Qyw0Q0FBZ0Q7QUFHbkMsUUFBQSxtQkFBbUIsR0FBRyxrQkFBa0IsQ0FBQztBQUV6QyxRQUFBLFNBQVMsR0FBRyxrQkFBVSxDQUNqQyxVQUFDLEtBQUssSUFBSyxPQUFBLENBQUM7SUFDVixJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsUUFBUTtRQUNqQixNQUFNLEVBQUUsQ0FBQztRQUNULE9BQU8sRUFBRSxDQUFDO1FBQ1YsZUFBZSxFQUFFO1lBQ2YsT0FBTyxFQUFFLGNBQWM7WUFDdkIsU0FBUyxFQUFFLENBQUM7WUFDWixZQUFZLEVBQUUsQ0FBQztZQUNmLFVBQVUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUM1QixXQUFXLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDN0IsU0FBUyxFQUFFLGVBQWU7WUFDMUIsV0FBVyxFQUFLLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGVBQVUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBTTtZQUNuRSxNQUFNLEVBQUUsU0FBUztZQUNqQixPQUFPLEVBQUUsSUFBSTtTQUNkO0tBQ0Y7SUFDRCxXQUFXLEVBQUU7UUFDWCxlQUFlLEVBQUU7WUFDZixXQUFXLEVBQUssS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsZUFBVSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFPO1NBQ3ZFO0tBQ0Y7SUFDRCxJQUFJLEVBQUU7UUFDSixRQUFRLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDM0IsYUFBYSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQ2pDLGNBQWMsRUFBRSxNQUFNO1FBQ3RCLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJO1FBQzlCLFVBQVUsRUFBRSxpQkFBaUI7UUFDN0IsU0FBUyxFQUFFO1lBQ1QsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUk7WUFDakMsY0FBYyxFQUFFLFdBQVc7U0FDNUI7S0FDRjtJQUNELFdBQVcsRUFBRTtRQUNYLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLO1FBQ2pDLFVBQVUsRUFBRSxtQkFBbUI7UUFDL0IsT0FBTyxFQUFFLENBQUM7UUFDVixTQUFTLEVBQUU7WUFDVCxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSztZQUNqQyxPQUFPLEVBQUUsSUFBSTtTQUNkO0tBQ0Y7Q0FDRixDQUFDLEVBMUNTLENBMENULEVBQ0YsRUFBRSxJQUFJLEVBQUUsMkJBQW1CLEVBQUUsQ0FDOUIsQ0FBQztBQWVXLFFBQUEsVUFBVSxHQUE4QixVQUFDLEVBT3JEOztJQU5DLElBQUEsd0JBQVMsRUFDVCxhQUFpQixFQUFqQixzQ0FBaUIsRUFDakIscUJBQXFCLEVBQXJCLDBDQUFxQixFQUNyQixjQUFJLEVBQ0osWUFBRyxFQUNILDhFQUFZO0lBRVosSUFBTSxPQUFPLEdBQUcsaUJBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUU5QixPQUFPLENBQ0wscUNBQ0UsU0FBUyxFQUFFLGNBQUksQ0FDYixPQUFPLENBQUMsSUFBSTtZQUVWLEdBQUMsT0FBTyxDQUFDLFdBQVcsSUFBRyxLQUFLLEtBQUssU0FBUztpQkFFNUMsU0FBUyxDQUNWLElBQ0csU0FBUztRQUViLG9CQUFDLHVCQUFJLG9CQUNXLGFBQWEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQ2hELFNBQVMsRUFBRSxjQUFJLENBQUMsT0FBTyxDQUFDLElBQUk7Z0JBQzFCLEdBQUMsT0FBTyxDQUFDLFdBQVcsSUFBRyxLQUFLLEtBQUssU0FBUztvQkFDMUMsRUFDRixFQUFFLEVBQUUsR0FBRyxJQUVOLElBQUksQ0FDQSxDQUNKLENBQ04sQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJy4uLy4uL3N0eWxlcy9pbmRleCc7XG5pbXBvcnQgeyBHZXRDbGFzc2VzIH0gZnJvbSAnLi4vLi4vdHlwZVV0aWxzJztcblxuZXhwb3J0IGNvbnN0IEJyZWFkY3J1bWJTdHlsZXNLZXkgPSAnQ2hyb21hQnJlYWRjcnVtYic7XG5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAodGhlbWUpID0+ICh7XG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2lubGluZScsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgJyYgKyBsaTpiZWZvcmUnOiB7XG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICBtYXJnaW5Ub3A6IDAsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogMCxcbiAgICAgICAgbWFyZ2luTGVmdDogdGhlbWUuc3BhY2luZygxKSxcbiAgICAgICAgbWFyZ2luUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMSksXG4gICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgxNWRlZyknLFxuICAgICAgICBib3JkZXJSaWdodDogYCR7dGhlbWUucHhUb1JlbSgxKX0gc29saWQgJHt0aGVtZS5wYWxldHRlLnRleHQuZGFya31gLFxuICAgICAgICBoZWlnaHQ6ICcwLjc1cmVtJyxcbiAgICAgICAgY29udGVudDogYCcnYCxcbiAgICAgIH0sXG4gICAgfSxcbiAgICByb290SW52ZXJzZToge1xuICAgICAgJyYgKyBsaTpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlclJpZ2h0OiBgJHt0aGVtZS5weFRvUmVtKDEpfSBzb2xpZCAke3RoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlfWAsXG4gICAgICB9LFxuICAgIH0sXG4gICAgbGluazoge1xuICAgICAgZm9udFNpemU6IHRoZW1lLnB4VG9SZW0oMTYpLFxuICAgICAgbGV0dGVyU3BhY2luZzogdGhlbWUucHhUb1JlbSgwLjUpLFxuICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuZGFyayxcbiAgICAgIHRyYW5zaXRpb246ICdjb2xvciAwLjVzIGVhc2UnLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgICAgdGV4dERlY29yYXRpb246ICd1bmRlcmxpbmUnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGxpbmtJbnZlcnNlOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAwLjVzIGVhc2UnLFxuICAgICAgb3BhY2l0eTogMSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICAgIG9wYWNpdHk6IDAuODUsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pLFxuICB7IG5hbWU6IEJyZWFkY3J1bWJTdHlsZXNLZXkgfVxuKTtcblxuZXhwb3J0IHR5cGUgQnJlYWRjcnVtYkNsYXNzZXMgPSBHZXRDbGFzc2VzPHR5cGVvZiB1c2VTdHlsZXM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJyZWFkY3J1bWJQcm9wc1xuICBleHRlbmRzIFJlYWN0LkRldGFpbGVkSFRNTFByb3BzPFxuICAgIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxMSUVsZW1lbnQ+LFxuICAgIEhUTUxMSUVsZW1lbnRcbiAgPiB7XG4gIGNvbG9yPzogJ2ludmVyc2UnIHwgJ2RlZmF1bHQnO1xuICBpc0N1cnJlbnRQYWdlPzogYm9vbGVhbjtcbiAgdGV4dDogc3RyaW5nO1xuICB1cmw6IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IEJyZWFkY3J1bWI6IFJlYWN0LkZDPEJyZWFkY3J1bWJQcm9wcz4gPSAoe1xuICBjbGFzc05hbWUsXG4gIGNvbG9yID0gJ2RlZmF1bHQnLFxuICBpc0N1cnJlbnRQYWdlID0gZmFsc2UsXG4gIHRleHQsXG4gIHVybCxcbiAgLi4ucm9vdFByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoe30pO1xuXG4gIHJldHVybiAoXG4gICAgPGxpXG4gICAgICBjbGFzc05hbWU9e2Nsc3goXG4gICAgICAgIGNsYXNzZXMucm9vdCxcbiAgICAgICAge1xuICAgICAgICAgIFtjbGFzc2VzLnJvb3RJbnZlcnNlXTogY29sb3IgPT09ICdpbnZlcnNlJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2xhc3NOYW1lXG4gICAgICApfVxuICAgICAgey4uLnJvb3RQcm9wc31cbiAgICA+XG4gICAgICA8TGlua1xuICAgICAgICBhcmlhLWN1cnJlbnQ9e2lzQ3VycmVudFBhZ2UgPyAncGFnZScgOiB1bmRlZmluZWR9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLmxpbmssIHtcbiAgICAgICAgICBbY2xhc3Nlcy5saW5rSW52ZXJzZV06IGNvbG9yID09PSAnaW52ZXJzZScsXG4gICAgICAgIH0pfVxuICAgICAgICB0bz17dXJsfVxuICAgICAgPlxuICAgICAgICB7dGV4dH1cbiAgICAgIDwvTGluaz5cbiAgICA8L2xpPlxuICApO1xufTtcbiJdfQ==