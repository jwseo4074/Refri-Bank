import * as React from 'react';
import { BaseFormElement } from '../_private/forms';
import { GetClasses } from '../../typeUtils';
import 'focus-visible';
export declare const ColorPickerStylesKey = "ChromaColorPicker";
export declare const useStyles: (props: {}) => import("@material-ui/styles").ClassNameMap<"popover" | "input" | "label" | "color" | "root" | "inputInverse" | "labelInverse" | "errorMessage" | "helpMessage" | "tooltipContainer" | "labelSecondary" | "labelIcon" | "labelIconInverse" | "inputContainer" | "hasTrailer" | "inputError" | "inputErrorInverse" | "inputFullWidth" | "trailerMessage" | "errorMessageInverse" | "helpMessageInverse" | "valueDisplay" | "swatchButton" | "popoverList" | "popoverItem" | "colorButton" | "colorCircle" | "colorSquare">;
export declare const isValidHexColor: (color: string) => boolean;
export declare type ColorPickerClasses = GetClasses<typeof useStyles>;
export interface ColorPickerProps extends Omit<React.ComponentPropsWithoutRef<'input'>, 'onChange'> {
    color?: BaseFormElement['color'];
    colorSuggestions?: Array<string>;
    errorMessage?: BaseFormElement['errorMessage'];
    fullWidth?: boolean;
    hasError?: BaseFormElement['hasError'];
    helpMessage?: BaseFormElement['helpMessage'];
    icon?: React.ComponentType<React.SVGProps<SVGSVGElement>>;
    invalidColorText?: string;
    label?: BaseFormElement['label'];
    onChange?: (color: string) => void;
    secondaryLabel?: string;
    tooltipMessage?: string;
    value?: string;
    variant?: 'square' | 'circle';
}
export declare const ColorPicker: React.ForwardRefExoticComponent<ColorPickerProps & React.RefAttributes<HTMLInputElement>>;
