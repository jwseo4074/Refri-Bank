"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColorPicker = exports.isValidHexColor = exports.useStyles = exports.ColorPickerStylesKey = void 0;
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var forms_1 = require("../_private/forms");
var ButtonUnstyled_1 = require("../ButtonUnstyled");
var UniqueId_1 = require("../_private/UniqueId");
var styles_1 = require("../../styles");
var Popover_1 = require("../Popover");
var Tooltip_1 = require("../Tooltip");
var colorManipulator_1 = require("@material-ui/core/styles/colorManipulator");
require("focus-visible");
exports.ColorPickerStylesKey = 'ChromaColorPicker';
exports.useStyles = (0, styles_1.makeStyles)(function (theme) { return ({
    root: {},
    label: {
        alignItems: 'center',
        color: theme.palette.black[800],
        display: 'flex',
        fontSize: theme.pxToRem(14),
        fontWeight: theme.typography.fontWeightBold,
        marginBottom: theme.spacing(1),
        '&:empty': {
            marginBottom: theme.spacing(0),
        },
    },
    labelIcon: {
        marginLeft: theme.spacing(0.75),
        color: theme.palette.primary.main,
    },
    labelIconInverse: {
        mixBlendMode: 'screen',
    },
    labelSecondary: {
        color: theme.palette.text.hint,
        fontSize: theme.pxToRem(11),
        display: 'inline-block',
        margin: theme.spacing(0, 0.75),
    },
    labelInverse: {
        color: theme.palette.common.white,
        '&$labelSecondary': {
            opacity: 0.9,
        },
    },
    input: {
        backgroundColor: 'rgba(132, 137, 166, 0.15)',
        border: "1px solid transparent",
        borderRadius: theme.pxToRem(4),
        color: theme.palette.text.primary,
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.pxToRem(14),
        minWidth: theme.pxToRem(175),
        lineHeight: 1.25,
        paddingBottom: theme.spacing(1),
        paddingLeft: theme.spacing(1.25),
        paddingRight: theme.spacing(1.25),
        paddingTop: theme.spacing(1),
        transition: 'border 0.25s ease',
        '&:focus': {
            outline: 'none',
            backgroundColor: 'rgba(255, 255, 255, 0.5)',
            border: "1px solid rgba(132, 137, 166, 0.45)",
        },
        '&:disabled': {
            cursor: 'not-allowed',
            opacity: 0.625,
        },
        '&:read-only': {
            cursor: 'not-allowed',
            opacity: 0.9,
            '&:focus': {
                backgroundColor: 'rgba(132, 137, 166, 0.15)',
                border: "1px solid transparent",
            },
        },
        '&::-webkit-input-placeholder': {
            color: theme.palette.black[400],
        },
        '&::-moz-placeholder': {
            color: theme.palette.black[400],
        },
        '&:-ms-input-placeholder': {
            color: theme.palette.black[400],
        },
        '&:-moz-placeholder': {
            color: theme.palette.black[400],
        },
    },
    inputInverse: {
        backgroundColor: 'rgba(230, 231, 237, 0.1)',
        color: theme.palette.common.white,
        '&:focus': {
            backgroundColor: 'rgba(230, 231, 237, 0.1)',
            border: "1px solid rgba(230, 231, 237, 0.55)",
        },
        '&:read-only': {
            opacity: 1,
            '&:focus': {
                backgroundColor: 'rgba(230, 231, 237, 0.1)',
            },
        },
        '&::-webkit-input-placeholder': {
            color: 'rgba(255, 255, 255, 0.8)',
        },
        '&::-moz-placeholder': {
            color: 'rgba(255, 255, 255, 0.8)',
        },
        '&:-ms-input-placeholder': {
            color: 'rgba(255, 255, 255, 0.8)',
        },
        '&:-moz-placeholder': {
            color: 'rgba(255, 255, 255, 0.8)',
        },
    },
    hasTrailer: {
        marginBottom: theme.spacing(0.5),
    },
    inputContainer: {
        position: 'relative',
        width: 'fit-content',
    },
    inputError: {
        backgroundColor: 'rgba(230, 231, 237, 0.1)',
        border: "1px solid ".concat(theme.palette.error.main),
        '&:focus': {
            border: "1px solid ".concat(theme.palette.error.main),
        },
    },
    inputErrorInverse: {
        border: "1px solid ".concat(theme.palette.error[700]),
    },
    inputFullWidth: {
        width: '100%',
    },
    trailerMessage: {
        marginTop: theme.spacing(0.875),
        marginLeft: 0,
    },
    errorMessage: {
        color: theme.palette.error.main,
        fontSize: theme.typography.caption.fontSize,
        fontWeight: theme.typography.fontWeightBold,
    },
    errorMessageInverse: {
        mixBlendMode: 'color-dodge',
    },
    helpMessage: {
        fontSize: theme.typography.caption.fontSize,
        color: theme.palette.text.hint,
    },
    helpMessageInverse: {
        color: theme.palette.common.white,
    },
    tooltipContainer: {
        display: 'flex',
        outline: 'none',
    },
    valueDisplay: {
        alignItems: 'center',
        display: 'flex',
        height: theme.pxToRem(50),
        justifyContent: 'center',
        position: 'relative',
        '&::after': {
            background: (0, colorManipulator_1.fade)(theme.palette.common.black, 0.25),
            bottom: 0,
            content: "''",
            height: theme.pxToRem(1),
            position: 'absolute',
            width: '100%',
        },
    },
    swatchButton: {
        height: theme.pxToRem(20),
        width: theme.pxToRem(20),
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
    },
    popover: {
        minWidth: 'unset',
    },
    popoverList: {
        display: 'grid',
        gridGap: theme.spacing(1.5),
        gridTemplateColumns: "repeat(6, ".concat(theme.pxToRem(20), ")"),
        margin: theme.spacing(2),
        padding: 0,
        '& $color': {
            margin: 0,
        },
        '&:focus': {
            outline: 'none',
        },
        // We use this + a polyfill for older browser
        // to get accessible buttons for keyboard-users.
        // Users will not see these styles unless they use their keyboard
        // to focus the element
        '&:focus.focus-visible': {
            outline: "solid 2px ".concat(theme.palette.primary.main),
            outlineOffset: theme.spacing(1),
        },
    },
    popoverItem: {
        padding: 0,
    },
    colorButton: {
        transition: 'transform 0.25s ease-in-out',
        transform: 'scale(1)',
        '&:hover,&:focus': {
            transform: 'scale(1.2)',
        },
    },
    color: {
        boxShadow: 'inset 0 0 3px rgb(38 44 50 / 20%)',
        display: 'block',
        height: theme.pxToRem(20),
        width: theme.pxToRem(20),
    },
    colorCircle: {
        borderRadius: theme.pxToRem(10),
    },
    colorSquare: {
        borderRadius: theme.pxToRem(4),
    },
}); }, { name: exports.ColorPickerStylesKey });
var isValidHexColor = function (color) {
    var hexRegex = new RegExp(/^#[0-9A-F]{6}$/i);
    var shortHandHexRegex = new RegExp(/^#([0-9A-F]{3}){1,2}$/i);
    return hexRegex.test(color) || shortHandHexRegex.test(color);
};
exports.isValidHexColor = isValidHexColor;
exports.ColorPicker = React.forwardRef(function (_a, ref) {
    var _b;
    var ariaLabel = _a["aria-label"], className = _a.className, _c = _a.color, color = _c === void 0 ? 'default' : _c, colorSuggestions = _a.colorSuggestions, disabled = _a.disabled, errorMessage = _a.errorMessage, fullWidth = _a.fullWidth, hasError = _a.hasError, helpMessage = _a.helpMessage, Icon = _a.icon, id = _a.id, _d = _a.invalidColorText, invalidColorText = _d === void 0 ? 'Invalid Color' : _d, label = _a.label, name = _a.name, onChange = _a.onChange, readOnly = _a.readOnly, secondaryLabel = _a.secondaryLabel, tooltipMessage = _a.tooltipMessage, _e = _a.value, value = _e === void 0 ? '' : _e, _f = _a.variant, variant = _f === void 0 ? 'square' : _f, rootProps = __rest(_a, ['aria-label', "className", "color", "colorSuggestions", "disabled", "errorMessage", "fullWidth", "hasError", "helpMessage", "icon", "id", "invalidColorText", "label", "name", "onChange", "readOnly", "secondaryLabel", "tooltipMessage", "value", "variant"]);
    var _g = React.useState(value), colorValue = _g[0], setColorValue = _g[1];
    var classes = (0, exports.useStyles)({});
    var palette = (0, styles_1.useTheme)().palette;
    var colors = (colorSuggestions === null || colorSuggestions === void 0 ? void 0 : colorSuggestions.length)
        ? colorSuggestions
        : [
            palette.red.main,
            palette.red.light,
            palette.orange.main,
            palette.orange.light,
            palette.yellow.main,
            palette.yellow.light,
            palette.green.main,
            palette.green.light,
            palette.blue.main,
            palette.blue.light,
            palette.purple.main,
            palette.purple.light,
            palette.black.main,
            palette.black.light,
            palette.common.white,
        ];
    var isValidColor = (0, exports.isValidHexColor)(colorValue);
    var uniqueId = React.useState(function () { return id || name || (0, UniqueId_1.generateUniqueId)('ColorPicker-'); })[0];
    // istanbul ignore if - not testing dev errors
    if (!label && !ariaLabel && process.env.NODE_ENV === 'development') {
        throw new Error('If a "label" is not provided to ColorPicker, please provide "aria-label".');
    }
    var Color = function (_a) {
        var className = _a.className, color = _a.color;
        return (React.createElement("span", { className: (0, clsx_1.default)(className, classes.color, variant === 'circle' && classes.colorCircle, variant === 'square' && classes.colorSquare), style: {
                backgroundColor: (0, exports.isValidHexColor)(color) ? color : '#000000',
            } }));
    };
    var handleChange = function (color) {
        setColorValue(color);
        // istanbul ignore next - not a great way to test not calling onChange
        onChange === null || onChange === void 0 ? void 0 : onChange(color);
    };
    return (React.createElement("div", { className: (0, clsx_1.default)(classes.root, className) },
        label && (React.createElement("label", { className: (0, clsx_1.default)(classes.label, color === 'inverse' && classes.labelInverse), htmlFor: uniqueId },
            label,
            !!Icon && tooltipMessage && (React.createElement(Tooltip_1.Tooltip, { title: tooltipMessage },
                React.createElement("span", { className: classes.tooltipContainer },
                    React.createElement(Icon, { "aria-hidden": true, className: (0, clsx_1.default)(classes.labelIcon, color === 'inverse' && classes.labelIconInverse), height: 16, width: 16, role: "img" })))),
            secondaryLabel && (React.createElement("span", { className: (0, clsx_1.default)(classes.labelSecondary, color === 'inverse' && classes.labelInverse) }, secondaryLabel)))),
        React.createElement("div", { className: (0, clsx_1.default)(classes.inputContainer, fullWidth && classes.inputFullWidth) },
            React.createElement("input", __assign({ "aria-describedby": (0, forms_1.buildDescribedBy)({
                    hasError: hasError,
                    hasHelpMessage: !!helpMessage,
                    uniqueId: uniqueId,
                }), "aria-label": ariaLabel, className: (0, clsx_1.default)(classes.input, fullWidth && classes.inputFullWidth, hasError && classes.inputError, hasError && color === 'inverse' && classes.inputErrorInverse, (_b = {}, _b[classes.inputInverse] = color === 'inverse', _b)), disabled: disabled, id: uniqueId, name: name, onChange: function (e) { return handleChange(e.target.value); }, readOnly: readOnly, ref: ref, type: "text", value: colorValue }, rootProps)),
            React.createElement(Popover_1.Popover, { anchorElement: React.createElement(ButtonUnstyled_1.ButtonUnstyled, { className: classes.swatchButton, "aria-label": "Pick color", disabled: disabled || readOnly },
                    React.createElement(Color, { color: colorValue })), "aria-label": "Color Picker", className: classes.popover }, function (_a) {
                var popover = _a.popover;
                return (React.createElement(React.Fragment, null,
                    React.createElement("div", { className: classes.valueDisplay, style: {
                            backgroundColor: isValidColor
                                ? value
                                : palette.common.black,
                            color: (0, exports.isValidHexColor)(value)
                                ? palette.getContrastText(value)
                                : palette.common.white,
                        } }, isValidColor ? value : invalidColorText),
                    React.createElement(Popover_1.PopoverList, { className: classes.popoverList }, colors.map(function (color, index) { return (React.createElement(Popover_1.PopoverItem, { className: classes.popoverItem, key: index },
                        React.createElement(ButtonUnstyled_1.ButtonUnstyled, { "aria-label": "Pick ".concat(color), className: classes.colorButton, onClick: function () {
                                // istanbul ignore next - not a great way to test not calling onChange
                                handleChange === null || handleChange === void 0 ? void 0 : handleChange(color);
                                popover.hide();
                            } },
                            React.createElement(Color, { color: color })))); }))));
            })),
        helpMessage && (React.createElement(forms_1.FormHelpMessage, { color: color, className: (0, clsx_1.default)(classes.trailerMessage, classes.helpMessage, color === 'inverse' && classes.helpMessageInverse), describedById: (0, forms_1.helpFor)(uniqueId), rootElementId: uniqueId }, helpMessage)),
        hasError && errorMessage && (React.createElement(forms_1.FormErrorMessage, { className: (0, clsx_1.default)(classes.trailerMessage), color: color, describedById: (0, forms_1.errorFor)(uniqueId), rootElementId: uniqueId }, errorMessage))));
});
//# sourceMappingURL=data:application/json;base64,