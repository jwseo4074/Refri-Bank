"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var styles_1 = require("../../styles");
exports.StepConnectorStylesKey = 'ChromaStepConnector';
exports.useStyles = styles_1.makeStyles(function (theme) { return ({
    connectorRoot: {
        flex: 1,
        position: 'relative',
        top: theme.pxToRem(-23),
        '@media screen and (max-width: 850px)': {
            display: 'none',
        },
    },
    subTitle: {
        top: theme.pxToRem(-33),
    },
    subTitlePill: {
        top: theme.pxToRem(-38),
    },
    line: {
        border: "1px solid " + theme.palette.black[200],
        display: 'block',
        position: 'absolute',
        right: theme.pxToRem(-16),
        transition: 'border .5s ease',
        width: "calc(100% + " + theme.pxToRem(32) + ")",
    },
    activeLine: {
        border: "1px solid " + theme.palette.primary.main,
    },
}); }, { name: exports.StepConnectorStylesKey });
exports.StepConnector = function (_a) {
    var active = _a.active, className = _a.className, completed = _a.completed, hasSubTitle = _a.hasSubTitle, hasSubTitlePill = _a.hasSubTitlePill, rootProps = __rest(_a, ["active", "className", "completed", "hasSubTitle", "hasSubTitlePill"]);
    var classes = exports.useStyles({});
    return (React.createElement("div", __assign({ className: clsx_1.default(classes.connectorRoot, hasSubTitle && classes.subTitle, hasSubTitlePill && classes.subTitlePill, className), role: "presentation" }, rootProps),
        React.createElement("span", { className: clsx_1.default(classes.line, (active || completed) && classes.activeLine) })));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RlcENvbm5lY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1N0ZXBwZXIvU3RlcENvbm5lY3Rvci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDhDQUF3QjtBQUN4QiwyQ0FBK0I7QUFDL0IsdUNBQTBDO0FBRzdCLFFBQUEsc0JBQXNCLEdBQUcscUJBQXFCLENBQUM7QUFFL0MsUUFBQSxTQUFTLEdBQUcsbUJBQVUsQ0FDakMsVUFBQyxLQUFLLElBQUssT0FBQSxDQUFDO0lBQ1YsYUFBYSxFQUFFO1FBQ2IsSUFBSSxFQUFFLENBQUM7UUFDUCxRQUFRLEVBQUUsVUFBVTtRQUNwQixHQUFHLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUV2QixzQ0FBc0MsRUFBRTtZQUN0QyxPQUFPLEVBQUUsTUFBTTtTQUNoQjtLQUNGO0lBQ0QsUUFBUSxFQUFFO1FBQ1IsR0FBRyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUM7S0FDeEI7SUFDRCxZQUFZLEVBQUU7UUFDWixHQUFHLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQztLQUN4QjtJQUNELElBQUksRUFBRTtRQUNKLE1BQU0sRUFBRSxlQUFhLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBRztRQUMvQyxPQUFPLEVBQUUsT0FBTztRQUNoQixRQUFRLEVBQUUsVUFBVTtRQUNwQixLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUN6QixVQUFVLEVBQUUsaUJBQWlCO1FBQzdCLEtBQUssRUFBRSxpQkFBZSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFHO0tBQzNDO0lBQ0QsVUFBVSxFQUFFO1FBQ1YsTUFBTSxFQUFFLGVBQWEsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBTTtLQUNsRDtDQUNGLENBQUMsRUEzQlMsQ0EyQlQsRUFDRixFQUFFLElBQUksRUFBRSw4QkFBc0IsRUFBRSxDQUNqQyxDQUFDO0FBWVcsUUFBQSxhQUFhLEdBQWlDLFVBQUMsRUFPM0Q7SUFOQyxJQUFBLGtCQUFNLEVBQ04sd0JBQVMsRUFDVCx3QkFBUyxFQUNULDRCQUFXLEVBQ1gsb0NBQWUsRUFDZiw4RkFBWTtJQUVaLElBQU0sT0FBTyxHQUFHLGlCQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUIsT0FBTyxDQUNMLHNDQUNFLFNBQVMsRUFBRSxjQUFJLENBQ2IsT0FBTyxDQUFDLGFBQWEsRUFDckIsV0FBVyxJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQy9CLGVBQWUsSUFBSSxPQUFPLENBQUMsWUFBWSxFQUN2QyxTQUFTLENBQ1YsRUFDRCxJQUFJLEVBQUMsY0FBYyxJQUNmLFNBQVM7UUFFYiw4QkFDRSxTQUFTLEVBQUUsY0FBSSxDQUNiLE9BQU8sQ0FBQyxJQUFJLEVBQ1osQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFDLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FDNUMsR0FDRCxDQUNFLENBQ1AsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJy4uLy4uL3N0eWxlcyc7XG5pbXBvcnQgeyBHZXRDbGFzc2VzIH0gZnJvbSAnLi4vLi4vdHlwZVV0aWxzJztcblxuZXhwb3J0IGNvbnN0IFN0ZXBDb25uZWN0b3JTdHlsZXNLZXkgPSAnQ2hyb21hU3RlcENvbm5lY3Rvcic7XG5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAodGhlbWUpID0+ICh7XG4gICAgY29ubmVjdG9yUm9vdDoge1xuICAgICAgZmxleDogMSxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgdG9wOiB0aGVtZS5weFRvUmVtKC0yMyksXG5cbiAgICAgICdAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA4NTBweCknOiB7XG4gICAgICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBzdWJUaXRsZToge1xuICAgICAgdG9wOiB0aGVtZS5weFRvUmVtKC0zMyksXG4gICAgfSxcbiAgICBzdWJUaXRsZVBpbGw6IHtcbiAgICAgIHRvcDogdGhlbWUucHhUb1JlbSgtMzgpLFxuICAgIH0sXG4gICAgbGluZToge1xuICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5ibGFja1syMDBdfWAsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICByaWdodDogdGhlbWUucHhUb1JlbSgtMTYpLFxuICAgICAgdHJhbnNpdGlvbjogJ2JvcmRlciAuNXMgZWFzZScsXG4gICAgICB3aWR0aDogYGNhbGMoMTAwJSArICR7dGhlbWUucHhUb1JlbSgzMil9KWAsXG4gICAgfSxcbiAgICBhY3RpdmVMaW5lOiB7XG4gICAgICBib3JkZXI6IGAxcHggc29saWQgJHt0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbn1gLFxuICAgIH0sXG4gIH0pLFxuICB7IG5hbWU6IFN0ZXBDb25uZWN0b3JTdHlsZXNLZXkgfVxuKTtcblxuZXhwb3J0IHR5cGUgU3RlcENvbm5lY3RvckNsYXNzZXMgPSBHZXRDbGFzc2VzPHR5cGVvZiB1c2VTdHlsZXM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0ZXBDb25uZWN0b3JQcm9wcyB7XG4gIGFjdGl2ZT86IGJvb2xlYW47XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgY29tcGxldGVkPzogYm9vbGVhbjtcbiAgaGFzU3ViVGl0bGU/OiBib29sZWFuO1xuICBoYXNTdWJUaXRsZVBpbGw/OiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgU3RlcENvbm5lY3RvcjogUmVhY3QuRkM8U3RlcENvbm5lY3RvclByb3BzPiA9ICh7XG4gIGFjdGl2ZSxcbiAgY2xhc3NOYW1lLFxuICBjb21wbGV0ZWQsXG4gIGhhc1N1YlRpdGxlLFxuICBoYXNTdWJUaXRsZVBpbGwsXG4gIC4uLnJvb3RQcm9wc1xufSkgPT4ge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKHt9KTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e2Nsc3goXG4gICAgICAgIGNsYXNzZXMuY29ubmVjdG9yUm9vdCxcbiAgICAgICAgaGFzU3ViVGl0bGUgJiYgY2xhc3Nlcy5zdWJUaXRsZSxcbiAgICAgICAgaGFzU3ViVGl0bGVQaWxsICYmIGNsYXNzZXMuc3ViVGl0bGVQaWxsLFxuICAgICAgICBjbGFzc05hbWVcbiAgICAgICl9XG4gICAgICByb2xlPVwicHJlc2VudGF0aW9uXCJcbiAgICAgIHsuLi5yb290UHJvcHN9XG4gICAgPlxuICAgICAgPHNwYW5cbiAgICAgICAgY2xhc3NOYW1lPXtjbHN4KFxuICAgICAgICAgIGNsYXNzZXMubGluZSxcbiAgICAgICAgICAoYWN0aXZlIHx8IGNvbXBsZXRlZCkgJiYgY2xhc3Nlcy5hY3RpdmVMaW5lXG4gICAgICAgICl9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdfQ==