"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var styles_1 = require("../../styles");
var Box_1 = require("../Box");
var StepConnector_1 = require("./StepConnector");
exports.StepperStylesKey = 'ChromaStepper';
exports.useStyles = styles_1.makeStyles(function (theme) { return ({
    root: {
        backgroundColor: theme.palette.common.white,
    },
    innerRoot: {
        margin: theme.spacing(4, 4, 0, 4),
    },
}); }, { name: exports.StepperStylesKey });
exports.Stepper = function (_a) {
    var activeStep = _a.activeStep, _b = _a.as, as = _b === void 0 ? 'button' : _b, children = _a.children, className = _a.className, connectorClassName = _a.connectorClassName, onClick = _a.onClick, rootProps = __rest(_a, ["activeStep", "as", "children", "className", "connectorClassName", "onClick"]);
    var classes = exports.useStyles({});
    var childrenArray = Array.isArray(children)
        ? children
        : React.Children.toArray(children);
    var steps = childrenArray.map(function (child, index) {
        var childrenProps = {
            active: false,
            as: as,
            completed: false,
            index: index,
            onClick: onClick,
        };
        if (activeStep === index) {
            childrenProps.active = true;
        }
        else if (activeStep > index) {
            childrenProps.completed = true;
        }
        var connector = React.createElement(StepConnector_1.StepConnector, null);
        return [
            index !== 0 &&
                React.cloneElement(connector, __assign({ className: connectorClassName, hasSubTitle: child.props.subTitle, hasSubTitlePill: child.props.subTitlePillLabel, key: "connector-" + index }, childrenProps)),
            React.cloneElement(child, __assign({ key: "step-" + index }, childrenProps)),
        ];
    });
    return (React.createElement(Box_1.Box, __assign({ fullWidth: true, className: clsx_1.default(classes.root, className) }, rootProps),
        React.createElement(Box_1.Box, { align: "center", className: classes.innerRoot, fullWidth: true, justify: "space-between" }, steps)));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RlcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1N0ZXBwZXIvU3RlcHBlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDhDQUF3QjtBQUN4QiwyQ0FBK0I7QUFDL0IsdUNBQTBDO0FBRTFDLDhCQUE2QjtBQUM3QixpREFBZ0Q7QUFFbkMsUUFBQSxnQkFBZ0IsR0FBRyxlQUFlLENBQUM7QUFFbkMsUUFBQSxTQUFTLEdBQUcsbUJBQVUsQ0FDakMsVUFBQyxLQUFLLElBQUssT0FBQSxDQUFDO0lBQ1YsSUFBSSxFQUFFO1FBQ0osZUFBZSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUs7S0FDNUM7SUFDRCxTQUFTLEVBQUU7UUFDVCxNQUFNLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDbEM7Q0FDRixDQUFDLEVBUFMsQ0FPVCxFQUNGLEVBQUUsSUFBSSxFQUFFLHdCQUFnQixFQUFFLENBQzNCLENBQUM7QUFhVyxRQUFBLE9BQU8sR0FBMkIsVUFBQyxFQVEvQztJQVBDLElBQUEsMEJBQVUsRUFDVixVQUFhLEVBQWIsa0NBQWEsRUFDYixzQkFBUSxFQUNSLHdCQUFTLEVBQ1QsMENBQWtCLEVBQ2xCLG9CQUFPLEVBQ1Asc0dBQVk7SUFFWixJQUFNLE9BQU8sR0FBRyxpQkFBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLElBQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO1FBQzNDLENBQUMsQ0FBQyxRQUFRO1FBQ1YsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRXJDLElBQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsVUFBQyxLQUFVLEVBQUUsS0FBYTtRQUN4RCxJQUFNLGFBQWEsR0FBRztZQUNwQixNQUFNLEVBQUUsS0FBSztZQUNiLEVBQUUsSUFBQTtZQUNGLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLEtBQUssT0FBQTtZQUNMLE9BQU8sU0FBQTtTQUNSLENBQUM7UUFFRixJQUFJLFVBQVUsS0FBSyxLQUFLLEVBQUU7WUFDeEIsYUFBYSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7U0FDN0I7YUFBTSxJQUFJLFVBQVUsR0FBRyxLQUFLLEVBQUU7WUFDN0IsYUFBYSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDaEM7UUFFRCxJQUFNLFNBQVMsR0FBRyxvQkFBQyw2QkFBYSxPQUFHLENBQUM7UUFFcEMsT0FBTztZQUNMLEtBQUssS0FBSyxDQUFDO2dCQUNULEtBQUssQ0FBQyxZQUFZLENBQUMsU0FBUyxhQUMxQixTQUFTLEVBQUUsa0JBQWtCLEVBQzdCLFdBQVcsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFDakMsZUFBZSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQzlDLEdBQUcsRUFBRSxlQUFhLEtBQU8sSUFDdEIsYUFBYSxFQUNoQjtZQUNKLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSyxhQUFJLEdBQUcsRUFBRSxVQUFRLEtBQU8sSUFBSyxhQUFhLEVBQUc7U0FDdEUsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUNMLG9CQUFDLFNBQUcsYUFBQyxTQUFTLFFBQUMsU0FBUyxFQUFFLGNBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFNLFNBQVM7UUFDcEUsb0JBQUMsU0FBRyxJQUNGLEtBQUssRUFBQyxRQUFRLEVBQ2QsU0FBUyxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQzVCLFNBQVMsUUFDVCxPQUFPLEVBQUMsZUFBZSxJQUV0QixLQUFLLENBQ0YsQ0FDRixDQUNQLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICcuLi8uLi9zdHlsZXMnO1xuaW1wb3J0IHsgR2V0Q2xhc3NlcyB9IGZyb20gJy4uLy4uL3R5cGVVdGlscyc7XG5pbXBvcnQgeyBCb3ggfSBmcm9tICcuLi9Cb3gnO1xuaW1wb3J0IHsgU3RlcENvbm5lY3RvciB9IGZyb20gJy4vU3RlcENvbm5lY3Rvcic7XG5cbmV4cG9ydCBjb25zdCBTdGVwcGVyU3R5bGVzS2V5ID0gJ0Nocm9tYVN0ZXBwZXInO1xuXG5leHBvcnQgY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhcbiAgKHRoZW1lKSA9PiAoe1xuICAgIHJvb3Q6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgfSxcbiAgICBpbm5lclJvb3Q6IHtcbiAgICAgIG1hcmdpbjogdGhlbWUuc3BhY2luZyg0LCA0LCAwLCA0KSxcbiAgICB9LFxuICB9KSxcbiAgeyBuYW1lOiBTdGVwcGVyU3R5bGVzS2V5IH1cbik7XG5cbmV4cG9ydCB0eXBlIFN0ZXBwZXJDbGFzc2VzID0gR2V0Q2xhc3Nlczx0eXBlb2YgdXNlU3R5bGVzPjtcblxuZXhwb3J0IGludGVyZmFjZSBTdGVwcGVyUHJvcHMge1xuICBhY3RpdmVTdGVwOiBudW1iZXI7XG4gIGFzPzogJ2J1dHRvbicgfCAnZGl2JztcbiAgY2hpbGRyZW46IGFueTtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBjb25uZWN0b3JDbGFzc05hbWU/OiBzdHJpbmc7XG4gIG9uQ2xpY2s/OiAoaW5kZXg6IG51bWJlcikgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IFN0ZXBwZXI6IFJlYWN0LkZDPFN0ZXBwZXJQcm9wcz4gPSAoe1xuICBhY3RpdmVTdGVwLFxuICBhcyA9ICdidXR0b24nLFxuICBjaGlsZHJlbixcbiAgY2xhc3NOYW1lLFxuICBjb25uZWN0b3JDbGFzc05hbWUsXG4gIG9uQ2xpY2ssXG4gIC4uLnJvb3RQcm9wc1xufSkgPT4ge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKHt9KTtcbiAgY29uc3QgY2hpbGRyZW5BcnJheSA9IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pXG4gICAgPyBjaGlsZHJlblxuICAgIDogUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlbik7XG5cbiAgY29uc3Qgc3RlcHMgPSBjaGlsZHJlbkFycmF5Lm1hcCgoY2hpbGQ6IGFueSwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IGNoaWxkcmVuUHJvcHMgPSB7XG4gICAgICBhY3RpdmU6IGZhbHNlLFxuICAgICAgYXMsXG4gICAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICAgICAgaW5kZXgsXG4gICAgICBvbkNsaWNrLFxuICAgIH07XG5cbiAgICBpZiAoYWN0aXZlU3RlcCA9PT0gaW5kZXgpIHtcbiAgICAgIGNoaWxkcmVuUHJvcHMuYWN0aXZlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGFjdGl2ZVN0ZXAgPiBpbmRleCkge1xuICAgICAgY2hpbGRyZW5Qcm9wcy5jb21wbGV0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbm5lY3RvciA9IDxTdGVwQ29ubmVjdG9yIC8+O1xuXG4gICAgcmV0dXJuIFtcbiAgICAgIGluZGV4ICE9PSAwICYmXG4gICAgICAgIFJlYWN0LmNsb25lRWxlbWVudChjb25uZWN0b3IsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNvbm5lY3RvckNsYXNzTmFtZSxcbiAgICAgICAgICBoYXNTdWJUaXRsZTogY2hpbGQucHJvcHMuc3ViVGl0bGUsXG4gICAgICAgICAgaGFzU3ViVGl0bGVQaWxsOiBjaGlsZC5wcm9wcy5zdWJUaXRsZVBpbGxMYWJlbCxcbiAgICAgICAgICBrZXk6IGBjb25uZWN0b3ItJHtpbmRleH1gLFxuICAgICAgICAgIC4uLmNoaWxkcmVuUHJvcHMsXG4gICAgICAgIH0pLFxuICAgICAgUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7IGtleTogYHN0ZXAtJHtpbmRleH1gLCAuLi5jaGlsZHJlblByb3BzIH0pLFxuICAgIF07XG4gIH0pO1xuXG4gIHJldHVybiAoXG4gICAgPEJveCBmdWxsV2lkdGggY2xhc3NOYW1lPXtjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKX0gey4uLnJvb3RQcm9wc30+XG4gICAgICA8Qm94XG4gICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmlubmVyUm9vdH1cbiAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgIGp1c3RpZnk9XCJzcGFjZS1iZXR3ZWVuXCJcbiAgICAgID5cbiAgICAgICAge3N0ZXBzfVxuICAgICAgPC9Cb3g+XG4gICAgPC9Cb3g+XG4gICk7XG59O1xuIl19