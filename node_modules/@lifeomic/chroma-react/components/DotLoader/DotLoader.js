"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var clsx_1 = __importDefault(require("clsx"));
var React = __importStar(require("react"));
var styles_1 = require("../../styles");
var framer_motion_1 = require("framer-motion");
exports.DotLoaderStylesKey = 'ChromaDotLoader';
exports.useStyles = styles_1.makeStyles(function (theme) { return ({
    root: {
        height: theme.pxToRem(100),
        width: theme.pxToRem(100),
    },
    size0: {
        height: theme.pxToRem(25),
        width: theme.pxToRem(25),
    },
    size1: {
        height: theme.pxToRem(50),
        width: theme.pxToRem(50),
    },
    '@keyframes bounce': {
        '0%': {
            transform: 'translate3d(0, 0, 0)',
        },
        '50%': {
            transform: 'translate3d(0, 1rem, 0)',
        },
        '100%': {
            transform: 'translate3d(0, 0, 0)',
        },
    },
    bounce1: {
        animation: '$bounce 1s 0s infinite',
        fill: theme.palette.red.main,
    },
    bounce2: {
        animation: '$bounce 1s 0.2s infinite',
        fill: '#F7C44D',
    },
    bounce3: {
        animation: '$bounce 1s 0.4s infinite',
        fill: '#09BEEF',
    },
    bounce4: {
        animation: '$bounce 1s 0.6s infinite',
        fill: theme.palette.green.light,
    },
}); }, { name: exports.DotLoaderStylesKey });
exports.DotLoader = function (_a) {
    var _b;
    var size = _a.size, dotStyle = _a.dotStyle, rootProps = __rest(_a, ["size", "dotStyle"]);
    var classes = exports.useStyles({});
    return (React.createElement(framer_motion_1.AnimatePresence, null,
        React.createElement(framer_motion_1.motion.svg, __assign({ role: "progressbar", version: "1.1", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", viewBox: "0 0 72 78", className: clsx_1.default(classes.root, (_b = {},
                _b[classes.size0] = size === 0,
                _b[classes.size1] = size === 1,
                _b)), initial: { opacity: 0 }, animate: { opacity: 1, transition: { duration: 0.3 } }, exit: { opacity: 0, transition: { duration: 0.25 } } }, rootProps),
            React.createElement("circle", { stroke: "none", cx: "6", cy: "28", r: "6", className: clsx_1.default(classes.bounce1, dotStyle) }),
            React.createElement("circle", { stroke: "none", cx: "26", cy: "28", r: "6", className: clsx_1.default(classes.bounce2, dotStyle) }),
            React.createElement("circle", { stroke: "none", cx: "46", cy: "28", r: "6", className: clsx_1.default(classes.bounce3, dotStyle) }),
            React.createElement("circle", { stroke: "none", cx: "66", cy: "28", r: "6", className: clsx_1.default(classes.bounce4, dotStyle) }))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG90TG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRG90TG9hZGVyL0RvdExvYWRlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDhDQUF3QztBQUN4QywyQ0FBK0I7QUFDL0IsdUNBQTBDO0FBRTFDLCtDQUFxRTtBQUV4RCxRQUFBLGtCQUFrQixHQUFHLGlCQUFpQixDQUFDO0FBRXZDLFFBQUEsU0FBUyxHQUFHLG1CQUFVLENBQ2pDLFVBQUMsS0FBSyxJQUFLLE9BQUEsQ0FBQztJQUNWLElBQUksRUFBRTtRQUNKLE1BQU0sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUMxQixLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7S0FDMUI7SUFDRCxLQUFLLEVBQUU7UUFDTCxNQUFNLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDekIsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO0tBQ3pCO0lBQ0QsS0FBSyxFQUFFO1FBQ0wsTUFBTSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ3pCLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztLQUN6QjtJQUNELG1CQUFtQixFQUFFO1FBQ25CLElBQUksRUFBRTtZQUNKLFNBQVMsRUFBRSxzQkFBc0I7U0FDbEM7UUFDRCxLQUFLLEVBQUU7WUFDTCxTQUFTLEVBQUUseUJBQXlCO1NBQ3JDO1FBQ0QsTUFBTSxFQUFFO1lBQ04sU0FBUyxFQUFFLHNCQUFzQjtTQUNsQztLQUNGO0lBQ0QsT0FBTyxFQUFFO1FBQ1AsU0FBUyxFQUFFLHdCQUF3QjtRQUNuQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSTtLQUM3QjtJQUNELE9BQU8sRUFBRTtRQUNQLFNBQVMsRUFBRSwwQkFBMEI7UUFDckMsSUFBSSxFQUFFLFNBQVM7S0FDaEI7SUFDRCxPQUFPLEVBQUU7UUFDUCxTQUFTLEVBQUUsMEJBQTBCO1FBQ3JDLElBQUksRUFBRSxTQUFTO0tBQ2hCO0lBQ0QsT0FBTyxFQUFFO1FBQ1AsU0FBUyxFQUFFLDBCQUEwQjtRQUNyQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSztLQUNoQztDQUNGLENBQUMsRUF4Q1MsQ0F3Q1QsRUFDRixFQUFFLElBQUksRUFBRSwwQkFBa0IsRUFBRSxDQUM3QixDQUFDO0FBY1csUUFBQSxTQUFTLEdBQTRDLFVBQUMsRUFJbEU7O0lBSEMsSUFBQSxjQUFJLEVBQ0osc0JBQVEsRUFDUiw0Q0FBWTtJQUVaLElBQU0sT0FBTyxHQUFHLGlCQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFOUIsT0FBTyxDQUNMLG9CQUFDLCtCQUFlO1FBQ2Qsb0JBQUMsc0JBQU0sQ0FBQyxHQUFHLGFBQ1QsSUFBSSxFQUFDLGFBQWEsRUFDbEIsT0FBTyxFQUFDLEtBQUssRUFDYixLQUFLLEVBQUMsNEJBQTRCLEVBQ2xDLENBQUMsRUFBQyxLQUFLLEVBQ1AsQ0FBQyxFQUFDLEtBQUssRUFDUCxPQUFPLEVBQUMsV0FBVyxFQUNuQixTQUFTLEVBQUUsY0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJO2dCQUMxQixHQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUcsSUFBSSxLQUFLLENBQUM7Z0JBQzNCLEdBQUMsT0FBTyxDQUFDLEtBQUssSUFBRyxJQUFJLEtBQUssQ0FBQztvQkFDM0IsRUFDRixPQUFPLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQ3ZCLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQ3RELElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxFQUFFLElBQ2hELFNBQVM7WUFFYixnQ0FDRSxNQUFNLEVBQUMsTUFBTSxFQUNiLEVBQUUsRUFBQyxHQUFHLEVBQ04sRUFBRSxFQUFDLElBQUksRUFDUCxDQUFDLEVBQUMsR0FBRyxFQUNMLFNBQVMsRUFBRSxjQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsR0FDMUM7WUFDRixnQ0FDRSxNQUFNLEVBQUMsTUFBTSxFQUNiLEVBQUUsRUFBQyxJQUFJLEVBQ1AsRUFBRSxFQUFDLElBQUksRUFDUCxDQUFDLEVBQUMsR0FBRyxFQUNMLFNBQVMsRUFBRSxjQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsR0FDMUM7WUFDRixnQ0FDRSxNQUFNLEVBQUMsTUFBTSxFQUNiLEVBQUUsRUFBQyxJQUFJLEVBQ1AsRUFBRSxFQUFDLElBQUksRUFDUCxDQUFDLEVBQUMsR0FBRyxFQUNMLFNBQVMsRUFBRSxjQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsR0FDMUM7WUFDRixnQ0FDRSxNQUFNLEVBQUMsTUFBTSxFQUNiLEVBQUUsRUFBQyxJQUFJLEVBQ1AsRUFBRSxFQUFDLElBQUksRUFDUCxDQUFDLEVBQUMsR0FBRyxFQUNMLFNBQVMsRUFBRSxjQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsR0FDMUMsQ0FDUyxDQUNHLENBQ25CLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xzeCwgeyBDbGFzc1ZhbHVlIH0gZnJvbSAnY2xzeCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnLi4vLi4vc3R5bGVzJztcbmltcG9ydCB7IEdldENsYXNzZXMgfSBmcm9tICcuLi8uLi90eXBlVXRpbHMnO1xuaW1wb3J0IHsgQW5pbWF0ZVByZXNlbmNlLCBtb3Rpb24sIE1vdGlvblByb3BzIH0gZnJvbSAnZnJhbWVyLW1vdGlvbic7XG5cbmV4cG9ydCBjb25zdCBEb3RMb2FkZXJTdHlsZXNLZXkgPSAnQ2hyb21hRG90TG9hZGVyJztcblxuZXhwb3J0IGNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoXG4gICh0aGVtZSkgPT4gKHtcbiAgICByb290OiB7XG4gICAgICBoZWlnaHQ6IHRoZW1lLnB4VG9SZW0oMTAwKSxcbiAgICAgIHdpZHRoOiB0aGVtZS5weFRvUmVtKDEwMCksXG4gICAgfSxcbiAgICBzaXplMDoge1xuICAgICAgaGVpZ2h0OiB0aGVtZS5weFRvUmVtKDI1KSxcbiAgICAgIHdpZHRoOiB0aGVtZS5weFRvUmVtKDI1KSxcbiAgICB9LFxuICAgIHNpemUxOiB7XG4gICAgICBoZWlnaHQ6IHRoZW1lLnB4VG9SZW0oNTApLFxuICAgICAgd2lkdGg6IHRoZW1lLnB4VG9SZW0oNTApLFxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgYm91bmNlJzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCAwLCAwKScsXG4gICAgICB9LFxuICAgICAgJzUwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwgMXJlbSwgMCknLFxuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCAwLCAwKScsXG4gICAgICB9LFxuICAgIH0sXG4gICAgYm91bmNlMToge1xuICAgICAgYW5pbWF0aW9uOiAnJGJvdW5jZSAxcyAwcyBpbmZpbml0ZScsXG4gICAgICBmaWxsOiB0aGVtZS5wYWxldHRlLnJlZC5tYWluLFxuICAgIH0sXG4gICAgYm91bmNlMjoge1xuICAgICAgYW5pbWF0aW9uOiAnJGJvdW5jZSAxcyAwLjJzIGluZmluaXRlJyxcbiAgICAgIGZpbGw6ICcjRjdDNDREJyxcbiAgICB9LFxuICAgIGJvdW5jZTM6IHtcbiAgICAgIGFuaW1hdGlvbjogJyRib3VuY2UgMXMgMC40cyBpbmZpbml0ZScsXG4gICAgICBmaWxsOiAnIzA5QkVFRicsXG4gICAgfSxcbiAgICBib3VuY2U0OiB7XG4gICAgICBhbmltYXRpb246ICckYm91bmNlIDFzIDAuNnMgaW5maW5pdGUnLFxuICAgICAgZmlsbDogdGhlbWUucGFsZXR0ZS5ncmVlbi5saWdodCxcbiAgICB9LFxuICB9KSxcbiAgeyBuYW1lOiBEb3RMb2FkZXJTdHlsZXNLZXkgfVxuKTtcblxuZXhwb3J0IHR5cGUgRG90TG9hZGVyQ2xhc3NlcyA9IEdldENsYXNzZXM8dHlwZW9mIHVzZVN0eWxlcz47XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG90TG9hZGVyUHJvcHNcbiAgZXh0ZW5kcyBPbWl0PFxuICAgICAgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPCdzdmcnPixcbiAgICAgICdvbkFuaW1hdGlvblN0YXJ0JyB8ICdvbkRyYWcnIHwgJ29uRHJhZ0VuZCcgfCAnb25EcmFnU3RhcnQnIHwgJ3N0eWxlJ1xuICAgID4sXG4gICAgTW90aW9uUHJvcHMge1xuICBzaXplPzogMCB8IDE7XG4gIGRvdFN0eWxlPzogQ2xhc3NWYWx1ZTtcbn1cblxuZXhwb3J0IGNvbnN0IERvdExvYWRlcjogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8RG90TG9hZGVyUHJvcHM+ID0gKHtcbiAgc2l6ZSxcbiAgZG90U3R5bGUsXG4gIC4uLnJvb3RQcm9wc1xufSkgPT4ge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKHt9KTtcblxuICByZXR1cm4gKFxuICAgIDxBbmltYXRlUHJlc2VuY2U+XG4gICAgICA8bW90aW9uLnN2Z1xuICAgICAgICByb2xlPVwicHJvZ3Jlc3NiYXJcIlxuICAgICAgICB2ZXJzaW9uPVwiMS4xXCJcbiAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgIHg9XCIwcHhcIlxuICAgICAgICB5PVwiMHB4XCJcbiAgICAgICAgdmlld0JveD1cIjAgMCA3MiA3OFwiXG4gICAgICAgIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLnJvb3QsIHtcbiAgICAgICAgICBbY2xhc3Nlcy5zaXplMF06IHNpemUgPT09IDAsXG4gICAgICAgICAgW2NsYXNzZXMuc2l6ZTFdOiBzaXplID09PSAxLFxuICAgICAgICB9KX1cbiAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwIH19XG4gICAgICAgIGFuaW1hdGU9e3sgb3BhY2l0eTogMSwgdHJhbnNpdGlvbjogeyBkdXJhdGlvbjogMC4zIH0gfX1cbiAgICAgICAgZXhpdD17eyBvcGFjaXR5OiAwLCB0cmFuc2l0aW9uOiB7IGR1cmF0aW9uOiAwLjI1IH0gfX1cbiAgICAgICAgey4uLnJvb3RQcm9wc31cbiAgICAgID5cbiAgICAgICAgPGNpcmNsZVxuICAgICAgICAgIHN0cm9rZT1cIm5vbmVcIlxuICAgICAgICAgIGN4PVwiNlwiXG4gICAgICAgICAgY3k9XCIyOFwiXG4gICAgICAgICAgcj1cIjZcIlxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLmJvdW5jZTEsIGRvdFN0eWxlKX1cbiAgICAgICAgLz5cbiAgICAgICAgPGNpcmNsZVxuICAgICAgICAgIHN0cm9rZT1cIm5vbmVcIlxuICAgICAgICAgIGN4PVwiMjZcIlxuICAgICAgICAgIGN5PVwiMjhcIlxuICAgICAgICAgIHI9XCI2XCJcbiAgICAgICAgICBjbGFzc05hbWU9e2Nsc3goY2xhc3Nlcy5ib3VuY2UyLCBkb3RTdHlsZSl9XG4gICAgICAgIC8+XG4gICAgICAgIDxjaXJjbGVcbiAgICAgICAgICBzdHJva2U9XCJub25lXCJcbiAgICAgICAgICBjeD1cIjQ2XCJcbiAgICAgICAgICBjeT1cIjI4XCJcbiAgICAgICAgICByPVwiNlwiXG4gICAgICAgICAgY2xhc3NOYW1lPXtjbHN4KGNsYXNzZXMuYm91bmNlMywgZG90U3R5bGUpfVxuICAgICAgICAvPlxuICAgICAgICA8Y2lyY2xlXG4gICAgICAgICAgc3Ryb2tlPVwibm9uZVwiXG4gICAgICAgICAgY3g9XCI2NlwiXG4gICAgICAgICAgY3k9XCIyOFwiXG4gICAgICAgICAgcj1cIjZcIlxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLmJvdW5jZTQsIGRvdFN0eWxlKX1cbiAgICAgICAgLz5cbiAgICAgIDwvbW90aW9uLnN2Zz5cbiAgICA8L0FuaW1hdGVQcmVzZW5jZT5cbiAgKTtcbn07XG4iXX0=