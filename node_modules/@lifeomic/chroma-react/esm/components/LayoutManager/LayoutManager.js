var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { makeStyles } from '../../styles';
import { LayoutManagerContext, LayoutManagerStoreKey, } from './LayoutManagerContext';
export var LayoutManagerStylesKey = 'ChromaLayoutManager';
var gridAreas = {
    sidebar: 'sidebar',
    header: 'header',
    main: 'main',
};
export var sideBarWidth = '16.625rem';
export var sideBarWidthCollapsed = '3.75rem';
export var useStyles = makeStyles(function () { return ({
    root: {
        display: 'grid',
        height: '100vh',
        width: '100%',
        gridTemplateAreas: "\n        '" + gridAreas.header + " " + gridAreas.header + "'\n        '" + gridAreas.sidebar + " " + gridAreas.main + "'\n      ",
        gridTemplateColumns: 'max-content 1fr',
        gridTemplateRows: 'max-content 1fr',
    },
    sidebar: {
        display: 'flex',
        width: '16.625rem',
        gridArea: gridAreas.sidebar,
        height: '100%',
        overflowX: 'hidden',
        transform: 'translate3d(0, 0, 0)',
        transition: 'transform 0.25s, width 0.25s ease-out',
    },
    sidebarCollapsed: {
        transitionTimingFunction: 'ease-in-out',
        width: '3.75rem',
    },
    header: {
        gridArea: gridAreas.header,
    },
    main: {
        gridArea: gridAreas.main,
        overflow: 'auto',
    },
}); }, {
    name: LayoutManagerStylesKey,
});
export var LayoutManager = function (_a) {
    var children = _a.children, header = _a.header, initialIsSidebarCollapsed = _a.initialIsSidebarCollapsed, isSidebarCollapseDisabled = _a.isSidebarCollapseDisabled, sidebar = _a.sidebar, className = _a.className, rootProps = __rest(_a, ["children", "header", "initialIsSidebarCollapsed", "isSidebarCollapseDisabled", "sidebar", "className"]);
    var _b = React.useState(isSidebarCollapseDisabled ? false : initialIsSidebarCollapsed), isSidebarCollapsed = _b[0], setIsSidebarCollapsed = _b[1];
    var contextValue = React.useMemo(function () { return ({
        isSidebarCollapsed: isSidebarCollapsed,
        isSidebarCollapseDisabled: isSidebarCollapseDisabled,
        toggleSidebarCollapsed: function () {
            if (isSidebarCollapseDisabled) {
                return;
            }
            setIsSidebarCollapsed(function (state) {
                var isOpen = !state;
                localStorage &&
                    localStorage.setItem(LayoutManagerStoreKey, isOpen ? 'true' : 'false');
                return isOpen;
            });
        },
    }); }, [isSidebarCollapsed, isSidebarCollapseDisabled]);
    var classes = useStyles({});
    React.useEffect(function () {
        if (isSidebarCollapseDisabled) {
            setIsSidebarCollapsed(false);
        }
    }, [isSidebarCollapseDisabled]);
    return (React.createElement(LayoutManagerContext.Provider, { value: contextValue },
        React.createElement("div", __assign({ className: clsx(classes.root, className) }, rootProps),
            !!header && React.createElement("div", { className: classes.header }, header),
            !!sidebar && (React.createElement("aside", { className: clsx(classes.sidebar, isSidebarCollapsed && classes.sidebarCollapsed) }, sidebar)),
            React.createElement("main", { className: classes.main }, children))));
};
LayoutManager.defaultProps = {
    initialIsSidebarCollapsed: !!(localStorage && localStorage.getItem(LayoutManagerStoreKey) === 'true'),
    isSidebarCollapseDisabled: false,
};
//# sourceMappingURL=data:application/json;base64,