var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { makeStyles } from '../../styles';
import { useReducedMotion } from 'framer-motion';
import * as React from 'react';
import clsx from 'clsx';
export var LinearProgressStylesKey = 'ChromaLinearProgress';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        '--linear-progress-height': '0.25rem',
        '--linear-progress-background-color': theme.palette.black[100],
        '--linear-progress-bar-color': "linear-gradient(135deg,\n        ".concat(theme.palette.primary.light, " 0%,\n        ").concat(theme.palette.primary.main, " 22%,\n        ").concat(theme.palette.purple[700], " 92%)"),
        backgroundColor: 'var(--linear-progress-background-color)',
        height: 'var(--linear-progress-height)',
        overflow: 'hidden',
        position: 'relative',
    },
    bar: {
        background: 'var(--linear-progress-bar-color)',
        bottom: 0,
        height: 'var(--linear-progress-height)',
        left: 0,
        position: 'absolute',
        top: 0,
        transition: 'transform 0.4s linear',
        width: '100%',
    },
    indeterminate: {
        animation: '$chroma-progress-bar-indeterminate 2s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite',
    },
    indeterminateReduced: {
        animation: '$chroma-progress-bar-indeterminate 10s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite',
    },
    '@keyframes chroma-progress-bar-indeterminate': {
        '0%': {
            left: '-100%',
            right: '100%',
        },
        '60%': {
            left: '50%',
            right: '-50%',
        },
        '100%': {
            left: '100%',
            right: '-100%',
        },
    },
}); }, { name: LinearProgressStylesKey });
export var LinearProgress = function (_a) {
    var className = _a.className, _b = _a.variant, variant = _b === void 0 ? 'determinate' : _b, _c = _a.value, value = _c === void 0 ? 0 : _c, rootProps = __rest(_a, ["className", "variant", "value"]);
    var classes = useStyles({});
    var shouldReduceMotion = useReducedMotion();
    return (React.createElement("div", __assign({ className: clsx(classes.root, className), role: "progressbar", "aria-valuenow": variant === 'determinate' ? value : undefined, "aria-valuemin": variant === 'determinate' ? 0 : undefined, "aria-valuemax": variant === 'determinate' ? 100 : undefined }, rootProps),
        React.createElement("div", { className: clsx(classes.bar, variant === 'indeterminate' && classes.indeterminate, shouldReduceMotion && classes.indeterminateReduced), style: variant === 'determinate'
                ? { transform: "translateX(-".concat(100 - value, "%)") }
                : undefined })));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGluZWFyUHJvZ3Jlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9MaW5lYXJQcm9ncmVzcy9MaW5lYXJQcm9ncmVzcy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDMUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUV4QixNQUFNLENBQUMsSUFBTSx1QkFBdUIsR0FBRyxzQkFBc0IsQ0FBQztBQUU5RCxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsVUFBVSxDQUNqQyxVQUFDLEtBQUssSUFBSyxPQUFBLENBQUM7SUFDVixJQUFJLEVBQUU7UUFDSiwwQkFBMEIsRUFBRSxTQUFTO1FBQ3JDLG9DQUFvQyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUM5RCw2QkFBNkIsRUFBRSwyQ0FDM0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSywyQkFDM0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSw0QkFDMUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQU87UUFDcEMsZUFBZSxFQUFFLHlDQUF5QztRQUMxRCxNQUFNLEVBQUUsK0JBQStCO1FBQ3ZDLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLFFBQVEsRUFBRSxVQUFVO0tBQ3JCO0lBQ0QsR0FBRyxFQUFFO1FBQ0gsVUFBVSxFQUFFLGtDQUFrQztRQUM5QyxNQUFNLEVBQUUsQ0FBQztRQUNULE1BQU0sRUFBRSwrQkFBK0I7UUFDdkMsSUFBSSxFQUFFLENBQUM7UUFDUCxRQUFRLEVBQUUsVUFBVTtRQUNwQixHQUFHLEVBQUUsQ0FBQztRQUNOLFVBQVUsRUFBRSx1QkFBdUI7UUFDbkMsS0FBSyxFQUFFLE1BQU07S0FDZDtJQUNELGFBQWEsRUFBRTtRQUNiLFNBQVMsRUFDUCx3RkFBd0Y7S0FDM0Y7SUFDRCxvQkFBb0IsRUFBRTtRQUNwQixTQUFTLEVBQ1AseUZBQXlGO0tBQzVGO0lBQ0QsOENBQThDLEVBQUU7UUFDOUMsSUFBSSxFQUFFO1lBQ0osSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsTUFBTTtTQUNkO1FBQ0QsS0FBSyxFQUFFO1lBQ0wsSUFBSSxFQUFFLEtBQUs7WUFDWCxLQUFLLEVBQUUsTUFBTTtTQUNkO1FBQ0QsTUFBTSxFQUFFO1lBQ04sSUFBSSxFQUFFLE1BQU07WUFDWixLQUFLLEVBQUUsT0FBTztTQUNmO0tBQ0Y7Q0FDRixDQUFDLEVBN0NTLENBNkNULEVBQ0YsRUFBRSxJQUFJLEVBQUUsdUJBQXVCLEVBQUUsQ0FDbEMsQ0FBQztBQVVGLE1BQU0sQ0FBQyxJQUFNLGNBQWMsR0FBa0MsVUFBQyxFQUs3RDtJQUpDLElBQUEsU0FBUyxlQUFBLEVBQ1QsZUFBdUIsRUFBdkIsT0FBTyxtQkFBRyxhQUFhLEtBQUEsRUFDdkIsYUFBUyxFQUFULEtBQUssbUJBQUcsQ0FBQyxLQUFBLEVBQ04sU0FBUyxjQUpnRCxpQ0FLN0QsQ0FEYTtJQUVaLElBQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUU5QixJQUFNLGtCQUFrQixHQUFHLGdCQUFnQixFQUFFLENBQUM7SUFFOUMsT0FBTyxDQUNMLHNDQUNFLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsRUFDeEMsSUFBSSxFQUFDLGFBQWEsbUJBQ0gsT0FBTyxLQUFLLGFBQWEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLG1CQUM3QyxPQUFPLEtBQUssYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsbUJBQ3pDLE9BQU8sS0FBSyxhQUFhLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxJQUN0RCxTQUFTO1FBRWIsNkJBQ0UsU0FBUyxFQUFFLElBQUksQ0FDYixPQUFPLENBQUMsR0FBRyxFQUNYLE9BQU8sS0FBSyxlQUFlLElBQUksT0FBTyxDQUFDLGFBQWEsRUFDcEQsa0JBQWtCLElBQUksT0FBTyxDQUFDLG9CQUFvQixDQUNuRCxFQUNELEtBQUssRUFDSCxPQUFPLEtBQUssYUFBYTtnQkFDdkIsQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLHNCQUFlLEdBQUcsR0FBRyxLQUFLLE9BQUksRUFBRTtnQkFDL0MsQ0FBQyxDQUFDLFNBQVMsR0FFZixDQUNFLENBQ1AsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdldENsYXNzZXMgfSBmcm9tICcuLi8uLi90eXBlVXRpbHMnO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJy4uLy4uL3N0eWxlcyc7XG5pbXBvcnQgeyB1c2VSZWR1Y2VkTW90aW9uIH0gZnJvbSAnZnJhbWVyLW1vdGlvbic7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcblxuZXhwb3J0IGNvbnN0IExpbmVhclByb2dyZXNzU3R5bGVzS2V5ID0gJ0Nocm9tYUxpbmVhclByb2dyZXNzJztcblxuZXhwb3J0IGNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoXG4gICh0aGVtZSkgPT4gKHtcbiAgICByb290OiB7XG4gICAgICAnLS1saW5lYXItcHJvZ3Jlc3MtaGVpZ2h0JzogJzAuMjVyZW0nLFxuICAgICAgJy0tbGluZWFyLXByb2dyZXNzLWJhY2tncm91bmQtY29sb3InOiB0aGVtZS5wYWxldHRlLmJsYWNrWzEwMF0sXG4gICAgICAnLS1saW5lYXItcHJvZ3Jlc3MtYmFyLWNvbG9yJzogYGxpbmVhci1ncmFkaWVudCgxMzVkZWcsXG4gICAgICAgICR7dGhlbWUucGFsZXR0ZS5wcmltYXJ5LmxpZ2h0fSAwJSxcbiAgICAgICAgJHt0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbn0gMjIlLFxuICAgICAgICAke3RoZW1lLnBhbGV0dGUucHVycGxlWzcwMF19IDkyJSlgLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tbGluZWFyLXByb2dyZXNzLWJhY2tncm91bmQtY29sb3IpJyxcbiAgICAgIGhlaWdodDogJ3ZhcigtLWxpbmVhci1wcm9ncmVzcy1oZWlnaHQpJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIH0sXG4gICAgYmFyOiB7XG4gICAgICBiYWNrZ3JvdW5kOiAndmFyKC0tbGluZWFyLXByb2dyZXNzLWJhci1jb2xvciknLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgaGVpZ2h0OiAndmFyKC0tbGluZWFyLXByb2dyZXNzLWhlaWdodCknLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiAwLFxuICAgICAgdHJhbnNpdGlvbjogJ3RyYW5zZm9ybSAwLjRzIGxpbmVhcicsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgIH0sXG4gICAgaW5kZXRlcm1pbmF0ZToge1xuICAgICAgYW5pbWF0aW9uOlxuICAgICAgICAnJGNocm9tYS1wcm9ncmVzcy1iYXItaW5kZXRlcm1pbmF0ZSAycyBjdWJpYy1iZXppZXIoMC42NSwgMC44MTUsIDAuNzM1LCAwLjM5NSkgaW5maW5pdGUnLFxuICAgIH0sXG4gICAgaW5kZXRlcm1pbmF0ZVJlZHVjZWQ6IHtcbiAgICAgIGFuaW1hdGlvbjpcbiAgICAgICAgJyRjaHJvbWEtcHJvZ3Jlc3MtYmFyLWluZGV0ZXJtaW5hdGUgMTBzIGN1YmljLWJlemllcigwLjY1LCAwLjgxNSwgMC43MzUsIDAuMzk1KSBpbmZpbml0ZScsXG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBjaHJvbWEtcHJvZ3Jlc3MtYmFyLWluZGV0ZXJtaW5hdGUnOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIGxlZnQ6ICctMTAwJScsXG4gICAgICAgIHJpZ2h0OiAnMTAwJScsXG4gICAgICB9LFxuICAgICAgJzYwJSc6IHtcbiAgICAgICAgbGVmdDogJzUwJScsXG4gICAgICAgIHJpZ2h0OiAnLTUwJScsXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIGxlZnQ6ICcxMDAlJyxcbiAgICAgICAgcmlnaHQ6ICctMTAwJScsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pLFxuICB7IG5hbWU6IExpbmVhclByb2dyZXNzU3R5bGVzS2V5IH1cbik7XG5cbmV4cG9ydCB0eXBlIExpbmVhclByb2dyZXNzQ2xhc3NlcyA9IEdldENsYXNzZXM8dHlwZW9mIHVzZVN0eWxlcz47XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGluZWFyUHJvZ3Jlc3NQcm9wcyB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgdmFsdWU/OiBudW1iZXI7XG4gIHZhcmlhbnQ/OiAnZGV0ZXJtaW5hdGUnIHwgJ2luZGV0ZXJtaW5hdGUnO1xufVxuXG5leHBvcnQgY29uc3QgTGluZWFyUHJvZ3Jlc3M6IFJlYWN0LkZDPExpbmVhclByb2dyZXNzUHJvcHM+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICB2YXJpYW50ID0gJ2RldGVybWluYXRlJyxcbiAgdmFsdWUgPSAwLFxuICAuLi5yb290UHJvcHNcbn0pID0+IHtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcyh7fSk7XG5cbiAgY29uc3Qgc2hvdWxkUmVkdWNlTW90aW9uID0gdXNlUmVkdWNlZE1vdGlvbigpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKX1cbiAgICAgIHJvbGU9XCJwcm9ncmVzc2JhclwiXG4gICAgICBhcmlhLXZhbHVlbm93PXt2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnID8gdmFsdWUgOiB1bmRlZmluZWR9XG4gICAgICBhcmlhLXZhbHVlbWluPXt2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnID8gMCA6IHVuZGVmaW5lZH1cbiAgICAgIGFyaWEtdmFsdWVtYXg9e3ZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgPyAxMDAgOiB1bmRlZmluZWR9XG4gICAgICB7Li4ucm9vdFByb3BzfVxuICAgID5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtjbHN4KFxuICAgICAgICAgIGNsYXNzZXMuYmFyLFxuICAgICAgICAgIHZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyAmJiBjbGFzc2VzLmluZGV0ZXJtaW5hdGUsXG4gICAgICAgICAgc2hvdWxkUmVkdWNlTW90aW9uICYmIGNsYXNzZXMuaW5kZXRlcm1pbmF0ZVJlZHVjZWRcbiAgICAgICAgKX1cbiAgICAgICAgc3R5bGU9e1xuICAgICAgICAgIHZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZSdcbiAgICAgICAgICAgID8geyB0cmFuc2Zvcm06IGB0cmFuc2xhdGVYKC0kezEwMCAtIHZhbHVlfSUpYCB9XG4gICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdfQ==