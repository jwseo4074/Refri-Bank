var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { makeStyles } from '../../styles';
import { AvatarSizeContext } from './AvatarSizeContext';
export var AvatarStylesKey = 'ChromaAvatar';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        alignItems: 'center',
        backgroundColor: theme.palette.primary.main,
        border: theme.pxToRem(1) + " solid " + theme.palette.black[100],
        borderRadius: 9999,
        color: theme.palette.common.white,
        display: 'inline-flex',
        flexShrink: 0,
        justifyContent: 'center',
        outline: 'none',
        position: 'relative',
        transition: 'opacity 0.25s ease, border 0.25s ease',
        userSelect: 'none',
        '&:focus': {
            opacity: 0.85,
            border: theme.pxToRem(2) + " solid " + theme.palette.black[700],
        },
    },
    size0: {
        fontSize: theme.typography.caption.fontSize,
        fontWeight: theme.typography.fontWeightBold,
        width: theme.pxToRem(22),
        height: theme.pxToRem(22),
    },
    size1: {
        fontSize: theme.typography.body1.fontSize,
        width: theme.pxToRem(32),
        height: theme.pxToRem(32),
    },
    size2: {
        fontSize: theme.typography.h5.fontSize,
        width: theme.pxToRem(42),
        height: theme.pxToRem(42),
    },
    img: {
        width: '100%',
        height: '100%',
        objectFit: 'cover',
        maxWidth: '100%',
        verticalAlign: 'middle',
        borderRadius: 9999,
    },
    defaultSrc: {
        fill: theme.palette.common.white,
    },
    clickable: {
        cursor: 'pointer',
        '&:hover': {
            opacity: 0.85,
            border: theme.pxToRem(1) + " solid " + theme.palette.black[700],
        },
    },
}); }, { name: AvatarStylesKey });
var getInitials = function (name) {
    var _a;
    if (!name) {
        return '';
    }
    var firstName = name.split(' ')[0];
    return (_a = firstName === null || firstName === void 0 ? void 0 : firstName.charAt(0)) === null || _a === void 0 ? void 0 : _a.toUpperCase();
};
export var Avatar = React.forwardRef(function (_a, ref) {
    var _b;
    var className = _a.className, children = _a.children, _c = _a.name, name = _c === void 0 ? '' : _c, onClick = _a.onClick, _d = _a.size, size = _d === void 0 ? 1 : _d, src = _a.src, _e = _a.useDefaultSrc, useDefaultSrc = _e === void 0 ? false : _e, rootProps = __rest(_a, ["className", "children", "name", "onClick", "size", "src", "useDefaultSrc"]);
    var classes = useStyles({});
    // We need to be *super* careful to not display any self identifying information
    // (name or image src) if "useDefaultSrc" is provided.  This will ensure
    // that our "masked mode" when dealing with healthcare information is respected
    return (
    // We conditionally add the role if `onClick` is provided
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    React.createElement("div", __assign({ ref: ref, className: clsx(classes.root, (_b = {},
            _b[classes.size0] = size === 0,
            _b[classes.size1] = size === 1,
            _b[classes.size2] = size === 2,
            _b), onClick && classes.clickable, className), onClick: onClick, "aria-label": !src && name && !useDefaultSrc ? name : undefined, role: onClick ? 'button' : undefined, tabIndex: onClick ? 0 : undefined }, rootProps),
        !src && !useDefaultSrc ? getInitials(name) : null,
        src && !useDefaultSrc && (React.createElement("img", { className: classes.img, src: src, alt: name })),
        useDefaultSrc && (React.createElement("svg", { className: clsx(classes.img, classes.defaultSrc), fill: "currentColor", viewBox: "0 0 128 128", role: "img" },
            React.createElement("g", null,
                React.createElement("path", { d: "M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z" }),
                React.createElement("path", { d: "M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24" })))),
        children && (React.createElement(AvatarSizeContext.Provider, { value: { size: size } }, children))));
});
//# sourceMappingURL=data:application/json;base64,