var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { X } from '@lifeomic/chromicons';
import { makeStyles } from '../../styles';
export var ChipStylesKey = 'ChromaChip';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        margin: theme.spacing(1.25, 1.25, 0, 0),
        height: theme.pxToRem(30),
        borderRadius: theme.pxToRem(4),
        backgroundColor: theme.palette.black[50],
        display: 'inline-flex',
        alignItems: 'center',
        color: theme.palette.black[600],
        paddingLeft: theme.spacing(1),
        paddingRight: theme.spacing(1),
    },
    label: {
        fontSize: theme.typography.caption.fontSize,
        fontWeight: theme.typography.fontWeightBold,
        paddingRight: theme.pxToRem(10),
        whiteSpace: 'nowrap',
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        maxWidth: theme.spacing(37.5),
        letterSpacing: '0.4px',
    },
    noDeleteButtonLabel: {
        paddingRight: 0,
    },
    svgStyle: {
        width: theme.pxToRem(10),
        height: theme.pxToRem(10),
    },
    deleteButton: {
        alignItems: 'center',
        background: theme.palette.black[600],
        borderRadius: 9999,
        border: 'none',
        display: 'inline-flex',
        justifyContent: 'center',
        color: theme.palette.common.white,
        cursor: 'pointer',
        height: theme.pxToRem(14),
        minHeight: theme.pxToRem(10),
        minWidth: theme.pxToRem(10),
        padding: 0,
        width: theme.pxToRem(14),
        transition: 'background 0.25s ease, opacity 0.25s ease',
        '&:hover': {
            background: theme.palette.black[600],
            opacity: 0.85,
        },
        '&:disabled': {
            background: theme.palette.black[300],
            color: theme.palette.common.white,
            cursor: 'initial',
        },
        '&:focus': {
            background: theme.palette.black[400],
            outline: 'none',
        },
    },
}); }, { name: ChipStylesKey });
export var Chip = React.forwardRef(function (_a, ref) {
    var children = _a.children, _b = _a.label, label = _b === void 0 ? '' : _b, disableDelete = _a.disableDelete, onDelete = _a.onDelete, className = _a.className, rootProps = __rest(_a, ["children", "label", "disableDelete", "onDelete", "className"]);
    var classes = useStyles({});
    return (React.createElement("div", __assign({ ref: ref, className: clsx(classes.root, className), tabIndex: 0, "aria-label": label }, rootProps),
        React.createElement("span", { className: clsx(classes.label, !onDelete && classes.noDeleteButtonLabel) }, label),
        !!onDelete && (React.createElement("button", { className: classes.deleteButton, "aria-label": "Remove", disabled: disableDelete, onClick: onDelete, type: "button", tabIndex: 0 },
            React.createElement(X, { className: classes.svgStyle, "aria-hidden": true }))),
        children));
});
//# sourceMappingURL=data:application/json;base64,