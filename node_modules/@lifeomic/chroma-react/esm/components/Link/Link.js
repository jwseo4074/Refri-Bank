var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { NavLink, } from 'react-router-dom';
import { makeStyles } from '../../styles';
export var LinkStylesKey = 'ChromaLink';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        color: theme.palette.primary.main,
        transition: 'color 0.25s ease',
        textDecoration: 'none',
        '&:hover': {
            color: theme.palette.primary[900],
            textDecoration: 'underline',
        },
    },
    inverse: {
        color: 'rgba(255, 255, 255, 0.9)',
        '&:hover': {
            color: theme.palette.common.white,
        },
    },
}); }, { name: LinkStylesKey });
export var Link = function (_a) {
    var _b, _c;
    var to = _a.to, children = _a.children, className = _a.className, _d = _a.color, color = _d === void 0 ? 'default' : _d, newTab = _a.newTab, dataTestId = _a["data-testid"], rootProps = __rest(_a, ["to", "children", "className", "color", "newTab", 'data-testid']);
    var classes = useStyles({});
    if (newTab) {
        return (React.createElement("a", { target: "_blank", rel: "noopener noreferrer", href: to, className: clsx(classes.root, (_b = {}, _b[classes.inverse] = color === 'inverse', _b), className), "data-testid": dataTestId, onClick: rootProps.onClick
                ? rootProps.onClick
                : undefined }, children));
    }
    return (React.createElement(NavLink, __assign({ to: to, className: clsx(classes.root, (_c = {}, _c[classes.inverse] = color === 'inverse', _c), className), "data-testid": dataTestId }, rootProps), children));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGluay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0xpbmsvTGluay50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQ0wsT0FBTyxHQUVSLE1BQU0sa0JBQWtCLENBQUM7QUFDMUIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUcxQyxNQUFNLENBQUMsSUFBTSxhQUFhLEdBQUcsWUFBWSxDQUFDO0FBRTFDLE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQ2pDLFVBQUMsS0FBSyxJQUFLLE9BQUEsQ0FBQztJQUNWLElBQUksRUFBRTtRQUNKLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJO1FBQ2pDLFVBQVUsRUFBRSxrQkFBa0I7UUFDOUIsY0FBYyxFQUFFLE1BQU07UUFDdEIsU0FBUyxFQUFFO1lBQ1QsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztZQUNqQyxjQUFjLEVBQUUsV0FBVztTQUM1QjtLQUNGO0lBQ0QsT0FBTyxFQUFFO1FBQ1AsS0FBSyxFQUFFLDBCQUEwQjtRQUNqQyxTQUFTLEVBQUU7WUFDVCxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSztTQUNsQztLQUNGO0NBQ0YsQ0FBQyxFQWhCUyxDQWdCVCxFQUNGLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxDQUN4QixDQUFDO0FBZ0JGLE1BQU0sQ0FBQyxJQUFNLElBQUksR0FBd0IsVUFBQyxFQVF6Qzs7SUFQQyxJQUFBLFVBQUUsRUFDRixzQkFBUSxFQUNSLHdCQUFTLEVBQ1QsYUFBaUIsRUFBakIsc0NBQWlCLEVBQ2pCLGtCQUFNLEVBQ04sOEJBQXlCLEVBQ3pCLHlGQUFZO0lBRVosSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTlCLElBQUksTUFBTSxFQUFFO1FBQ1YsT0FBTyxDQUNMLDJCQUNFLE1BQU0sRUFBQyxRQUFRLEVBQ2YsR0FBRyxFQUFDLHFCQUFxQixFQUN6QixJQUFJLEVBQUUsRUFBWSxFQUNsQixTQUFTLEVBQUUsSUFBSSxDQUNiLE9BQU8sQ0FBQyxJQUFJLFlBQ1YsR0FBQyxPQUFPLENBQUMsT0FBTyxJQUFHLEtBQUssS0FBSyxTQUFTLE9BQ3hDLFNBQVMsQ0FDVixpQkFDWSxVQUFVLEVBQ3ZCLE9BQU8sRUFDTCxTQUFTLENBQUMsT0FBTztnQkFDZixDQUFDLENBQUUsU0FBUyxDQUFDLE9BSUc7Z0JBQ2hCLENBQUMsQ0FBQyxTQUFTLElBR2QsUUFBUSxDQUNQLENBQ0wsQ0FBQztLQUNIO0lBRUQsT0FBTyxDQUNMLG9CQUFDLE9BQU8sYUFDTixFQUFFLEVBQUUsRUFBRSxFQUNOLFNBQVMsRUFBRSxJQUFJLENBQ2IsT0FBTyxDQUFDLElBQUksWUFDVixHQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUcsS0FBSyxLQUFLLFNBQVMsT0FDeEMsU0FBUyxDQUNWLGlCQUNZLFVBQVUsSUFDbkIsU0FBUyxHQUVaLFFBQVEsQ0FDRCxDQUNYLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIE5hdkxpbmssXG4gIE5hdkxpbmtQcm9wcyBhcyBSb3V0ZXJEb21OYXZMaW5rUHJvcHMsXG59IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJy4uLy4uL3N0eWxlcyc7XG5pbXBvcnQgeyBHZXRDbGFzc2VzIH0gZnJvbSAnLi4vLi4vdHlwZVV0aWxzJztcblxuZXhwb3J0IGNvbnN0IExpbmtTdHlsZXNLZXkgPSAnQ2hyb21hTGluayc7XG5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAodGhlbWUpID0+ICh7XG4gICAgcm9vdDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgdHJhbnNpdGlvbjogJ2NvbG9yIDAuMjVzIGVhc2UnLFxuICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5WzkwMF0sXG4gICAgICAgIHRleHREZWNvcmF0aW9uOiAndW5kZXJsaW5lJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBpbnZlcnNlOiB7XG4gICAgICBjb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC45KScsXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICAgICAgfSxcbiAgICB9LFxuICB9KSxcbiAgeyBuYW1lOiBMaW5rU3R5bGVzS2V5IH1cbik7XG5cbmV4cG9ydCB0eXBlIExpbmtDbGFzc2VzID0gR2V0Q2xhc3Nlczx0eXBlb2YgdXNlU3R5bGVzPjtcblxuZXhwb3J0IGludGVyZmFjZSBMaW5rUHJvcHNcbiAgZXh0ZW5kcyBSb3V0ZXJEb21OYXZMaW5rUHJvcHM8XG4gICAgUmVhY3QuRGV0YWlsZWRIVE1MUHJvcHM8XG4gICAgICBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MQW5jaG9yRWxlbWVudD4sXG4gICAgICBIVE1MQW5jaG9yRWxlbWVudFxuICAgID5cbiAgPiB7XG4gIFsnZGF0YS10ZXN0aWQnXT86IHN0cmluZztcbiAgbmV3VGFiPzogYm9vbGVhbjtcbiAgY29sb3I/OiAnZGVmYXVsdCcgfCAnaW52ZXJzZSc7XG59XG5cbmV4cG9ydCBjb25zdCBMaW5rOiBSZWFjdC5GQzxMaW5rUHJvcHM+ID0gKHtcbiAgdG8sXG4gIGNoaWxkcmVuLFxuICBjbGFzc05hbWUsXG4gIGNvbG9yID0gJ2RlZmF1bHQnLFxuICBuZXdUYWIsXG4gICdkYXRhLXRlc3RpZCc6IGRhdGFUZXN0SWQsXG4gIC4uLnJvb3RQcm9wc1xufSkgPT4ge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKHt9KTtcblxuICBpZiAobmV3VGFiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxhXG4gICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICBocmVmPXt0byBhcyBzdHJpbmd9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xzeChcbiAgICAgICAgICBjbGFzc2VzLnJvb3QsXG4gICAgICAgICAgeyBbY2xhc3Nlcy5pbnZlcnNlXTogY29sb3IgPT09ICdpbnZlcnNlJyB9LFxuICAgICAgICAgIGNsYXNzTmFtZVxuICAgICAgICApfVxuICAgICAgICBkYXRhLXRlc3RpZD17ZGF0YVRlc3RJZH1cbiAgICAgICAgb25DbGljaz17XG4gICAgICAgICAgcm9vdFByb3BzLm9uQ2xpY2tcbiAgICAgICAgICAgID8gKHJvb3RQcm9wcy5vbkNsaWNrIGFzXG4gICAgICAgICAgICAgICAgfCAoKFxuICAgICAgICAgICAgICAgICAgICBldmVudDogUmVhY3QuTW91c2VFdmVudDxIVE1MQW5jaG9yRWxlbWVudCwgTW91c2VFdmVudD5cbiAgICAgICAgICAgICAgICAgICkgPT4gdm9pZClcbiAgICAgICAgICAgICAgICB8IHVuZGVmaW5lZClcbiAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICAgID5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9hPlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxOYXZMaW5rXG4gICAgICB0bz17dG99XG4gICAgICBjbGFzc05hbWU9e2Nsc3goXG4gICAgICAgIGNsYXNzZXMucm9vdCxcbiAgICAgICAgeyBbY2xhc3Nlcy5pbnZlcnNlXTogY29sb3IgPT09ICdpbnZlcnNlJyB9LFxuICAgICAgICBjbGFzc05hbWVcbiAgICAgICl9XG4gICAgICBkYXRhLXRlc3RpZD17ZGF0YVRlc3RJZH1cbiAgICAgIHsuLi5yb290UHJvcHN9XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvTmF2TGluaz5cbiAgKTtcbn07XG4iXX0=