var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { NavLink, } from 'react-router-dom';
import { makeStyles } from '../../styles';
export var LinkStylesKey = 'ChromaLink';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        color: 'rgba(0, 83, 154, 0.9)',
        transition: 'color 0.25s ease',
        textDecoration: 'none',
        '&:hover': {
            color: theme.palette.primary[900],
            textDecoration: 'underline',
        },
    },
    inverse: {
        color: 'rgba(255, 255, 255, 0.9)',
        '&:hover': {
            color: theme.palette.common.white,
        },
    },
    negative: {
        color: theme.palette.negative.main,
        '&:hover': {
            color: theme.palette.negative.dark,
        },
    },
    positive: {
        color: theme.palette.positive.main,
        '&:hover': {
            color: theme.palette.positive.dark,
        },
    },
}); }, { name: LinkStylesKey });
export var Link = function (_a) {
    var _b, _c;
    var to = _a.to, children = _a.children, className = _a.className, _d = _a.color, color = _d === void 0 ? 'default' : _d, newTab = _a.newTab, dataTestId = _a["data-testid"], rootProps = __rest(_a, ["to", "children", "className", "color", "newTab", 'data-testid']);
    var classes = useStyles({});
    if (newTab) {
        return (React.createElement("a", { target: "_blank", rel: "noopener noreferrer", href: to, className: clsx(classes.root, (_b = {},
                _b[classes.inverse] = color === 'inverse',
                _b[classes.negative] = color === 'negative',
                _b[classes.positive] = color === 'positive',
                _b), className), "data-testid": dataTestId, onClick: rootProps.onClick
                ? rootProps.onClick
                : undefined }, children));
    }
    return (React.createElement(NavLink, __assign({ to: to, className: clsx(classes.root, (_c = {},
            _c[classes.inverse] = color === 'inverse',
            _c[classes.negative] = color === 'negative',
            _c[classes.positive] = color === 'positive',
            _c), className), "data-testid": dataTestId }, rootProps), children));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGluay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0xpbmsvTGluay50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQ0wsT0FBTyxHQUVSLE1BQU0sa0JBQWtCLENBQUM7QUFDMUIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUcxQyxNQUFNLENBQUMsSUFBTSxhQUFhLEdBQUcsWUFBWSxDQUFDO0FBRTFDLE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQ2pDLFVBQUMsS0FBSyxJQUFLLE9BQUEsQ0FBQztJQUNWLElBQUksRUFBRTtRQUNKLEtBQUssRUFBRSx1QkFBdUI7UUFDOUIsVUFBVSxFQUFFLGtCQUFrQjtRQUM5QixjQUFjLEVBQUUsTUFBTTtRQUN0QixTQUFTLEVBQUU7WUFDVCxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQ2pDLGNBQWMsRUFBRSxXQUFXO1NBQzVCO0tBQ0Y7SUFDRCxPQUFPLEVBQUU7UUFDUCxLQUFLLEVBQUUsMEJBQTBCO1FBQ2pDLFNBQVMsRUFBRTtZQUNULEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLO1NBQ2xDO0tBQ0Y7SUFDRCxRQUFRLEVBQUU7UUFDUixLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSTtRQUNsQyxTQUFTLEVBQUU7WUFDVCxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSTtTQUNuQztLQUNGO0lBQ0QsUUFBUSxFQUFFO1FBQ1IsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUk7UUFDbEMsU0FBUyxFQUFFO1lBQ1QsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUk7U0FDbkM7S0FDRjtDQUNGLENBQUMsRUE1QlMsQ0E0QlQsRUFDRixFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsQ0FDeEIsQ0FBQztBQWlCRixNQUFNLENBQUMsSUFBTSxJQUFJLEdBQXdCLFVBQUMsRUFRekM7O0lBUEMsSUFBQSxFQUFFLFFBQUEsRUFDRixRQUFRLGNBQUEsRUFDUixTQUFTLGVBQUEsRUFDVCxhQUFpQixFQUFqQixLQUFLLG1CQUFHLFNBQVMsS0FBQSxFQUNqQixNQUFNLFlBQUEsRUFDUyxVQUFVLG9CQUFBLEVBQ3RCLFNBQVMsY0FQNEIsaUVBUXpDLENBRGE7SUFFWixJQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFOUIsSUFBSSxNQUFNLEVBQUU7UUFDVixPQUFPLENBQ0wsMkJBQ0UsTUFBTSxFQUFDLFFBQVEsRUFDZixHQUFHLEVBQUMscUJBQXFCLEVBQ3pCLElBQUksRUFBRSxFQUFZLEVBQ2xCLFNBQVMsRUFBRSxJQUFJLENBQ2IsT0FBTyxDQUFDLElBQUk7Z0JBRVYsR0FBQyxPQUFPLENBQUMsT0FBTyxJQUFHLEtBQUssS0FBSyxTQUFTO2dCQUN0QyxHQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUcsS0FBSyxLQUFLLFVBQVU7Z0JBQ3hDLEdBQUMsT0FBTyxDQUFDLFFBQVEsSUFBRyxLQUFLLEtBQUssVUFBVTtxQkFFMUMsU0FBUyxDQUNWLGlCQUNZLFVBQVUsRUFDdkIsT0FBTyxFQUNMLFNBQVMsQ0FBQyxPQUFPO2dCQUNmLENBQUMsQ0FBRSxTQUFTLENBQUMsT0FJRztnQkFDaEIsQ0FBQyxDQUFDLFNBQVMsSUFHZCxRQUFRLENBQ1AsQ0FDTCxDQUFDO0tBQ0g7SUFFRCxPQUFPLENBQ0wsb0JBQUMsT0FBTyxhQUNOLEVBQUUsRUFBRSxFQUFFLEVBQ04sU0FBUyxFQUFFLElBQUksQ0FDYixPQUFPLENBQUMsSUFBSTtZQUVWLEdBQUMsT0FBTyxDQUFDLE9BQU8sSUFBRyxLQUFLLEtBQUssU0FBUztZQUN0QyxHQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUcsS0FBSyxLQUFLLFVBQVU7WUFDeEMsR0FBQyxPQUFPLENBQUMsUUFBUSxJQUFHLEtBQUssS0FBSyxVQUFVO2lCQUUxQyxTQUFTLENBQ1YsaUJBQ1ksVUFBVSxJQUNuQixTQUFTLEdBRVosUUFBUSxDQUNELENBQ1gsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgTmF2TGluayxcbiAgTmF2TGlua1Byb3BzIGFzIFJvdXRlckRvbU5hdkxpbmtQcm9wcyxcbn0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnLi4vLi4vc3R5bGVzJztcbmltcG9ydCB7IEdldENsYXNzZXMgfSBmcm9tICcuLi8uLi90eXBlVXRpbHMnO1xuXG5leHBvcnQgY29uc3QgTGlua1N0eWxlc0tleSA9ICdDaHJvbWFMaW5rJztcblxuZXhwb3J0IGNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoXG4gICh0aGVtZSkgPT4gKHtcbiAgICByb290OiB7XG4gICAgICBjb2xvcjogJ3JnYmEoMCwgODMsIDE1NCwgMC45KScsXG4gICAgICB0cmFuc2l0aW9uOiAnY29sb3IgMC4yNXMgZWFzZScsXG4gICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnlbOTAwXSxcbiAgICAgICAgdGV4dERlY29yYXRpb246ICd1bmRlcmxpbmUnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGludmVyc2U6IHtcbiAgICAgIGNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjkpJyxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICB9LFxuICAgIH0sXG4gICAgbmVnYXRpdmU6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLm5lZ2F0aXZlLm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUubmVnYXRpdmUuZGFyayxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBwb3NpdGl2ZToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucG9zaXRpdmUubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wb3NpdGl2ZS5kYXJrLFxuICAgICAgfSxcbiAgICB9LFxuICB9KSxcbiAgeyBuYW1lOiBMaW5rU3R5bGVzS2V5IH1cbik7XG5cbmV4cG9ydCB0eXBlIExpbmtDbGFzc2VzID0gR2V0Q2xhc3Nlczx0eXBlb2YgdXNlU3R5bGVzPjtcblxuZXhwb3J0IGludGVyZmFjZSBMaW5rUHJvcHNcbiAgZXh0ZW5kcyBSb3V0ZXJEb21OYXZMaW5rUHJvcHM8XG4gICAgUmVhY3QuRGV0YWlsZWRIVE1MUHJvcHM8XG4gICAgICBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MQW5jaG9yRWxlbWVudD4sXG4gICAgICBIVE1MQW5jaG9yRWxlbWVudFxuICAgID5cbiAgPiB7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBjb2xvcj86ICdkZWZhdWx0JyB8ICdpbnZlcnNlJyB8ICduZWdhdGl2ZScgfCAncG9zaXRpdmUnO1xuICBbJ2RhdGEtdGVzdGlkJ10/OiBzdHJpbmc7XG4gIG5ld1RhYj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBMaW5rOiBSZWFjdC5GQzxMaW5rUHJvcHM+ID0gKHtcbiAgdG8sXG4gIGNoaWxkcmVuLFxuICBjbGFzc05hbWUsXG4gIGNvbG9yID0gJ2RlZmF1bHQnLFxuICBuZXdUYWIsXG4gICdkYXRhLXRlc3RpZCc6IGRhdGFUZXN0SWQsXG4gIC4uLnJvb3RQcm9wc1xufSkgPT4ge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKHt9KTtcblxuICBpZiAobmV3VGFiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxhXG4gICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICBocmVmPXt0byBhcyBzdHJpbmd9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xzeChcbiAgICAgICAgICBjbGFzc2VzLnJvb3QsXG4gICAgICAgICAge1xuICAgICAgICAgICAgW2NsYXNzZXMuaW52ZXJzZV06IGNvbG9yID09PSAnaW52ZXJzZScsXG4gICAgICAgICAgICBbY2xhc3Nlcy5uZWdhdGl2ZV06IGNvbG9yID09PSAnbmVnYXRpdmUnLFxuICAgICAgICAgICAgW2NsYXNzZXMucG9zaXRpdmVdOiBjb2xvciA9PT0gJ3Bvc2l0aXZlJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNsYXNzTmFtZVxuICAgICAgICApfVxuICAgICAgICBkYXRhLXRlc3RpZD17ZGF0YVRlc3RJZH1cbiAgICAgICAgb25DbGljaz17XG4gICAgICAgICAgcm9vdFByb3BzLm9uQ2xpY2tcbiAgICAgICAgICAgID8gKHJvb3RQcm9wcy5vbkNsaWNrIGFzXG4gICAgICAgICAgICAgICAgfCAoKFxuICAgICAgICAgICAgICAgICAgICBldmVudDogUmVhY3QuTW91c2VFdmVudDxIVE1MQW5jaG9yRWxlbWVudCwgTW91c2VFdmVudD5cbiAgICAgICAgICAgICAgICAgICkgPT4gdm9pZClcbiAgICAgICAgICAgICAgICB8IHVuZGVmaW5lZClcbiAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICAgID5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9hPlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxOYXZMaW5rXG4gICAgICB0bz17dG99XG4gICAgICBjbGFzc05hbWU9e2Nsc3goXG4gICAgICAgIGNsYXNzZXMucm9vdCxcbiAgICAgICAge1xuICAgICAgICAgIFtjbGFzc2VzLmludmVyc2VdOiBjb2xvciA9PT0gJ2ludmVyc2UnLFxuICAgICAgICAgIFtjbGFzc2VzLm5lZ2F0aXZlXTogY29sb3IgPT09ICduZWdhdGl2ZScsXG4gICAgICAgICAgW2NsYXNzZXMucG9zaXRpdmVdOiBjb2xvciA9PT0gJ3Bvc2l0aXZlJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2xhc3NOYW1lXG4gICAgICApfVxuICAgICAgZGF0YS10ZXN0aWQ9e2RhdGFUZXN0SWR9XG4gICAgICB7Li4ucm9vdFByb3BzfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L05hdkxpbms+XG4gICk7XG59O1xuIl19