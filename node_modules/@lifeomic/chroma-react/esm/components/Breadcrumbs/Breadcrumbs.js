var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { makeStyles } from '../../styles/index';
import { Breadcrumb } from './Breadcrumb';
import { BreadcrumbNav } from './BreadcrumbNav';
export var BreadcrumbsStylesKey = 'ChromaBreadcrumbs';
export var useStyles = makeStyles(function (_theme) { return ({
    root: {},
    inverse: {},
}); }, { name: BreadcrumbsStylesKey });
export var Breadcrumbs = function (_a) {
    var _b;
    var className = _a.className, color = _a.color, crumbs = _a.crumbs, rootProps = __rest(_a, ["className", "color", "crumbs"]);
    var classes = useStyles({});
    return (React.createElement(BreadcrumbNav, __assign({ className: clsx(classes.root, (_b = {}, _b[classes.inverse] = color === 'inverse', _b), className) }, rootProps), crumbs &&
        crumbs.map(function (c, i) { return (React.createElement(Breadcrumb, { key: i, text: c.text, url: c.url, color: color, isCurrentPage: i === crumbs.length - 1 })); })));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJlYWRjcnVtYnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9CcmVhZGNydW1icy9CcmVhZGNydW1icy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFaEQsT0FBTyxFQUFFLFVBQVUsRUFBbUIsTUFBTSxjQUFjLENBQUM7QUFDM0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRWhELE1BQU0sQ0FBQyxJQUFNLG9CQUFvQixHQUFHLG1CQUFtQixDQUFDO0FBRXhELE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQ2pDLFVBQUMsTUFBTSxJQUFLLE9BQUEsQ0FBQztJQUNYLElBQUksRUFBRSxFQUFFO0lBQ1IsT0FBTyxFQUFFLEVBQUU7Q0FDWixDQUFDLEVBSFUsQ0FHVixFQUNGLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFFLENBQy9CLENBQUM7QUFhRixNQUFNLENBQUMsSUFBTSxXQUFXLEdBQStCLFVBQUMsRUFLdkQ7O0lBSkMsSUFBQSxTQUFTLGVBQUEsRUFDVCxLQUFLLFdBQUEsRUFDTCxNQUFNLFlBQUEsRUFDSCxTQUFTLGNBSjBDLGdDQUt2RCxDQURhO0lBRVosSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLE9BQU8sQ0FDTCxvQkFBQyxhQUFhLGFBQ1osU0FBUyxFQUFFLElBQUksQ0FDYixPQUFPLENBQUMsSUFBSSxZQUNWLEdBQUMsT0FBTyxDQUFDLE9BQU8sSUFBRyxLQUFLLEtBQUssU0FBUyxPQUN4QyxTQUFTLENBQ1YsSUFDRyxTQUFTLEdBRVosTUFBTTtRQUNMLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsQ0FDbkIsb0JBQUMsVUFBVSxJQUNULEdBQUcsRUFBRSxDQUFDLEVBQ04sSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQ1osR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQ1YsS0FBSyxFQUFFLEtBQUssRUFDWixhQUFhLEVBQUUsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUN0QyxDQUNILEVBUm9CLENBUXBCLENBQUMsQ0FDVSxDQUNqQixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnLi4vLi4vc3R5bGVzL2luZGV4JztcbmltcG9ydCB7IEdldENsYXNzZXMgfSBmcm9tICcuLi8uLi90eXBlVXRpbHMnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYiwgQnJlYWRjcnVtYlByb3BzIH0gZnJvbSAnLi9CcmVhZGNydW1iJztcbmltcG9ydCB7IEJyZWFkY3J1bWJOYXYgfSBmcm9tICcuL0JyZWFkY3J1bWJOYXYnO1xuXG5leHBvcnQgY29uc3QgQnJlYWRjcnVtYnNTdHlsZXNLZXkgPSAnQ2hyb21hQnJlYWRjcnVtYnMnO1xuXG5leHBvcnQgY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhcbiAgKF90aGVtZSkgPT4gKHtcbiAgICByb290OiB7fSxcbiAgICBpbnZlcnNlOiB7fSxcbiAgfSksXG4gIHsgbmFtZTogQnJlYWRjcnVtYnNTdHlsZXNLZXkgfVxuKTtcblxuZXhwb3J0IHR5cGUgQnJlYWRjcnVtYnNDbGFzc2VzID0gR2V0Q2xhc3Nlczx0eXBlb2YgdXNlU3R5bGVzPjtcblxuZXhwb3J0IGludGVyZmFjZSBCcmVhZGNydW1ic1Byb3BzXG4gIGV4dGVuZHMgUmVhY3QuRGV0YWlsZWRIVE1MUHJvcHM8XG4gICAgUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTEVsZW1lbnQ+LFxuICAgIEhUTUxFbGVtZW50XG4gID4ge1xuICBjb2xvcj86IEJyZWFkY3J1bWJQcm9wc1snY29sb3InXTtcbiAgY3J1bWJzOiBBcnJheTxCcmVhZGNydW1iUHJvcHM+O1xufVxuXG5leHBvcnQgY29uc3QgQnJlYWRjcnVtYnM6IFJlYWN0LkZDPEJyZWFkY3J1bWJzUHJvcHM+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBjb2xvcixcbiAgY3J1bWJzLFxuICAuLi5yb290UHJvcHNcbn0pID0+IHtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcyh7fSk7XG4gIHJldHVybiAoXG4gICAgPEJyZWFkY3J1bWJOYXZcbiAgICAgIGNsYXNzTmFtZT17Y2xzeChcbiAgICAgICAgY2xhc3Nlcy5yb290LFxuICAgICAgICB7IFtjbGFzc2VzLmludmVyc2VdOiBjb2xvciA9PT0gJ2ludmVyc2UnIH0sXG4gICAgICAgIGNsYXNzTmFtZVxuICAgICAgKX1cbiAgICAgIHsuLi5yb290UHJvcHN9XG4gICAgPlxuICAgICAge2NydW1icyAmJlxuICAgICAgICBjcnVtYnMubWFwKChjLCBpKSA9PiAoXG4gICAgICAgICAgPEJyZWFkY3J1bWJcbiAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgIHRleHQ9e2MudGV4dH1cbiAgICAgICAgICAgIHVybD17Yy51cmx9XG4gICAgICAgICAgICBjb2xvcj17Y29sb3J9XG4gICAgICAgICAgICBpc0N1cnJlbnRQYWdlPXtpID09PSBjcnVtYnMubGVuZ3RoIC0gMX1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICA8L0JyZWFkY3J1bWJOYXY+XG4gICk7XG59O1xuIl19