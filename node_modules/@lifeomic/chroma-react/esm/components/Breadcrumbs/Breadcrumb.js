var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { Link } from 'react-router-dom';
import { makeStyles } from '../../styles/index';
export var BreadcrumbStylesKey = 'ChromaBreadcrumb';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        display: 'inline',
        margin: 0,
        padding: 0,
        '& + li:before': {
            display: 'inline-block',
            marginTop: 0,
            marginBottom: 0,
            marginLeft: theme.spacing(1),
            marginRight: theme.spacing(1),
            transform: 'rotate(15deg)',
            borderRight: theme.pxToRem(1) + " solid " + theme.palette.text.dark,
            height: '0.75rem',
            content: "''",
        },
    },
    rootInverse: {
        '& + li:before': {
            borderRight: theme.pxToRem(1) + " solid " + theme.palette.common.white,
        },
    },
    link: {
        fontSize: theme.pxToRem(16),
        letterSpacing: theme.pxToRem(0.5),
        textDecoration: 'none',
        color: theme.palette.text.dark,
        transition: 'color 0.5s ease',
        '&:hover': {
            color: theme.palette.primary.main,
            textDecoration: 'underline',
        },
    },
    linkInverse: {
        color: theme.palette.common.white,
        transition: 'opacity 0.5s ease',
        opacity: 1,
        '&:hover': {
            color: theme.palette.common.white,
            opacity: 0.85,
        },
    },
}); }, { name: BreadcrumbStylesKey });
export var Breadcrumb = function (_a) {
    var _b, _c;
    var className = _a.className, _d = _a.color, color = _d === void 0 ? 'default' : _d, _e = _a.isCurrentPage, isCurrentPage = _e === void 0 ? false : _e, text = _a.text, url = _a.url, rootProps = __rest(_a, ["className", "color", "isCurrentPage", "text", "url"]);
    var classes = useStyles({});
    return (React.createElement("li", __assign({ className: clsx(classes.root, (_b = {},
            _b[classes.rootInverse] = color === 'inverse',
            _b), className) }, rootProps),
        React.createElement(Link, { "aria-current": isCurrentPage ? 'page' : undefined, className: clsx(classes.link, (_c = {},
                _c[classes.linkInverse] = color === 'inverse',
                _c)), to: url }, text)));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJlYWRjcnVtYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0JyZWFkY3J1bWJzL0JyZWFkY3J1bWIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUdoRCxNQUFNLENBQUMsSUFBTSxtQkFBbUIsR0FBRyxrQkFBa0IsQ0FBQztBQUV0RCxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsVUFBVSxDQUNqQyxVQUFDLEtBQUssSUFBSyxPQUFBLENBQUM7SUFDVixJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsUUFBUTtRQUNqQixNQUFNLEVBQUUsQ0FBQztRQUNULE9BQU8sRUFBRSxDQUFDO1FBQ1YsZUFBZSxFQUFFO1lBQ2YsT0FBTyxFQUFFLGNBQWM7WUFDdkIsU0FBUyxFQUFFLENBQUM7WUFDWixZQUFZLEVBQUUsQ0FBQztZQUNmLFVBQVUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUM1QixXQUFXLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDN0IsU0FBUyxFQUFFLGVBQWU7WUFDMUIsV0FBVyxFQUFLLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGVBQVUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBTTtZQUNuRSxNQUFNLEVBQUUsU0FBUztZQUNqQixPQUFPLEVBQUUsSUFBSTtTQUNkO0tBQ0Y7SUFDRCxXQUFXLEVBQUU7UUFDWCxlQUFlLEVBQUU7WUFDZixXQUFXLEVBQUssS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsZUFBVSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFPO1NBQ3ZFO0tBQ0Y7SUFDRCxJQUFJLEVBQUU7UUFDSixRQUFRLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDM0IsYUFBYSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQ2pDLGNBQWMsRUFBRSxNQUFNO1FBQ3RCLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJO1FBQzlCLFVBQVUsRUFBRSxpQkFBaUI7UUFDN0IsU0FBUyxFQUFFO1lBQ1QsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUk7WUFDakMsY0FBYyxFQUFFLFdBQVc7U0FDNUI7S0FDRjtJQUNELFdBQVcsRUFBRTtRQUNYLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLO1FBQ2pDLFVBQVUsRUFBRSxtQkFBbUI7UUFDL0IsT0FBTyxFQUFFLENBQUM7UUFDVixTQUFTLEVBQUU7WUFDVCxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSztZQUNqQyxPQUFPLEVBQUUsSUFBSTtTQUNkO0tBQ0Y7Q0FDRixDQUFDLEVBMUNTLENBMENULEVBQ0YsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsQ0FDOUIsQ0FBQztBQWVGLE1BQU0sQ0FBQyxJQUFNLFVBQVUsR0FBOEIsVUFBQyxFQU9yRDs7SUFOQyxJQUFBLHdCQUFTLEVBQ1QsYUFBaUIsRUFBakIsc0NBQWlCLEVBQ2pCLHFCQUFxQixFQUFyQiwwQ0FBcUIsRUFDckIsY0FBSSxFQUNKLFlBQUcsRUFDSCw4RUFBWTtJQUVaLElBQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUU5QixPQUFPLENBQ0wscUNBQ0UsU0FBUyxFQUFFLElBQUksQ0FDYixPQUFPLENBQUMsSUFBSTtZQUVWLEdBQUMsT0FBTyxDQUFDLFdBQVcsSUFBRyxLQUFLLEtBQUssU0FBUztpQkFFNUMsU0FBUyxDQUNWLElBQ0csU0FBUztRQUViLG9CQUFDLElBQUksb0JBQ1csYUFBYSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFDaEQsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSTtnQkFDMUIsR0FBQyxPQUFPLENBQUMsV0FBVyxJQUFHLEtBQUssS0FBSyxTQUFTO29CQUMxQyxFQUNGLEVBQUUsRUFBRSxHQUFHLElBRU4sSUFBSSxDQUNBLENBQ0osQ0FDTixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnLi4vLi4vc3R5bGVzL2luZGV4JztcbmltcG9ydCB7IEdldENsYXNzZXMgfSBmcm9tICcuLi8uLi90eXBlVXRpbHMnO1xuXG5leHBvcnQgY29uc3QgQnJlYWRjcnVtYlN0eWxlc0tleSA9ICdDaHJvbWFCcmVhZGNydW1iJztcblxuZXhwb3J0IGNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoXG4gICh0aGVtZSkgPT4gKHtcbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lJyxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAnJiArIGxpOmJlZm9yZSc6IHtcbiAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAwLFxuICAgICAgICBtYXJnaW5MZWZ0OiB0aGVtZS5zcGFjaW5nKDEpLFxuICAgICAgICBtYXJnaW5SaWdodDogdGhlbWUuc3BhY2luZygxKSxcbiAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDE1ZGVnKScsXG4gICAgICAgIGJvcmRlclJpZ2h0OiBgJHt0aGVtZS5weFRvUmVtKDEpfSBzb2xpZCAke3RoZW1lLnBhbGV0dGUudGV4dC5kYXJrfWAsXG4gICAgICAgIGhlaWdodDogJzAuNzVyZW0nLFxuICAgICAgICBjb250ZW50OiBgJydgLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHJvb3RJbnZlcnNlOiB7XG4gICAgICAnJiArIGxpOmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyUmlnaHQ6IGAke3RoZW1lLnB4VG9SZW0oMSl9IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGV9YCxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBsaW5rOiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUucHhUb1JlbSgxNiksXG4gICAgICBsZXR0ZXJTcGFjaW5nOiB0aGVtZS5weFRvUmVtKDAuNSksXG4gICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kYXJrLFxuICAgICAgdHJhbnNpdGlvbjogJ2NvbG9yIDAuNXMgZWFzZScsXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ3VuZGVybGluZScsXG4gICAgICB9LFxuICAgIH0sXG4gICAgbGlua0ludmVyc2U6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcbiAgICAgIHRyYW5zaXRpb246ICdvcGFjaXR5IDAuNXMgZWFzZScsXG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcbiAgICAgICAgb3BhY2l0eTogMC44NSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSksXG4gIHsgbmFtZTogQnJlYWRjcnVtYlN0eWxlc0tleSB9XG4pO1xuXG5leHBvcnQgdHlwZSBCcmVhZGNydW1iQ2xhc3NlcyA9IEdldENsYXNzZXM8dHlwZW9mIHVzZVN0eWxlcz47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJlYWRjcnVtYlByb3BzXG4gIGV4dGVuZHMgUmVhY3QuRGV0YWlsZWRIVE1MUHJvcHM8XG4gICAgUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTExJRWxlbWVudD4sXG4gICAgSFRNTExJRWxlbWVudFxuICA+IHtcbiAgY29sb3I/OiAnaW52ZXJzZScgfCAnZGVmYXVsdCc7XG4gIGlzQ3VycmVudFBhZ2U/OiBib29sZWFuO1xuICB0ZXh0OiBzdHJpbmc7XG4gIHVybDogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgQnJlYWRjcnVtYjogUmVhY3QuRkM8QnJlYWRjcnVtYlByb3BzPiA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgY29sb3IgPSAnZGVmYXVsdCcsXG4gIGlzQ3VycmVudFBhZ2UgPSBmYWxzZSxcbiAgdGV4dCxcbiAgdXJsLFxuICAuLi5yb290UHJvcHNcbn0pID0+IHtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcyh7fSk7XG5cbiAgcmV0dXJuIChcbiAgICA8bGlcbiAgICAgIGNsYXNzTmFtZT17Y2xzeChcbiAgICAgICAgY2xhc3Nlcy5yb290LFxuICAgICAgICB7XG4gICAgICAgICAgW2NsYXNzZXMucm9vdEludmVyc2VdOiBjb2xvciA9PT0gJ2ludmVyc2UnLFxuICAgICAgICB9LFxuICAgICAgICBjbGFzc05hbWVcbiAgICAgICl9XG4gICAgICB7Li4ucm9vdFByb3BzfVxuICAgID5cbiAgICAgIDxMaW5rXG4gICAgICAgIGFyaWEtY3VycmVudD17aXNDdXJyZW50UGFnZSA/ICdwYWdlJyA6IHVuZGVmaW5lZH1cbiAgICAgICAgY2xhc3NOYW1lPXtjbHN4KGNsYXNzZXMubGluaywge1xuICAgICAgICAgIFtjbGFzc2VzLmxpbmtJbnZlcnNlXTogY29sb3IgPT09ICdpbnZlcnNlJyxcbiAgICAgICAgfSl9XG4gICAgICAgIHRvPXt1cmx9XG4gICAgICA+XG4gICAgICAgIHt0ZXh0fVxuICAgICAgPC9MaW5rPlxuICAgIDwvbGk+XG4gICk7XG59O1xuIl19