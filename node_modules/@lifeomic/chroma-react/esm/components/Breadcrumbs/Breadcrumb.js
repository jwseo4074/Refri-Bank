var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { Link } from 'react-router-dom';
import { makeStyles } from '../../styles/index';
export var BreadcrumbStylesKey = 'ChromaBreadcrumb';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        display: 'inline',
        margin: 0,
        padding: 0,
        '& + li:before': {
            display: 'inline-block',
            marginTop: 0,
            marginBottom: 0,
            marginLeft: theme.spacing(1),
            marginRight: theme.spacing(1),
            transform: 'rotate(15deg)',
            borderRight: "".concat(theme.pxToRem(1), " solid ").concat(theme.palette.text.dark),
            height: '0.75rem',
            content: "''",
        },
    },
    rootInverse: {
        '& + li:before': {
            borderRight: "".concat(theme.pxToRem(1), " solid ").concat(theme.palette.common.white),
        },
    },
    link: {
        fontSize: theme.pxToRem(16),
        letterSpacing: theme.pxToRem(0.5),
        textDecoration: 'none',
        color: theme.palette.text.dark,
        transition: 'color 0.5s ease',
        '&:hover': {
            color: theme.palette.primary.main,
            textDecoration: 'underline',
        },
    },
    linkInverse: {
        color: theme.palette.common.white,
        transition: 'opacity 0.5s ease',
        opacity: 1,
        '&:hover': {
            color: theme.palette.common.white,
            opacity: 0.85,
        },
    },
}); }, { name: BreadcrumbStylesKey });
export var Breadcrumb = function (_a) {
    var _b, _c;
    var className = _a.className, _d = _a.color, color = _d === void 0 ? 'default' : _d, _e = _a.isCurrentPage, isCurrentPage = _e === void 0 ? false : _e, text = _a.text, url = _a.url, rootProps = __rest(_a, ["className", "color", "isCurrentPage", "text", "url"]);
    var classes = useStyles({});
    return (React.createElement("li", __assign({ className: clsx(classes.root, (_b = {},
            _b[classes.rootInverse] = color === 'inverse',
            _b), className) }, rootProps),
        React.createElement(Link, { "aria-current": isCurrentPage ? 'page' : undefined, className: clsx(classes.link, (_c = {},
                _c[classes.linkInverse] = color === 'inverse',
                _c)), to: url }, text)));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJlYWRjcnVtYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0JyZWFkY3J1bWJzL0JyZWFkY3J1bWIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUdoRCxNQUFNLENBQUMsSUFBTSxtQkFBbUIsR0FBRyxrQkFBa0IsQ0FBQztBQUV0RCxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsVUFBVSxDQUNqQyxVQUFDLEtBQUssSUFBSyxPQUFBLENBQUM7SUFDVixJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsUUFBUTtRQUNqQixNQUFNLEVBQUUsQ0FBQztRQUNULE9BQU8sRUFBRSxDQUFDO1FBQ1YsZUFBZSxFQUFFO1lBQ2YsT0FBTyxFQUFFLGNBQWM7WUFDdkIsU0FBUyxFQUFFLENBQUM7WUFDWixZQUFZLEVBQUUsQ0FBQztZQUNmLFVBQVUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUM1QixXQUFXLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDN0IsU0FBUyxFQUFFLGVBQWU7WUFDMUIsV0FBVyxFQUFFLFVBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsb0JBQVUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFFO1lBQ25FLE1BQU0sRUFBRSxTQUFTO1lBQ2pCLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7S0FDRjtJQUNELFdBQVcsRUFBRTtRQUNYLGVBQWUsRUFBRTtZQUNmLFdBQVcsRUFBRSxVQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLG9CQUFVLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBRTtTQUN2RTtLQUNGO0lBQ0QsSUFBSSxFQUFFO1FBQ0osUUFBUSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQzNCLGFBQWEsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUNqQyxjQUFjLEVBQUUsTUFBTTtRQUN0QixLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSTtRQUM5QixVQUFVLEVBQUUsaUJBQWlCO1FBQzdCLFNBQVMsRUFBRTtZQUNULEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJO1lBQ2pDLGNBQWMsRUFBRSxXQUFXO1NBQzVCO0tBQ0Y7SUFDRCxXQUFXLEVBQUU7UUFDWCxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSztRQUNqQyxVQUFVLEVBQUUsbUJBQW1CO1FBQy9CLE9BQU8sRUFBRSxDQUFDO1FBQ1YsU0FBUyxFQUFFO1lBQ1QsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUs7WUFDakMsT0FBTyxFQUFFLElBQUk7U0FDZDtLQUNGO0NBQ0YsQ0FBQyxFQTFDUyxDQTBDVCxFQUNGLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLENBQzlCLENBQUM7QUFnQkYsTUFBTSxDQUFDLElBQU0sVUFBVSxHQUE4QixVQUFDLEVBT3JEOztJQU5DLElBQUEsU0FBUyxlQUFBLEVBQ1QsYUFBaUIsRUFBakIsS0FBSyxtQkFBRyxTQUFTLEtBQUEsRUFDakIscUJBQXFCLEVBQXJCLGFBQWEsbUJBQUcsS0FBSyxLQUFBLEVBQ3JCLElBQUksVUFBQSxFQUNKLEdBQUcsU0FBQSxFQUNBLFNBQVMsY0FOd0Msc0RBT3JELENBRGE7SUFFWixJQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFOUIsT0FBTyxDQUNMLHFDQUNFLFNBQVMsRUFBRSxJQUFJLENBQ2IsT0FBTyxDQUFDLElBQUk7WUFFVixHQUFDLE9BQU8sQ0FBQyxXQUFXLElBQUcsS0FBSyxLQUFLLFNBQVM7aUJBRTVDLFNBQVMsQ0FDVixJQUNHLFNBQVM7UUFFYixvQkFBQyxJQUFJLG9CQUNXLGFBQWEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQ2hELFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUk7Z0JBQzFCLEdBQUMsT0FBTyxDQUFDLFdBQVcsSUFBRyxLQUFLLEtBQUssU0FBUztvQkFDMUMsRUFDRixFQUFFLEVBQUUsR0FBRyxJQUVOLElBQUksQ0FDQSxDQUNKLENBQ04sQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJy4uLy4uL3N0eWxlcy9pbmRleCc7XG5pbXBvcnQgeyBHZXRDbGFzc2VzIH0gZnJvbSAnLi4vLi4vdHlwZVV0aWxzJztcblxuZXhwb3J0IGNvbnN0IEJyZWFkY3J1bWJTdHlsZXNLZXkgPSAnQ2hyb21hQnJlYWRjcnVtYic7XG5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAodGhlbWUpID0+ICh7XG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2lubGluZScsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgJyYgKyBsaTpiZWZvcmUnOiB7XG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICBtYXJnaW5Ub3A6IDAsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogMCxcbiAgICAgICAgbWFyZ2luTGVmdDogdGhlbWUuc3BhY2luZygxKSxcbiAgICAgICAgbWFyZ2luUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMSksXG4gICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgxNWRlZyknLFxuICAgICAgICBib3JkZXJSaWdodDogYCR7dGhlbWUucHhUb1JlbSgxKX0gc29saWQgJHt0aGVtZS5wYWxldHRlLnRleHQuZGFya31gLFxuICAgICAgICBoZWlnaHQ6ICcwLjc1cmVtJyxcbiAgICAgICAgY29udGVudDogYCcnYCxcbiAgICAgIH0sXG4gICAgfSxcbiAgICByb290SW52ZXJzZToge1xuICAgICAgJyYgKyBsaTpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlclJpZ2h0OiBgJHt0aGVtZS5weFRvUmVtKDEpfSBzb2xpZCAke3RoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlfWAsXG4gICAgICB9LFxuICAgIH0sXG4gICAgbGluazoge1xuICAgICAgZm9udFNpemU6IHRoZW1lLnB4VG9SZW0oMTYpLFxuICAgICAgbGV0dGVyU3BhY2luZzogdGhlbWUucHhUb1JlbSgwLjUpLFxuICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuZGFyayxcbiAgICAgIHRyYW5zaXRpb246ICdjb2xvciAwLjVzIGVhc2UnLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgICAgdGV4dERlY29yYXRpb246ICd1bmRlcmxpbmUnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGxpbmtJbnZlcnNlOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAwLjVzIGVhc2UnLFxuICAgICAgb3BhY2l0eTogMSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICAgIG9wYWNpdHk6IDAuODUsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pLFxuICB7IG5hbWU6IEJyZWFkY3J1bWJTdHlsZXNLZXkgfVxuKTtcblxuZXhwb3J0IHR5cGUgQnJlYWRjcnVtYkNsYXNzZXMgPSBHZXRDbGFzc2VzPHR5cGVvZiB1c2VTdHlsZXM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJyZWFkY3J1bWJQcm9wc1xuICBleHRlbmRzIFJlYWN0LkRldGFpbGVkSFRNTFByb3BzPFxuICAgIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxMSUVsZW1lbnQ+LFxuICAgIEhUTUxMSUVsZW1lbnRcbiAgPiB7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBjb2xvcj86ICdpbnZlcnNlJyB8ICdkZWZhdWx0JztcbiAgaXNDdXJyZW50UGFnZT86IGJvb2xlYW47XG4gIHRleHQ6IHN0cmluZztcbiAgdXJsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBCcmVhZGNydW1iOiBSZWFjdC5GQzxCcmVhZGNydW1iUHJvcHM+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBjb2xvciA9ICdkZWZhdWx0JyxcbiAgaXNDdXJyZW50UGFnZSA9IGZhbHNlLFxuICB0ZXh0LFxuICB1cmwsXG4gIC4uLnJvb3RQcm9wc1xufSkgPT4ge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKHt9KTtcblxuICByZXR1cm4gKFxuICAgIDxsaVxuICAgICAgY2xhc3NOYW1lPXtjbHN4KFxuICAgICAgICBjbGFzc2VzLnJvb3QsXG4gICAgICAgIHtcbiAgICAgICAgICBbY2xhc3Nlcy5yb290SW52ZXJzZV06IGNvbG9yID09PSAnaW52ZXJzZScsXG4gICAgICAgIH0sXG4gICAgICAgIGNsYXNzTmFtZVxuICAgICAgKX1cbiAgICAgIHsuLi5yb290UHJvcHN9XG4gICAgPlxuICAgICAgPExpbmtcbiAgICAgICAgYXJpYS1jdXJyZW50PXtpc0N1cnJlbnRQYWdlID8gJ3BhZ2UnIDogdW5kZWZpbmVkfVxuICAgICAgICBjbGFzc05hbWU9e2Nsc3goY2xhc3Nlcy5saW5rLCB7XG4gICAgICAgICAgW2NsYXNzZXMubGlua0ludmVyc2VdOiBjb2xvciA9PT0gJ2ludmVyc2UnLFxuICAgICAgICB9KX1cbiAgICAgICAgdG89e3VybH1cbiAgICAgID5cbiAgICAgICAge3RleHR9XG4gICAgICA8L0xpbms+XG4gICAgPC9saT5cbiAgKTtcbn07XG4iXX0=