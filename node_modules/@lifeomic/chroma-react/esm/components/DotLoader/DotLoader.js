var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { makeStyles } from '../../styles';
import { AnimatePresence, motion } from 'framer-motion';
export var DotLoaderStylesKey = 'ChromaDotLoader';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        height: theme.pxToRem(100),
        width: theme.pxToRem(100),
    },
    size0: {
        height: theme.pxToRem(25),
        width: theme.pxToRem(25),
    },
    size1: {
        height: theme.pxToRem(50),
        width: theme.pxToRem(50),
    },
    '@keyframes bounce': {
        '0%': {
            transform: 'translate3d(0, 0, 0)',
        },
        '50%': {
            transform: 'translate3d(0, 1rem, 0)',
        },
        '100%': {
            transform: 'translate3d(0, 0, 0)',
        },
    },
    bounce1: {
        animation: '$bounce 1s 0s infinite',
        fill: theme.palette.red.main,
    },
    bounce2: {
        animation: '$bounce 1s 0.2s infinite',
        fill: '#F7C44D',
    },
    bounce3: {
        animation: '$bounce 1s 0.4s infinite',
        fill: '#09BEEF',
    },
    bounce4: {
        animation: '$bounce 1s 0.6s infinite',
        fill: theme.palette.green.light,
    },
}); }, { name: DotLoaderStylesKey });
export var DotLoader = function (_a) {
    var _b;
    var size = _a.size, dotStyle = _a.dotStyle, rootProps = __rest(_a, ["size", "dotStyle"]);
    var classes = useStyles({});
    return (React.createElement(AnimatePresence, null,
        React.createElement(motion.svg, __assign({ role: "progressbar", version: "1.1", xmlns: "http://www.w3.org/2000/svg", x: "0px", y: "0px", viewBox: "0 0 72 78", className: clsx(classes.root, (_b = {},
                _b[classes.size0] = size === 0,
                _b[classes.size1] = size === 1,
                _b)), initial: { opacity: 0 }, animate: { opacity: 1, transition: { duration: 0.3 } }, exit: { opacity: 0, transition: { duration: 0.25 } } }, rootProps),
            React.createElement("circle", { stroke: "none", cx: "6", cy: "28", r: "6", className: clsx(classes.bounce1, dotStyle) }),
            React.createElement("circle", { stroke: "none", cx: "26", cy: "28", r: "6", className: clsx(classes.bounce2, dotStyle) }),
            React.createElement("circle", { stroke: "none", cx: "46", cy: "28", r: "6", className: clsx(classes.bounce3, dotStyle) }),
            React.createElement("circle", { stroke: "none", cx: "66", cy: "28", r: "6", className: clsx(classes.bounce4, dotStyle) }))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG90TG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRG90TG9hZGVyL0RvdExvYWRlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sSUFBb0IsTUFBTSxNQUFNLENBQUM7QUFDeEMsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUxQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBZSxNQUFNLGVBQWUsQ0FBQztBQUVyRSxNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBRyxpQkFBaUIsQ0FBQztBQUVwRCxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsVUFBVSxDQUNqQyxVQUFDLEtBQUssSUFBSyxPQUFBLENBQUM7SUFDVixJQUFJLEVBQUU7UUFDSixNQUFNLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDMUIsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO0tBQzFCO0lBQ0QsS0FBSyxFQUFFO1FBQ0wsTUFBTSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ3pCLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztLQUN6QjtJQUNELEtBQUssRUFBRTtRQUNMLE1BQU0sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUN6QixLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7S0FDekI7SUFDRCxtQkFBbUIsRUFBRTtRQUNuQixJQUFJLEVBQUU7WUFDSixTQUFTLEVBQUUsc0JBQXNCO1NBQ2xDO1FBQ0QsS0FBSyxFQUFFO1lBQ0wsU0FBUyxFQUFFLHlCQUF5QjtTQUNyQztRQUNELE1BQU0sRUFBRTtZQUNOLFNBQVMsRUFBRSxzQkFBc0I7U0FDbEM7S0FDRjtJQUNELE9BQU8sRUFBRTtRQUNQLFNBQVMsRUFBRSx3QkFBd0I7UUFDbkMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUk7S0FDN0I7SUFDRCxPQUFPLEVBQUU7UUFDUCxTQUFTLEVBQUUsMEJBQTBCO1FBQ3JDLElBQUksRUFBRSxTQUFTO0tBQ2hCO0lBQ0QsT0FBTyxFQUFFO1FBQ1AsU0FBUyxFQUFFLDBCQUEwQjtRQUNyQyxJQUFJLEVBQUUsU0FBUztLQUNoQjtJQUNELE9BQU8sRUFBRTtRQUNQLFNBQVMsRUFBRSwwQkFBMEI7UUFDckMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUs7S0FDaEM7Q0FDRixDQUFDLEVBeENTLENBd0NULEVBQ0YsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsQ0FDN0IsQ0FBQztBQWNGLE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBNEMsVUFBQyxFQUlsRTs7SUFIQyxJQUFBLElBQUksVUFBQSxFQUNKLFFBQVEsY0FBQSxFQUNMLFNBQVMsY0FIcUQsb0JBSWxFLENBRGE7SUFFWixJQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFOUIsT0FBTyxDQUNMLG9CQUFDLGVBQWU7UUFDZCxvQkFBQyxNQUFNLENBQUMsR0FBRyxhQUNULElBQUksRUFBQyxhQUFhLEVBQ2xCLE9BQU8sRUFBQyxLQUFLLEVBQ2IsS0FBSyxFQUFDLDRCQUE0QixFQUNsQyxDQUFDLEVBQUMsS0FBSyxFQUNQLENBQUMsRUFBQyxLQUFLLEVBQ1AsT0FBTyxFQUFDLFdBQVcsRUFDbkIsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSTtnQkFDMUIsR0FBQyxPQUFPLENBQUMsS0FBSyxJQUFHLElBQUksS0FBSyxDQUFDO2dCQUMzQixHQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUcsSUFBSSxLQUFLLENBQUM7b0JBQzNCLEVBQ0YsT0FBTyxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUN2QixPQUFPLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUN0RCxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUNoRCxTQUFTO1lBRWIsZ0NBQ0UsTUFBTSxFQUFDLE1BQU0sRUFDYixFQUFFLEVBQUMsR0FBRyxFQUNOLEVBQUUsRUFBQyxJQUFJLEVBQ1AsQ0FBQyxFQUFDLEdBQUcsRUFDTCxTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLEdBQzFDO1lBQ0YsZ0NBQ0UsTUFBTSxFQUFDLE1BQU0sRUFDYixFQUFFLEVBQUMsSUFBSSxFQUNQLEVBQUUsRUFBQyxJQUFJLEVBQ1AsQ0FBQyxFQUFDLEdBQUcsRUFDTCxTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLEdBQzFDO1lBQ0YsZ0NBQ0UsTUFBTSxFQUFDLE1BQU0sRUFDYixFQUFFLEVBQUMsSUFBSSxFQUNQLEVBQUUsRUFBQyxJQUFJLEVBQ1AsQ0FBQyxFQUFDLEdBQUcsRUFDTCxTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLEdBQzFDO1lBQ0YsZ0NBQ0UsTUFBTSxFQUFDLE1BQU0sRUFDYixFQUFFLEVBQUMsSUFBSSxFQUNQLEVBQUUsRUFBQyxJQUFJLEVBQ1AsQ0FBQyxFQUFDLEdBQUcsRUFDTCxTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLEdBQzFDLENBQ1MsQ0FDRyxDQUNuQixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsc3gsIHsgQ2xhc3NWYWx1ZSB9IGZyb20gJ2Nsc3gnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJy4uLy4uL3N0eWxlcyc7XG5pbXBvcnQgeyBHZXRDbGFzc2VzIH0gZnJvbSAnLi4vLi4vdHlwZVV0aWxzJztcbmltcG9ydCB7IEFuaW1hdGVQcmVzZW5jZSwgbW90aW9uLCBNb3Rpb25Qcm9wcyB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nO1xuXG5leHBvcnQgY29uc3QgRG90TG9hZGVyU3R5bGVzS2V5ID0gJ0Nocm9tYURvdExvYWRlcic7XG5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAodGhlbWUpID0+ICh7XG4gICAgcm9vdDoge1xuICAgICAgaGVpZ2h0OiB0aGVtZS5weFRvUmVtKDEwMCksXG4gICAgICB3aWR0aDogdGhlbWUucHhUb1JlbSgxMDApLFxuICAgIH0sXG4gICAgc2l6ZTA6IHtcbiAgICAgIGhlaWdodDogdGhlbWUucHhUb1JlbSgyNSksXG4gICAgICB3aWR0aDogdGhlbWUucHhUb1JlbSgyNSksXG4gICAgfSxcbiAgICBzaXplMToge1xuICAgICAgaGVpZ2h0OiB0aGVtZS5weFRvUmVtKDUwKSxcbiAgICAgIHdpZHRoOiB0aGVtZS5weFRvUmVtKDUwKSxcbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIGJvdW5jZSc6IHtcbiAgICAgICcwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwgMCwgMCknLFxuICAgICAgfSxcbiAgICAgICc1MCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsIDFyZW0sIDApJyxcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwgMCwgMCknLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGJvdW5jZTE6IHtcbiAgICAgIGFuaW1hdGlvbjogJyRib3VuY2UgMXMgMHMgaW5maW5pdGUnLFxuICAgICAgZmlsbDogdGhlbWUucGFsZXR0ZS5yZWQubWFpbixcbiAgICB9LFxuICAgIGJvdW5jZTI6IHtcbiAgICAgIGFuaW1hdGlvbjogJyRib3VuY2UgMXMgMC4ycyBpbmZpbml0ZScsXG4gICAgICBmaWxsOiAnI0Y3QzQ0RCcsXG4gICAgfSxcbiAgICBib3VuY2UzOiB7XG4gICAgICBhbmltYXRpb246ICckYm91bmNlIDFzIDAuNHMgaW5maW5pdGUnLFxuICAgICAgZmlsbDogJyMwOUJFRUYnLFxuICAgIH0sXG4gICAgYm91bmNlNDoge1xuICAgICAgYW5pbWF0aW9uOiAnJGJvdW5jZSAxcyAwLjZzIGluZmluaXRlJyxcbiAgICAgIGZpbGw6IHRoZW1lLnBhbGV0dGUuZ3JlZW4ubGlnaHQsXG4gICAgfSxcbiAgfSksXG4gIHsgbmFtZTogRG90TG9hZGVyU3R5bGVzS2V5IH1cbik7XG5cbmV4cG9ydCB0eXBlIERvdExvYWRlckNsYXNzZXMgPSBHZXRDbGFzc2VzPHR5cGVvZiB1c2VTdHlsZXM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIERvdExvYWRlclByb3BzXG4gIGV4dGVuZHMgT21pdDxcbiAgICAgIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjwnc3ZnJz4sXG4gICAgICAnb25BbmltYXRpb25TdGFydCcgfCAnb25EcmFnJyB8ICdvbkRyYWdFbmQnIHwgJ29uRHJhZ1N0YXJ0JyB8ICdzdHlsZSdcbiAgICA+LFxuICAgIE1vdGlvblByb3BzIHtcbiAgc2l6ZT86IDAgfCAxO1xuICBkb3RTdHlsZT86IENsYXNzVmFsdWU7XG59XG5cbmV4cG9ydCBjb25zdCBEb3RMb2FkZXI6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PERvdExvYWRlclByb3BzPiA9ICh7XG4gIHNpemUsXG4gIGRvdFN0eWxlLFxuICAuLi5yb290UHJvcHNcbn0pID0+IHtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcyh7fSk7XG5cbiAgcmV0dXJuIChcbiAgICA8QW5pbWF0ZVByZXNlbmNlPlxuICAgICAgPG1vdGlvbi5zdmdcbiAgICAgICAgcm9sZT1cInByb2dyZXNzYmFyXCJcbiAgICAgICAgdmVyc2lvbj1cIjEuMVwiXG4gICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICB4PVwiMHB4XCJcbiAgICAgICAgeT1cIjBweFwiXG4gICAgICAgIHZpZXdCb3g9XCIwIDAgNzIgNzhcIlxuICAgICAgICBjbGFzc05hbWU9e2Nsc3goY2xhc3Nlcy5yb290LCB7XG4gICAgICAgICAgW2NsYXNzZXMuc2l6ZTBdOiBzaXplID09PSAwLFxuICAgICAgICAgIFtjbGFzc2VzLnNpemUxXTogc2l6ZSA9PT0gMSxcbiAgICAgICAgfSl9XG4gICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCB9fVxuICAgICAgICBhbmltYXRlPXt7IG9wYWNpdHk6IDEsIHRyYW5zaXRpb246IHsgZHVyYXRpb246IDAuMyB9IH19XG4gICAgICAgIGV4aXQ9e3sgb3BhY2l0eTogMCwgdHJhbnNpdGlvbjogeyBkdXJhdGlvbjogMC4yNSB9IH19XG4gICAgICAgIHsuLi5yb290UHJvcHN9XG4gICAgICA+XG4gICAgICAgIDxjaXJjbGVcbiAgICAgICAgICBzdHJva2U9XCJub25lXCJcbiAgICAgICAgICBjeD1cIjZcIlxuICAgICAgICAgIGN5PVwiMjhcIlxuICAgICAgICAgIHI9XCI2XCJcbiAgICAgICAgICBjbGFzc05hbWU9e2Nsc3goY2xhc3Nlcy5ib3VuY2UxLCBkb3RTdHlsZSl9XG4gICAgICAgIC8+XG4gICAgICAgIDxjaXJjbGVcbiAgICAgICAgICBzdHJva2U9XCJub25lXCJcbiAgICAgICAgICBjeD1cIjI2XCJcbiAgICAgICAgICBjeT1cIjI4XCJcbiAgICAgICAgICByPVwiNlwiXG4gICAgICAgICAgY2xhc3NOYW1lPXtjbHN4KGNsYXNzZXMuYm91bmNlMiwgZG90U3R5bGUpfVxuICAgICAgICAvPlxuICAgICAgICA8Y2lyY2xlXG4gICAgICAgICAgc3Ryb2tlPVwibm9uZVwiXG4gICAgICAgICAgY3g9XCI0NlwiXG4gICAgICAgICAgY3k9XCIyOFwiXG4gICAgICAgICAgcj1cIjZcIlxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLmJvdW5jZTMsIGRvdFN0eWxlKX1cbiAgICAgICAgLz5cbiAgICAgICAgPGNpcmNsZVxuICAgICAgICAgIHN0cm9rZT1cIm5vbmVcIlxuICAgICAgICAgIGN4PVwiNjZcIlxuICAgICAgICAgIGN5PVwiMjhcIlxuICAgICAgICAgIHI9XCI2XCJcbiAgICAgICAgICBjbGFzc05hbWU9e2Nsc3goY2xhc3Nlcy5ib3VuY2U0LCBkb3RTdHlsZSl9XG4gICAgICAgIC8+XG4gICAgICA8L21vdGlvbi5zdmc+XG4gICAgPC9BbmltYXRlUHJlc2VuY2U+XG4gICk7XG59O1xuIl19