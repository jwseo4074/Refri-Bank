var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { makeStyles } from '../../styles';
import { buildDescribedBy, FormHelpMessage, helpFor, } from '../_private/forms';
import { generateUniqueId } from '../_private/UniqueId';
import { clearClipPath, defaultClipPath } from './clipPaths';
export var SearchFieldStylesKey = 'ChromaSearchField';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        position: 'relative',
    },
    input: {
        backgroundColor: 'rgba(132, 137, 166, 0.15)',
        border: "1px solid transparent",
        borderRadius: theme.pxToRem(4),
        color: theme.palette.text.primary,
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.pxToRem(14),
        lineHeight: 1.25,
        paddingLeft: theme.spacing(1.25),
        // Requires more paddingRight so we give the search icon enough
        // room when the text inside the search field is long.
        paddingRight: theme.spacing(3.75),
        transition: 'border 0.25s ease',
        maxWidth: theme.pxToRem(173),
        '&:focus': {
            outline: 'none',
            backgroundColor: 'rgba(255, 255, 255, 0.5)',
            border: "1px solid rgba(132, 137, 166, 0.45)",
        },
        '&:disabled': {
            cursor: 'not-allowed',
            opacity: 0.625,
            '& + $button': {
                cursor: 'not-allowed',
                opacity: 0.625,
            },
        },
        '&::-webkit-input-placeholder': {
            color: theme.palette.black[400],
        },
        '&::-moz-placeholder': {
            color: theme.palette.black[400],
        },
        '&:-ms-input-placeholder': {
            color: theme.palette.black[400],
        },
        '&:-moz-placeholder': {
            color: theme.palette.black[400],
        },
        // Hide the webkit clear (x) button
        '&::-webkit-search-decoration,&::-webkit-search-cancel-button,&::-webkit-search-results-button,&::-webkit-search-results-decoration': {
            display: 'none',
        },
    },
    inputInverse: {
        backgroundColor: 'rgba(230, 231, 237, 0.1)',
        color: theme.palette.common.white,
        '&:focus': {
            backgroundColor: 'rgba(230, 231, 237, 0.1)',
            border: "1px solid rgba(230, 231, 237, 0.55)",
        },
        '&::-webkit-input-placeholder': {
            color: 'rgba(255, 255, 255, 0.8)',
        },
        '&::-moz-placeholder': {
            color: 'rgba(255, 255, 255, 0.8)',
        },
        '&:-ms-input-placeholder': {
            color: 'rgba(255, 255, 255, 0.8)',
        },
        '&:-moz-placeholder': {
            color: 'rgba(255, 255, 255, 0.8)',
        },
    },
    inputHeight0: {
        paddingBottom: theme.spacing(0.5),
        paddingTop: theme.spacing(0.5),
    },
    inputHeight1: {
        paddingBottom: theme.spacing(1),
        paddingTop: theme.spacing(1),
    },
    fullWidth: {
        '& $input': {
            maxWidth: 'none',
            width: '100%',
        },
        '& $button': {
            left: 'auto',
            right: theme.pxToRem(5),
        },
    },
    button: {
        position: 'absolute',
        left: theme.pxToRem(144),
        alignItems: 'center',
        backgroundColor: 'transparent',
        border: 0,
        color: theme.palette.black[500],
        cursor: 'pointer',
        display: 'inline-flex',
        flex: '0 0 auto',
        justifyContent: 'center',
        margin: 0,
        outline: 'none',
        padding: 0,
        transition: 'color 0.25s ease, opacity 0.25s ease',
        userSelect: 'none',
    },
    buttonHeight0: {
        top: theme.pxToRem(0.25),
    },
    buttonHeight1: {
        top: theme.pxToRem(4),
    },
    buttonSvg: {
        width: theme.pxToRem(24),
        height: theme.pxToRem(24),
        // Glass
        '& > circle': {
            fill: 'transparent',
            stroke: theme.palette.black[500],
            strokeWidth: 6,
            strokeLinecap: 'round',
        },
        // Magnifying glass pole part
        '& > path': {
            fill: 'none',
            stroke: theme.palette.black[500],
            strokeDasharray: '10 50',
            strokeDashoffset: 20,
            strokeLinecap: 'round',
            strokeWidth: 7,
            transition: 'stroke-dasharray 200ms, stroke-dashoffset 200ms, stroke 200ms',
            '@media (prefers-reduced-motion: reduce)': {
                transition: 'none',
            },
        },
        // Background circle for glass and X clear
        '& > rect': {
            clipPath: defaultClipPath,
            WebkitClipPath: defaultClipPath,
            fill: 'transparent',
            transition: 'clip-path 100ms 100ms',
            '@media (prefers-reduced-motion: reduce)': {
                transition: 'none',
            },
        },
    },
    buttonSvgInverse: {
        '& > circle': {
            stroke: theme.palette.common.white,
        },
        '& > path': {
            stroke: theme.palette.common.white,
        },
    },
    buttonSvgClear: {
        marginTop: theme.spacing(0.125),
        '& > circle': {
            fill: theme.palette.black[500],
        },
        '& > path': {
            strokeDasharray: '24 50',
            strokeDashoffset: 74,
            stroke: theme.palette.common.white,
        },
        '& > rect': {
            clipPath: clearClipPath,
            WebkitClipPath: clearClipPath,
            fill: theme.palette.common.white,
            transition: 'clip-path 100ms',
            '@media (prefers-reduced-motion: reduce)': {
                transition: 'none',
            },
        },
    },
    buttonSvgClearInverse: {
        '& > circle': {
            fill: theme.palette.common.white,
            stroke: theme.palette.common.white,
        },
        '& > path': {
            stroke: theme.palette.blue[700],
        },
        '& > rect': {
            fill: theme.palette.blue[700],
        },
    },
    helpMessage: {
        marginTop: theme.spacing(1),
        marginLeft: 0,
    },
}); }, { name: SearchFieldStylesKey });
export var SearchField = React.forwardRef(function (_a, ref) {
    var _b, _c, _d;
    var className = _a.className, _e = _a.color, color = _e === void 0 ? 'default' : _e, _f = _a.disableClearOnSearch, disableClearOnSearch = _f === void 0 ? false : _f, fullWidth = _a.fullWidth, _g = _a.height, height = _g === void 0 ? 1 : _g, id = _a.id, name = _a.name, helpMessage = _a.helpMessage, onChange = _a.onChange, onSearch = _a.onSearch, onClear = _a.onClear, value = _a.value, rootProps = __rest(_a, ["className", "color", "disableClearOnSearch", "fullWidth", "height", "id", "name", "helpMessage", "onChange", "onSearch", "onClear", "value"]);
    var classes = useStyles({});
    var uniqueId = React.useState(function () { return id || name || generateUniqueId('searchField-'); })[0];
    var _h = React.useState(false), showClear = _h[0], setShowClear = _h[1];
    var _j = React.useState(''), searchText = _j[0], setSearchText = _j[1];
    var handleFocus = function (e) {
        if (e.target.value.length > 0) {
            setShowClear(true);
        }
    };
    var handleBlur = function () {
        if (searchText.length === 0) {
            setShowClear(false);
        }
    };
    var handleChange = function (e) {
        setSearchText(e.target.value);
        if (showClear && e.target.value.length === 0) {
            setShowClear(false);
        }
        if (!showClear && e.target.value.length > 0) {
            setShowClear(true);
        }
        onChange === null || onChange === void 0 ? void 0 : onChange(e);
    };
    var handleKeyPress = function (e) {
        if (e.key === 'Enter' && !disableClearOnSearch) {
            setShowClear(false);
            onSearch && onSearch(searchText);
            setSearchText('');
        }
        if (e.key === 'Enter' && disableClearOnSearch) {
            onSearch && onSearch(searchText);
        }
    };
    var handleClearButtonClick = function () {
        setSearchText('');
        setShowClear(false);
        onClear === null || onClear === void 0 ? void 0 : onClear();
        var input = document.getElementById(uniqueId);
        var event = new Event('change');
        input.value = '';
        input.dispatchEvent(event);
        onChange === null || onChange === void 0 ? void 0 : onChange(event);
    };
    return (React.createElement("div", { className: clsx(classes.root, fullWidth && classes.fullWidth, className) },
        React.createElement("input", __assign({ "aria-describedby": buildDescribedBy({
                hasHelpMessage: !!helpMessage,
                uniqueId: uniqueId,
            }), className: clsx(classes.input, (_b = {},
                _b[classes.inputInverse] = color === 'inverse',
                _b), (_c = {},
                _c[classes.inputHeight0] = height === 0,
                _c[classes.inputHeight1] = height === 1,
                _c)), id: uniqueId, name: name, ref: ref, type: "search", onChange: handleChange, onKeyPress: handleKeyPress, onFocus: handleFocus, onBlur: handleBlur, value: searchText }, rootProps)),
        React.createElement("button", { "aria-label": showClear ? 'Clear input' : 'Search', className: clsx(classes.button, (_d = {},
                _d[classes.buttonHeight0] = height === 0,
                _d[classes.buttonHeight1] = height === 1,
                _d)), tabIndex: -1, onClick: handleClearButtonClick },
            React.createElement("svg", { className: clsx(classes.buttonSvg, color === 'inverse' && classes.buttonSvgInverse, showClear && classes.buttonSvgClear, color === 'inverse' && showClear && classes.buttonSvgClearInverse), viewBox: "0 0 100 100", role: "img", "aria-hidden": true },
                React.createElement("circle", { r: "24.5", cy: "54.200001", cx: "45.700001" }),
                React.createElement("path", { d: "M 37.240349,46.733243 72.551185,82.414382" }),
                React.createElement("rect", { x: "0", y: "0", width: "100", height: "100" }))),
        helpMessage && (React.createElement(FormHelpMessage, { className: classes.helpMessage, color: color, rootElementId: uniqueId, describedById: helpFor(uniqueId) }, helpMessage))));
});
//# sourceMappingURL=data:application/json;base64,