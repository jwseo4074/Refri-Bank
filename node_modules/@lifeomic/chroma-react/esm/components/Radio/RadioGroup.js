var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { makeStyles } from '../../styles';
import { RadioGroupContext } from './useRadioGroup';
import { screenreaderOnlyStyles } from '../../styles/screenreaderOnly';
export var RadioGroupStylesKey = 'ChromaRadioGroup';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        border: 0,
        display: 'inline-flex',
        flexDirection: 'column',
        height: '100%',
        margin: 0,
        minWidth: 0,
        padding: 0,
        verticalAlign: 'top',
        width: '100%',
    },
    legend: {
        color: theme.palette.black[800],
        fontSize: theme.pxToRem(14),
        fontWeight: theme.typography.fontWeightBold,
        marginBottom: theme.spacing(1.5),
        padding: 0,
        '&:empty': {
            marginBottom: theme.spacing(0),
        },
    },
    legendInverse: {
        color: theme.palette.common.white,
    },
    radios: {
        display: 'flex',
        flexDirection: 'column',
        '& > *:not(:last-child)': {
            marginBottom: theme.spacing(2),
        },
    },
    alignCenter: { alignItems: 'center' },
    alignStart: { alignItems: 'flex-start' },
    justifyStart: { justifyContent: 'flex-start' },
    justifyEvenly: { justifyContent: 'space-evenly' },
    justifyBetween: { justifyContent: 'space-between' },
    justifyCenter: { justifyContent: 'center' },
    directionRow: {
        flexDirection: 'row',
        '& > *:not(:last-child)': {
            margin: theme.spacing(0, 2, 0, 0),
        },
        '& label': {
            whiteSpace: 'nowrap',
        },
    },
    directionColumn: {
        flexDirection: 'column',
    },
    srOnly: __assign({}, screenreaderOnlyStyles),
}); }, { name: RadioGroupStylesKey });
export var RadioGroup = function (_a) {
    var _b, _c, _d, _e;
    var ariaLabel = _a["aria-label"], className = _a.className, _f = _a.align, align = _f === void 0 ? 'flex-start' : _f, _g = _a.color, color = _g === void 0 ? 'default' : _g, children = _a.children, _h = _a.direction, direction = _h === void 0 ? 'column' : _h, _j = _a.justify, justify = _j === void 0 ? 'flex-start' : _j, name = _a.name, onChange = _a.onChange, value = _a.value, title = _a.title, rootProps = __rest(_a, ['aria-label', "className", "align", "color", "children", "direction", "justify", "name", "onChange", "value", "title"]);
    var classes = useStyles({});
    var _k = React.useState(value), contextValue = _k[0], setContextValue = _k[1];
    React.useEffect(function () {
        setContextValue(value);
    }, [value]);
    var handleContextChange = function (e) {
        setContextValue(e.target.value);
        onChange === null || onChange === void 0 ? void 0 : onChange(e);
    };
    if (!title && !ariaLabel && process.env.NODE_ENV === 'development') {
        throw new Error('If a "title" is not provided to RadioGroup, please provide "aria-label".');
    }
    return (React.createElement(RadioGroupContext.Provider, { value: {
            color: color,
            name: name,
            onChange: handleContextChange,
            value: contextValue,
        } },
        React.createElement("fieldset", __assign({ className: clsx(classes.root, className), role: "radiogroup" }, rootProps),
            React.createElement("legend", { className: clsx(classes.legend, (_b = {},
                    _b[classes.legendInverse] = color === 'inverse',
                    _b), !title && ariaLabel && classes.srOnly) }, title || ariaLabel),
            React.createElement("div", { className: clsx(classes.radios, (_c = {},
                    _c[classes.directionRow] = direction === 'row',
                    _c[classes.directionColumn] = direction === 'column',
                    _c), (_d = {},
                    _d[classes.alignCenter] = align === 'center',
                    _d[classes.alignStart] = align === 'flex-start',
                    _d), (_e = {},
                    _e[classes.justifyBetween] = justify === 'space-between',
                    _e[classes.justifyEvenly] = justify === 'space-evenly',
                    _e[classes.justifyStart] = justify === 'flex-start',
                    _e[classes.justifyCenter] = justify === 'center',
                    _e)) }, children))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaW9Hcm91cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1JhZGlvL1JhZGlvR3JvdXAudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUcxQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUV2RSxNQUFNLENBQUMsSUFBTSxtQkFBbUIsR0FBRyxrQkFBa0IsQ0FBQztBQUV0RCxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsVUFBVSxDQUNqQyxVQUFDLEtBQUssSUFBSyxPQUFBLENBQUM7SUFDVixJQUFJLEVBQUU7UUFDSixNQUFNLEVBQUUsQ0FBQztRQUNULE9BQU8sRUFBRSxhQUFhO1FBQ3RCLGFBQWEsRUFBRSxRQUFRO1FBQ3ZCLE1BQU0sRUFBRSxNQUFNO1FBQ2QsTUFBTSxFQUFFLENBQUM7UUFDVCxRQUFRLEVBQUUsQ0FBQztRQUNYLE9BQU8sRUFBRSxDQUFDO1FBQ1YsYUFBYSxFQUFFLEtBQUs7UUFDcEIsS0FBSyxFQUFFLE1BQU07S0FDZDtJQUNELE1BQU0sRUFBRTtRQUNOLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDL0IsUUFBUSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQzNCLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLGNBQWM7UUFDM0MsWUFBWSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQ2hDLE9BQU8sRUFBRSxDQUFDO1FBQ1Ys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QUFZO1NBQ3BCO1FBRUQsMkNBQ0UsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUN4QyxJQUFJLEVBQUMsWUFBWSxJQUNiLFNBQVM7WUFFYixnQ0FDRSxTQUFTLEVBQUUsSUFBSSxDQUNiLE9BQU8sQ0FBQyxNQUFNO29CQUVaLEdBQUMsT0FBTyxDQUFDLGFBQWEsSUFBRyxLQUFLLEtBQUssU0FBUzt5QkFFOUMsQ0FBQyxLQUFLLElBQUksU0FBUyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQ3RDLElBRUEsS0FBSyxJQUFJLFNBQVMsQ0FDWjtZQUNULDZCQUNFLFNBQVMsRUFBRSxJQUFJLENBQ2IsT0FBTyxDQUFDLE1BQU07b0JBRVosR0FBQyxPQUFPLENBQUMsWUFBWSxJQUFHLFNBQVMsS0FBSyxLQUFLO29CQUMzQyxHQUFDLE9BQU8sQ0FBQyxlQUFlLElBQUcsU0FBUyxLQUFLLFFBQVE7O29CQUdqRCxHQUFDLE9BQU8sQ0FBQyxXQUFXLElBQUcsS0FBSyxLQUFLLFFBQVE7b0JBQ3pDLEdBQUMsT0FBTyxDQUFDLFVBQVUsSUFBRyxLQUFLLEtBQUssWUFBWTs7b0JBRzVDLEdBQUMsT0FBTyxDQUFDLGNBQWMsSUFBRyxPQUFPLEtBQUssZUFBZTtvQkFDckQsR0FBQyxPQUFPLENBQUMsYUFBYSxJQUFHLE9BQU8sS0FBSyxjQUFjO29CQUNuRCxHQUFDLE9BQU8sQ0FBQyxZQUFZLElBQUcsT0FBTyxLQUFLLFlBQVk7b0JBQ2hELEdBQUMsT0FBTyxDQUFDLGFBQWEsSUFBRyxPQUFPLEtBQUssUUFBUTt3QkFFaEQsSUFFQSxRQUFRLENBQ0wsQ0FDRyxDQUNnQixDQUM5QixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnLi4vLi4vc3R5bGVzJztcbmltcG9ydCB7IEdldENsYXNzZXMgfSBmcm9tICcuLi8uLi90eXBlVXRpbHMnO1xuaW1wb3J0IHsgUmFkaW9Qcm9wcyB9IGZyb20gJy4vUmFkaW8nO1xuaW1wb3J0IHsgUmFkaW9Hcm91cENvbnRleHQgfSBmcm9tICcuL3VzZVJhZGlvR3JvdXAnO1xuaW1wb3J0IHsgc2NyZWVucmVhZGVyT25seVN0eWxlcyB9IGZyb20gJy4uLy4uL3N0eWxlcy9zY3JlZW5yZWFkZXJPbmx5JztcblxuZXhwb3J0IGNvbnN0IFJhZGlvR3JvdXBTdHlsZXNLZXkgPSAnQ2hyb21hUmFkaW9Hcm91cCc7XG5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAodGhlbWUpID0+ICh7XG4gICAgcm9vdDoge1xuICAgICAgYm9yZGVyOiAwLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICBtaW5XaWR0aDogMCxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAndG9wJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgfSxcbiAgICBsZWdlbmQ6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmJsYWNrWzgwMF0sXG4gICAgICBmb250U2l6ZTogdGhlbWUucHhUb1JlbSgxNCksXG4gICAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRCb2xkLFxuICAgICAgbWFyZ2luQm90dG9tOiB0aGVtZS5zcGFjaW5nKDEuNSksXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgJyY6ZW1wdHknOiB7XG4gICAgICAgIG1hcmdpbkJvdHRvbTogdGhlbWUuc3BhY2luZygwKSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBsZWdlbmRJbnZlcnNlOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgfSxcbiAgICByYWRpb3M6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgJyYgPiAqOm5vdCg6bGFzdC1jaGlsZCknOiB7XG4gICAgICAgIG1hcmdpbkJvdHRvbTogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBhbGlnbkNlbnRlcjogeyBhbGlnbkl0ZW1zOiAnY2VudGVyJyB9LFxuICAgIGFsaWduU3RhcnQ6IHsgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnIH0sXG4gICAganVzdGlmeVN0YXJ0OiB7IGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcgfSxcbiAgICBqdXN0aWZ5RXZlbmx5OiB7IGp1c3RpZnlDb250ZW50OiAnc3BhY2UtZXZlbmx5JyB9LFxuICAgIGp1c3RpZnlCZXR3ZWVuOiB7IGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicgfSxcbiAgICBqdXN0aWZ5Q2VudGVyOiB7IGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyB9LFxuICAgIGRpcmVjdGlvblJvdzoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgICAnJiA+ICo6bm90KDpsYXN0LWNoaWxkKSc6IHtcbiAgICAgICAgbWFyZ2luOiB0aGVtZS5zcGFjaW5nKDAsIDIsIDAsIDApLFxuICAgICAgfSxcbiAgICAgICcmIGxhYmVsJzoge1xuICAgICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBkaXJlY3Rpb25Db2x1bW46IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIH0sXG4gICAgc3JPbmx5OiB7XG4gICAgICAuLi5zY3JlZW5yZWFkZXJPbmx5U3R5bGVzLFxuICAgIH0sXG4gIH0pLFxuICB7IG5hbWU6IFJhZGlvR3JvdXBTdHlsZXNLZXkgfVxuKTtcblxuZXhwb3J0IHR5cGUgUmFkaW9Hcm91cENsYXNzZXMgPSBHZXRDbGFzc2VzPHR5cGVvZiB1c2VTdHlsZXM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFJhZGlvR3JvdXBQcm9wc1xuICBleHRlbmRzIFBpY2s8XG4gICAgUmFkaW9Qcm9wcyxcbiAgICAnYXJpYS1sYWJlbCcgfCAnY29sb3InIHwgJ25hbWUnIHwgJ29uQ2hhbmdlJyB8ICd2YWx1ZSdcbiAgPiB7XG4gIGFsaWduPzogJ2NlbnRlcicgfCAnZmxleC1zdGFydCc7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGRpcmVjdGlvbj86ICdyb3cnIHwgJ2NvbHVtbic7XG4gIGp1c3RpZnk/OiAnY2VudGVyJyB8ICdmbGV4LXN0YXJ0JyB8ICdzcGFjZS1iZXR3ZWVuJyB8ICdzcGFjZS1ldmVubHknO1xuICB0aXRsZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IFJhZGlvR3JvdXA6IFJlYWN0LkZDPFJhZGlvR3JvdXBQcm9wcz4gPSAoe1xuICBbJ2FyaWEtbGFiZWwnXTogYXJpYUxhYmVsLFxuICBjbGFzc05hbWUsXG4gIGFsaWduID0gJ2ZsZXgtc3RhcnQnLFxuICBjb2xvciA9ICdkZWZhdWx0JyxcbiAgY2hpbGRyZW4sXG4gIGRpcmVjdGlvbiA9ICdjb2x1bW4nLFxuICBqdXN0aWZ5ID0gJ2ZsZXgtc3RhcnQnLFxuICBuYW1lLFxuICBvbkNoYW5nZSxcbiAgdmFsdWUsXG4gIHRpdGxlLFxuICAuLi5yb290UHJvcHNcbn0pID0+IHtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcyh7fSk7XG5cbiAgY29uc3QgW2NvbnRleHRWYWx1ZSwgc2V0Q29udGV4dFZhbHVlXSA9IFJlYWN0LnVzZVN0YXRlKHZhbHVlKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldENvbnRleHRWYWx1ZSh2YWx1ZSk7XG4gIH0sIFt2YWx1ZV0pO1xuXG4gIGNvbnN0IGhhbmRsZUNvbnRleHRDaGFuZ2UgPSAoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICBzZXRDb250ZXh0VmFsdWUoZS50YXJnZXQudmFsdWUpO1xuXG4gICAgb25DaGFuZ2U/LihlKTtcbiAgfTtcblxuICBpZiAoIXRpdGxlICYmICFhcmlhTGFiZWwgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnSWYgYSBcInRpdGxlXCIgaXMgbm90IHByb3ZpZGVkIHRvIFJhZGlvR3JvdXAsIHBsZWFzZSBwcm92aWRlIFwiYXJpYS1sYWJlbFwiLidcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8UmFkaW9Hcm91cENvbnRleHQuUHJvdmlkZXJcbiAgICAgIHZhbHVlPXt7XG4gICAgICAgIGNvbG9yLFxuICAgICAgICBuYW1lLFxuICAgICAgICBvbkNoYW5nZTogaGFuZGxlQ29udGV4dENoYW5nZSxcbiAgICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZSxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPGZpZWxkc2V0XG4gICAgICAgIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSl9XG4gICAgICAgIHJvbGU9XCJyYWRpb2dyb3VwXCJcbiAgICAgICAgey4uLnJvb3RQcm9wc31cbiAgICAgID5cbiAgICAgICAgPGxlZ2VuZFxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xzeChcbiAgICAgICAgICAgIGNsYXNzZXMubGVnZW5kLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBbY2xhc3Nlcy5sZWdlbmRJbnZlcnNlXTogY29sb3IgPT09ICdpbnZlcnNlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAhdGl0bGUgJiYgYXJpYUxhYmVsICYmIGNsYXNzZXMuc3JPbmx5XG4gICAgICAgICAgKX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0aXRsZSB8fCBhcmlhTGFiZWx9XG4gICAgICAgIDwvbGVnZW5kPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPXtjbHN4KFxuICAgICAgICAgICAgY2xhc3Nlcy5yYWRpb3MsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFtjbGFzc2VzLmRpcmVjdGlvblJvd106IGRpcmVjdGlvbiA9PT0gJ3JvdycsXG4gICAgICAgICAgICAgIFtjbGFzc2VzLmRpcmVjdGlvbkNvbHVtbl06IGRpcmVjdGlvbiA9PT0gJ2NvbHVtbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBbY2xhc3Nlcy5hbGlnbkNlbnRlcl06IGFsaWduID09PSAnY2VudGVyJyxcbiAgICAgICAgICAgICAgW2NsYXNzZXMuYWxpZ25TdGFydF06IGFsaWduID09PSAnZmxleC1zdGFydCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBbY2xhc3Nlcy5qdXN0aWZ5QmV0d2Vlbl06IGp1c3RpZnkgPT09ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICAgICAgICAgW2NsYXNzZXMuanVzdGlmeUV2ZW5seV06IGp1c3RpZnkgPT09ICdzcGFjZS1ldmVubHknLFxuICAgICAgICAgICAgICBbY2xhc3Nlcy5qdXN0aWZ5U3RhcnRdOiBqdXN0aWZ5ID09PSAnZmxleC1zdGFydCcsXG4gICAgICAgICAgICAgIFtjbGFzc2VzLmp1c3RpZnlDZW50ZXJdOiBqdXN0aWZ5ID09PSAnY2VudGVyJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApfVxuICAgICAgICA+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZmllbGRzZXQ+XG4gICAgPC9SYWRpb0dyb3VwQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG4iXX0=