var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { makeStyles } from '../../styles';
import { buildDescribedBy, FormHelpMessage, helpFor, } from '../_private/forms';
import { generateUniqueId } from '../_private/UniqueId';
import { Text } from '../Text';
import { useRadioGroup } from './useRadioGroup';
export var RadioStylesKey = 'ChromaRadio';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        display: 'flex',
        '& > input[type="radio"]::after': {
            opacity: 0,
            transition: 'transform .3s cubic-bezier(.2, .85, .32, 1.2), opacity .2s',
        },
        '& > input[type="radio"]:checked::after': {
            opacity: 1,
        },
    },
    input: {
        background: 'rgba(132, 137, 166, 0.15)',
        border: '1px solid transparent',
        borderRadius: '50%',
        cursor: 'pointer',
        display: 'inline-block',
        height: theme.pxToRem(21),
        margin: 0,
        MozAppearance: 'none',
        outline: 'none',
        position: 'relative',
        transition: 'background .3s, border-color .3s, box-shadow .2s',
        verticalAlign: 'top',
        WebkitAppearance: 'none',
        width: theme.pxToRem(21),
        '&:after': {
            background: theme.palette.common.white,
            borderRadius: '50%',
            content: '" "',
            display: 'block',
            position: 'absolute',
            top: 0,
            left: 0,
            transform: 'scale(0.5)',
            height: theme.pxToRem(19),
            width: theme.pxToRem(19),
        },
        '&:checked': {
            background: theme.palette.primary.main,
        },
        '&:disabled': {
            cursor: 'not-allowed',
            opacity: 0.625,
            // Ensure the label sibling cannot be clicked as well
            '& + label': {
                cursor: 'not-allowed',
            },
        },
        '&:focus': {
            boxShadow: '0 0 0 2px rgba(0, 150, 225, .3)',
        },
        '&:hover:not(:disabled):not(:checked)': {
            border: "1px solid " + theme.palette.primary[700],
        },
    },
    inputInverse: {
        backgroundColor: 'rgba(230, 231, 237, 0.1)',
        '&:checked': {
            backgroundColor: 'rgba(230, 231, 237, 0.1)',
            border: "1px solid rgba(230, 231, 237, 0.55)",
        },
        '&:focus': {
            boxShadow: '0 0 0 2px rgba(255, 255, 255, .3)',
        },
        '&:hover:not(:disabled):not(:checked)': {
            border: "1px solid " + theme.palette.common.white,
        },
    },
    labelContainer: {
        flex: 1,
        marginLeft: theme.spacing(1),
    },
    label: {
        cursor: 'pointer',
        display: 'inline-block',
        marginBottom: 0,
        marginTop: theme.spacing(0.25),
        verticalAlign: 'top',
        '& p': {
            lineHeight: 1.25,
        },
    },
    labelInverse: {
        color: theme.palette.common.white,
    },
}); }, { name: RadioStylesKey });
export var Radio = React.forwardRef(function (_a, ref) {
    var _b;
    var className = _a.className, children = _a.children, _c = _a.checked, checked = _c === void 0 ? false : _c, color = _a.color, helpMessage = _a.helpMessage, id = _a.id, label = _a.label, value = _a.value, rootProps = __rest(_a, ["className", "children", "checked", "color", "helpMessage", "id", "label", "value"]);
    var classes = useStyles({});
    var uniqueId = React.useState(function () { return id || generateUniqueId('radio-'); })[0];
    var _d = useRadioGroup(), colorFromContext = _d.color, nameFromContext = _d.name, valueFromContext = _d.value, onChangeFromContext = _d.onChange;
    var handleChange = function (e) {
        onChangeFromContext && onChangeFromContext(e);
    };
    return (React.createElement("div", { className: clsx(classes.root, className) },
        React.createElement("input", __assign({ "aria-describedby": buildDescribedBy({
                hasHelpMessage: !!helpMessage,
                uniqueId: uniqueId,
            }), className: clsx(classes.input, (_b = {},
                _b[classes.inputInverse] = color === 'inverse' || colorFromContext === 'inverse',
                _b)), ref: ref, role: "radio", type: "radio", id: uniqueId, tabIndex: 0, name: nameFromContext, value: value, onChange: handleChange, checked: checked || valueFromContext
                ? valueFromContext === value || checked
                : undefined }, rootProps)),
        React.createElement("div", { className: classes.labelContainer },
            React.createElement("label", { className: classes.label, htmlFor: uniqueId },
                React.createElement(Text, { size: "subbody", className: color === 'inverse' || colorFromContext === 'inverse'
                        ? classes.labelInverse
                        : undefined }, label)),
            helpMessage && (React.createElement(FormHelpMessage, { color: color || colorFromContext, rootElementId: uniqueId, describedById: helpFor(uniqueId) }, helpMessage))),
        children));
});
//# sourceMappingURL=data:application/json;base64,