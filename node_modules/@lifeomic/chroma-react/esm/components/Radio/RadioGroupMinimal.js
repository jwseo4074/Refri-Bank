var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { makeStyles } from '../../styles';
import { RadioGroupContext } from './useRadioGroup';
import { screenreaderOnlyStyles } from '../../styles/screenreaderOnly';
export var RadioGroupMinimalStylesKey = 'ChromaRadioGroupMinimal';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        border: 0,
        flexDirection: 'column',
        height: '100%',
        margin: 0,
        minWidth: 0,
        padding: 0,
        verticalAlign: 'top',
    },
    fullWidth: {
        display: 'inline-flex',
    },
    legend: {
        color: theme.palette.black[800],
        fontSize: theme.pxToRem(14),
        fontWeight: theme.typography.fontWeightBold,
        marginBottom: theme.spacing(1.5),
        padding: 0,
        '&:empty': {
            marginBottom: theme.spacing(0),
        },
    },
    legendInverse: {
        color: theme.palette.common.white,
    },
    radios: {
        background: 'rgba(132, 137, 166, 0.15)',
        borderRadius: theme.pxToRem(20),
        border: 'solid 1px transparent',
        display: 'inline-flex',
        flexDirection: 'column',
        margin: 0,
        overflow: 'hidden',
        padding: theme.spacing(0.25),
        '& input': {
            display: 'none',
            '& + div': {
                display: 'flex',
                justifyContent: 'center',
                padding: theme.spacing(0.75, 2),
                userSelect: 'none',
                marginLeft: 0,
                position: 'relative',
                '&::before': {
                    borderRadius: theme.pxToRem(16),
                    content: "''",
                    display: 'block',
                    height: '100%',
                    position: 'absolute',
                    left: 0,
                    top: 0,
                    width: '100%',
                    zIndex: 1,
                },
                '& label > p, & svg': {
                    position: 'relative',
                    transition: 'color 0.15s ease-in',
                    zIndex: 2,
                },
            },
            '&:not(:checked) + div::before': {
                opacity: 0,
                // When specifying transitionProperty here
                // the transition does not work like it works
                // for :checked below?
                transition: '0.15s ease-in',
                transform: 'scale3d(0.3, 0.3, 0.3)',
            },
            '&:checked + div': {
                '&::before': {
                    opacity: 1,
                    transform: 'scale3d(1, 1, 1)',
                    transition: '0.2s cubic-bezier(0.34, 1.56, 0.64, 1)',
                    transitionProperty: 'transform, opacity',
                    background: theme.palette.primary.main,
                },
                '& label > p, & svg': {
                    color: theme.palette.common.white,
                    transition: 'color 0.25s ease-out',
                },
            },
            '&:disabled + div': {
                opacity: 0.625,
                '&, & > label': {
                    cursor: 'not-allowed',
                },
            },
        },
        '& label': {
            marginTop: 0,
            textAlign: 'center',
            '& + p': {
                display: 'none',
            },
        },
    },
    radiosFullWidth: {
        '& > div': {
            flex: 1,
        },
    },
    radiosInverse: {
        backgroundColor: 'rgba(230, 231, 237, 0.1)',
        '& input:checked + div': {
            '&::before': {
                background: 'rgba(255, 255, 255, 0.5)',
            },
            '& label > p, & svg': {
                color: 'unset',
            },
        },
    },
    radiosNoBackground: {
        background: 'none',
    },
    directionRow: {
        flexDirection: 'row',
        '& label': {
            whiteSpace: 'nowrap',
        },
    },
    directionColumn: {
        borderRadius: theme.pxToRem(4),
        flexDirection: 'column',
        '& input:checked + div::before': {
            borderRadius: theme.pxToRem(3),
        },
    },
    srOnly: __assign({}, screenreaderOnlyStyles),
}); }, { name: RadioGroupMinimalStylesKey });
export var RadioGroupMinimal = function (_a) {
    var _b, _c, _d, _e;
    var ariaLabel = _a["aria-label"], _f = _a.background, background = _f === void 0 ? 'true' : _f, className = _a.className, _g = _a.color, color = _g === void 0 ? 'default' : _g, children = _a.children, _h = _a.direction, direction = _h === void 0 ? 'row' : _h, fullWidth = _a.fullWidth, name = _a.name, onChange = _a.onChange, value = _a.value, title = _a.title, rootProps = __rest(_a, ['aria-label', "background", "className", "color", "children", "direction", "fullWidth", "name", "onChange", "value", "title"]);
    var classes = useStyles({});
    var _j = React.useState(value), contextValue = _j[0], setContextValue = _j[1];
    var handleContextChange = function (e) {
        setContextValue(e.target.value);
        onChange && onChange(e);
    };
    if (!title && !ariaLabel && process.env.NODE_ENV === 'development') {
        throw new Error('If a "title" is not provided to RadioGroupMinimal, please provide "aria-label".');
    }
    return (React.createElement(RadioGroupContext.Provider, { value: {
            color: color,
            name: name,
            onChange: handleContextChange,
            value: contextValue,
        } },
        React.createElement("fieldset", __assign({ className: clsx(classes.root, fullWidth && classes.fullWidth, className), role: "radiogroup" }, rootProps),
            React.createElement("legend", { className: clsx(classes.legend, (_b = {},
                    _b[classes.legendInverse] = color === 'inverse',
                    _b), !title && ariaLabel && classes.srOnly) }, title || ariaLabel),
            React.createElement("div", { className: clsx(classes.radios, fullWidth && classes.radiosFullWidth, (_c = {},
                    _c[classes.radiosInverse] = color === 'inverse',
                    _c), (_d = {},
                    _d[classes.radiosNoBackground] = background === false,
                    _d), (_e = {},
                    _e[classes.directionRow] = direction === 'row',
                    _e[classes.directionColumn] = direction === 'column',
                    _e)) }, children))));
};
//# sourceMappingURL=data:application/json;base64,