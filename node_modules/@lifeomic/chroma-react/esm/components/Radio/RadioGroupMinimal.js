var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { makeStyles } from '../../styles';
import { RadioGroupContext } from './useRadioGroup';
import { screenreaderOnlyStyles } from '../../styles/screenreaderOnly';
export var RadioGroupMinimalStylesKey = 'ChromaRadioGroupMinimal';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        border: 0,
        display: 'inline-flex',
        flexDirection: 'column',
        height: '100%',
        margin: 0,
        minWidth: 0,
        padding: 0,
        position: 'relative',
        verticalAlign: 'top',
        width: '100%',
    },
    legend: {
        color: theme.palette.black[800],
        fontSize: theme.pxToRem(14),
        fontWeight: theme.typography.fontWeightBold,
        marginBottom: theme.spacing(1.5),
        padding: 0,
        '&:empty': {
            marginBottom: theme.spacing(0),
        },
    },
    legendInverse: {
        color: theme.palette.common.white,
    },
    radios: {
        background: 'rgba(132, 137, 166, 0.15)',
        borderRadius: theme.pxToRem(20),
        border: 'solid 1px transparent',
        display: 'flex',
        flexDirection: 'column',
        margin: 0,
        overflow: 'hidden',
        padding: theme.spacing(0.25),
        '& input': {
            display: 'none',
            '& + div': {
                display: 'flex',
                justifyContent: 'center',
                padding: theme.spacing(0.75, 2),
                userSelect: 'none',
                marginLeft: 0,
                position: 'relative',
                '&::before': {
                    borderRadius: theme.pxToRem(16),
                    content: "''",
                    display: 'block',
                    height: '100%',
                    position: 'absolute',
                    left: 0,
                    top: 0,
                    width: '100%',
                    zIndex: 1,
                },
                '& label > p': {
                    position: 'relative',
                    transition: 'color 0.15s ease-in',
                    zIndex: 2,
                },
            },
            '&:not(:checked) + div::before': {
                opacity: 0,
                // When specifying transitionProperty here
                // the transition does not work like it works
                // for :checked below?
                transition: '0.15s ease-in',
                transform: 'scale3d(0.3, 0.3, 0.3)',
            },
            '&:checked + div': {
                '&::before': {
                    opacity: 1,
                    transform: 'scale3d(1, 1, 1)',
                    transition: '0.2s cubic-bezier(0.34, 1.56, 0.64, 1)',
                    transitionProperty: 'transform, opacity',
                    background: theme.palette.primary.main,
                },
                '& label > p': {
                    color: theme.palette.common.white,
                    transition: 'color 0.25s ease-out',
                },
            },
            '&:disabled + div': {
                opacity: 0.625,
                '&, & > label': {
                    cursor: 'not-allowed',
                },
            },
        },
        '& label': {
            marginTop: 0,
            textAlign: 'center',
            '& + p': {
                display: 'none',
            },
        },
    },
    radiosInverse: {
        backgroundColor: 'rgba(230, 231, 237, 0.1)',
        '& input:checked + div': {
            '&::before': {
                background: 'rgba(255, 255, 255, 0.5)',
            },
            '& label > p': {
                color: 'unset',
            },
        },
    },
    radiosNoBackground: {
        background: 'none',
    },
    directionRow: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        '& label': {
            whiteSpace: 'nowrap',
        },
    },
    directionColumn: {
        borderRadius: theme.pxToRem(4),
        flexDirection: 'column',
        '& input:checked + div::before': {
            borderRadius: theme.pxToRem(3),
        },
    },
    srOnly: __assign({}, screenreaderOnlyStyles),
}); }, { name: RadioGroupMinimalStylesKey });
export var RadioGroupMinimal = function (_a) {
    var _b, _c, _d, _e;
    var ariaLabel = _a["aria-label"], _f = _a.background, background = _f === void 0 ? 'true' : _f, className = _a.className, _g = _a.color, color = _g === void 0 ? 'default' : _g, children = _a.children, _h = _a.direction, direction = _h === void 0 ? 'row' : _h, name = _a.name, onChange = _a.onChange, value = _a.value, title = _a.title, rootProps = __rest(_a, ['aria-label', "background", "className", "color", "children", "direction", "name", "onChange", "value", "title"]);
    var classes = useStyles({});
    var _j = React.useState(value), contextValue = _j[0], setContextValue = _j[1];
    var handleContextChange = function (e) {
        setContextValue(e.target.value);
        onChange && onChange(e);
    };
    if (!title && !ariaLabel && process.env.NODE_ENV === 'development') {
        throw new Error('If a "title" is not provided to RadioGroupMinimal, please provide "aria-label".');
    }
    return (React.createElement(RadioGroupContext.Provider, { value: {
            color: color,
            name: name,
            onChange: handleContextChange,
            value: contextValue,
        } },
        React.createElement("fieldset", __assign({ className: clsx(classes.root, className), role: "radiogroup" }, rootProps),
            React.createElement("legend", { className: clsx(classes.legend, (_b = {},
                    _b[classes.legendInverse] = color === 'inverse',
                    _b), !title && ariaLabel && classes.srOnly) }, title || ariaLabel),
            React.createElement("div", { className: clsx(classes.radios, (_c = {},
                    _c[classes.radiosInverse] = color === 'inverse',
                    _c), (_d = {},
                    _d[classes.radiosNoBackground] = background === false,
                    _d), (_e = {},
                    _e[classes.directionRow] = direction === 'row',
                    _e[classes.directionColumn] = direction === 'column',
                    _e)) }, children))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaW9Hcm91cE1pbmltYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9SYWRpby9SYWRpb0dyb3VwTWluaW1hbC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRzFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRXZFLE1BQU0sQ0FBQyxJQUFNLDBCQUEwQixHQUFHLHlCQUF5QixDQUFDO0FBRXBFLE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQ2pDLFVBQUMsS0FBSyxJQUFLLE9BQUEsQ0FBQztJQUNWLElBQUksRUFBRTtRQUNKLE1BQU0sRUFBRSxDQUFDO1FBQ1QsT0FBTyxFQUFFLGFBQWE7UUFDdEIsYUFBYSxFQUFFLFFBQVE7UUFDdkIsTUFBTSxFQUFFLE1BQU07UUFDZCxNQUFNLEVBQUUsQ0FBQztRQUNULFFBQVEsRUFBRSxDQUFDO1FBQ1gsT0FBTyxFQUFFLENBQUM7UUFDVixRQUFRLEVBQUUsVUFBVTtRQUNwQixhQUFhLEVBQUUsS0FBSztRQUNwQixLQUFLLEVBQUUsTUFBTTtLQUNkO0lBQ0QsTUFBTSxFQUFFO1FBQ04sS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUMvQixRQUFRLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDM0IsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsY0FBYztRQUMzQyxZQUFZLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxH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QUNIO0lBRUQsT0FBTyxDQUNMLG9CQUFDLGlCQUFpQixDQUFDLFFBQVEsSUFDekIsS0FBSyxFQUFFO1lBQ0wsS0FBSyxPQUFBO1lBQ0wsSUFBSSxNQUFBO1lBQ0osUUFBUSxFQUFFLG1CQUFtQjtZQUM3QixLQUFLLEVBQUUsWUFBWTtTQUNwQjtRQUVELDJDQUNFLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsRUFDeEMsSUFBSSxFQUFDLFlBQVksSUFDYixTQUFTO1lBRWIsZ0NBQ0UsU0FBUyxFQUFFLElBQUksQ0FDYixPQUFPLENBQUMsTUFBTTtvQkFFWixHQUFDLE9BQU8sQ0FBQyxhQUFhLElBQUcsS0FBSyxLQUFLLFNBQVM7eUJBRTlDLENBQUMsS0FBSyxJQUFJLFNBQVMsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUN0QyxJQUVBLEtBQUssSUFBSSxTQUFTLENBQ1o7WUFDVCw2QkFDRSxTQUFTLEVBQUUsSUFBSSxDQUNiLE9BQU8sQ0FBQyxNQUFNO29CQUVaLEdBQUMsT0FBTyxDQUFDLGFBQWEsSUFBRyxLQUFLLEtBQUssU0FBUzs7b0JBRzVDLEdBQUMsT0FBTyxDQUFDLGtCQUFrQixJQUFHLFVBQVUsS0FBSyxLQUFLOztvQkFHbEQsR0FBQyxPQUFPLENBQUMsWUFBWSxJQUFHLFNBQVMsS0FBSyxLQUFLO29CQUMzQyxHQUFDLE9BQU8sQ0FBQyxlQUFlLElBQUcsU0FBUyxLQUFLLFFBQVE7d0JBRXBELElBRUEsUUFBUSxDQUNMLENBQ0csQ0FDZ0IsQ0FDOUIsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJy4uLy4uL3N0eWxlcyc7XG5pbXBvcnQgeyBHZXRDbGFzc2VzIH0gZnJvbSAnLi4vLi4vdHlwZVV0aWxzJztcbmltcG9ydCB7IFJhZGlvUHJvcHMgfSBmcm9tICcuL1JhZGlvJztcbmltcG9ydCB7IFJhZGlvR3JvdXBDb250ZXh0IH0gZnJvbSAnLi91c2VSYWRpb0dyb3VwJztcbmltcG9ydCB7IHNjcmVlbnJlYWRlck9ubHlTdHlsZXMgfSBmcm9tICcuLi8uLi9zdHlsZXMvc2NyZWVucmVhZGVyT25seSc7XG5cbmV4cG9ydCBjb25zdCBSYWRpb0dyb3VwTWluaW1hbFN0eWxlc0tleSA9ICdDaHJvbWFSYWRpb0dyb3VwTWluaW1hbCc7XG5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAodGhlbWUpID0+ICh7XG4gICAgcm9vdDoge1xuICAgICAgYm9yZGVyOiAwLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICBtaW5XaWR0aDogMCxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICB9LFxuICAgIGxlZ2VuZDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYmxhY2tbODAwXSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS5weFRvUmVtKDE0KSxcbiAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodEJvbGQsXG4gICAgICBtYXJnaW5Cb3R0b206IHRoZW1lLnNwYWNpbmcoMS41KSxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAnJjplbXB0eSc6IHtcbiAgICAgICAgbWFyZ2luQm90dG9tOiB0aGVtZS5zcGFjaW5nKDApLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGxlZ2VuZEludmVyc2U6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcbiAgICB9LFxuICAgIHJhZGlvczoge1xuICAgICAgYmFja2dyb3VuZDogJ3JnYmEoMTMyLCAxMzcsIDE2NiwgMC4xNSknLFxuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5weFRvUmVtKDIwKSxcbiAgICAgIGJvcmRlcjogJ3NvbGlkIDFweCB0cmFuc3BhcmVudCcsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHBhZGRpbmc6IHRoZW1lLnNwYWNpbmcoMC4yNSksXG4gICAgICAnJiBpbnB1dCc6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnLFxuICAgICAgICAnJiArIGRpdic6IHtcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICAgIHBhZGRpbmc6IHRoZW1lLnNwYWNpbmcoMC43NSwgMiksXG4gICAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgICAgIG1hcmdpbkxlZnQ6IDAsXG4gICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgJyY6OmJlZm9yZSc6IHtcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogdGhlbWUucHhUb1JlbSgxNiksXG4gICAgICAgICAgICBjb250ZW50OiBgJydgLFxuICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIHpJbmRleDogMSxcbiAgICAgICAgICB9LFxuICAgICAgICAgICcmIGxhYmVsID4gcCc6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgdHJhbnNpdGlvbjogJ2NvbG9yIDAuMTVzIGVhc2UtaW4nLFxuICAgICAgICAgICAgekluZGV4OiAyLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgICcmOm5vdCg6Y2hlY2tlZCkgKyBkaXY6OmJlZm9yZSc6IHtcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgIC8vIFdoZW4gc3BlY2lmeWluZyB0cmFuc2l0aW9uUHJvcGVydHkgaGVyZVxuICAgICAgICAgIC8vIHRoZSB0cmFuc2l0aW9uIGRvZXMgbm90IHdvcmsgbGlrZSBpdCB3b3Jrc1xuICAgICAgICAgIC8vIGZvciA6Y2hlY2tlZCBiZWxvdz9cbiAgICAgICAgICB0cmFuc2l0aW9uOiAnMC4xNXMgZWFzZS1pbicsXG4gICAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUzZCgwLjMsIDAuMywgMC4zKScsXG4gICAgICAgIH0sXG4gICAgICAgICcmOmNoZWNrZWQgKyBkaXYnOiB7XG4gICAgICAgICAgJyY6OmJlZm9yZSc6IHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZTNkKDEsIDEsIDEpJyxcbiAgICAgICAgICAgIHRyYW5zaXRpb246ICcwLjJzIGN1YmljLWJlemllcigwLjM0LCAxLjU2LCAwLjY0LCAxKScsXG4gICAgICAgICAgICB0cmFuc2l0aW9uUHJvcGVydHk6ICd0cmFuc2Zvcm0sIG9wYWNpdHknLFxuICAgICAgICAgICAgYmFja2dyb3VuZDogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICAgICAgfSxcbiAgICAgICAgICAnJiBsYWJlbCA+IHAnOiB7XG4gICAgICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAnY29sb3IgMC4yNXMgZWFzZS1vdXQnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgICcmOmRpc2FibGVkICsgZGl2Jzoge1xuICAgICAgICAgIG9wYWNpdHk6IDAuNjI1LFxuICAgICAgICAgICcmLCAmID4gbGFiZWwnOiB7XG4gICAgICAgICAgICBjdXJzb3I6ICdub3QtYWxsb3dlZCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICAnJiBsYWJlbCc6IHtcbiAgICAgICAgbWFyZ2luVG9wOiAwLFxuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAnJiArIHAnOiB7XG4gICAgICAgICAgZGlzcGxheTogJ25vbmUnLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICAgIHJhZGlvc0ludmVyc2U6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMjMwLCAyMzEsIDIzNywgMC4xKScsXG4gICAgICAnJiBpbnB1dDpjaGVja2VkICsgZGl2Jzoge1xuICAgICAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgICAgIGJhY2tncm91bmQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgICAgICB9LFxuICAgICAgICAnJiBsYWJlbCA+IHAnOiB7XG4gICAgICAgICAgY29sb3I6ICd1bnNldCcsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gICAgcmFkaW9zTm9CYWNrZ3JvdW5kOiB7XG4gICAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgfSxcbiAgICBkaXJlY3Rpb25Sb3c6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgICcmIGxhYmVsJzoge1xuICAgICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBkaXJlY3Rpb25Db2x1bW46IHtcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUucHhUb1JlbSg0KSxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgJyYgaW5wdXQ6Y2hlY2tlZCArIGRpdjo6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnB4VG9SZW0oMyksXG4gICAgICB9LFxuICAgIH0sXG4gICAgc3JPbmx5OiB7XG4gICAgICAuLi5zY3JlZW5yZWFkZXJPbmx5U3R5bGVzLFxuICAgIH0sXG4gIH0pLFxuICB7IG5hbWU6IFJhZGlvR3JvdXBNaW5pbWFsU3R5bGVzS2V5IH1cbik7XG5cbmV4cG9ydCB0eXBlIFJhZGlvR3JvdXBNaW5pbWFsQ2xhc3NlcyA9IEdldENsYXNzZXM8dHlwZW9mIHVzZVN0eWxlcz47XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmFkaW9Hcm91cE1pbmltYWxQcm9wc1xuICBleHRlbmRzIFBpY2s8XG4gICAgUmFkaW9Qcm9wcyxcbiAgICAnYXJpYS1sYWJlbCcgfCAnY29sb3InIHwgJ25hbWUnIHwgJ29uQ2hhbmdlJyB8ICd2YWx1ZSdcbiAgPiB7XG4gIGJhY2tncm91bmQ/OiBib29sZWFuO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGRpcmVjdGlvbj86ICdyb3cnIHwgJ2NvbHVtbic7XG4gIHRpdGxlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgUmFkaW9Hcm91cE1pbmltYWw6IFJlYWN0LkZDPFJhZGlvR3JvdXBNaW5pbWFsUHJvcHM+ID0gKHtcbiAgWydhcmlhLWxhYmVsJ106IGFyaWFMYWJlbCxcbiAgYmFja2dyb3VuZCA9ICd0cnVlJyxcbiAgY2xhc3NOYW1lLFxuICBjb2xvciA9ICdkZWZhdWx0JyxcbiAgY2hpbGRyZW4sXG4gIGRpcmVjdGlvbiA9ICdyb3cnLFxuICBuYW1lLFxuICBvbkNoYW5nZSxcbiAgdmFsdWUsXG4gIHRpdGxlLFxuICAuLi5yb290UHJvcHNcbn0pID0+IHtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcyh7fSk7XG5cbiAgY29uc3QgW2NvbnRleHRWYWx1ZSwgc2V0Q29udGV4dFZhbHVlXSA9IFJlYWN0LnVzZVN0YXRlKHZhbHVlKTtcblxuICBjb25zdCBoYW5kbGVDb250ZXh0Q2hhbmdlID0gKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgc2V0Q29udGV4dFZhbHVlKGUudGFyZ2V0LnZhbHVlKTtcblxuICAgIG9uQ2hhbmdlICYmIG9uQ2hhbmdlKGUpO1xuICB9O1xuXG4gIGlmICghdGl0bGUgJiYgIWFyaWFMYWJlbCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdJZiBhIFwidGl0bGVcIiBpcyBub3QgcHJvdmlkZWQgdG8gUmFkaW9Hcm91cE1pbmltYWwsIHBsZWFzZSBwcm92aWRlIFwiYXJpYS1sYWJlbFwiLidcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8UmFkaW9Hcm91cENvbnRleHQuUHJvdmlkZXJcbiAgICAgIHZhbHVlPXt7XG4gICAgICAgIGNvbG9yLFxuICAgICAgICBuYW1lLFxuICAgICAgICBvbkNoYW5nZTogaGFuZGxlQ29udGV4dENoYW5nZSxcbiAgICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZSxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPGZpZWxkc2V0XG4gICAgICAgIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSl9XG4gICAgICAgIHJvbGU9XCJyYWRpb2dyb3VwXCJcbiAgICAgICAgey4uLnJvb3RQcm9wc31cbiAgICAgID5cbiAgICAgICAgPGxlZ2VuZFxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xzeChcbiAgICAgICAgICAgIGNsYXNzZXMubGVnZW5kLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBbY2xhc3Nlcy5sZWdlbmRJbnZlcnNlXTogY29sb3IgPT09ICdpbnZlcnNlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAhdGl0bGUgJiYgYXJpYUxhYmVsICYmIGNsYXNzZXMuc3JPbmx5XG4gICAgICAgICAgKX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0aXRsZSB8fCBhcmlhTGFiZWx9XG4gICAgICAgIDwvbGVnZW5kPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPXtjbHN4KFxuICAgICAgICAgICAgY2xhc3Nlcy5yYWRpb3MsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFtjbGFzc2VzLnJhZGlvc0ludmVyc2VdOiBjb2xvciA9PT0gJ2ludmVyc2UnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgW2NsYXNzZXMucmFkaW9zTm9CYWNrZ3JvdW5kXTogYmFja2dyb3VuZCA9PT0gZmFsc2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBbY2xhc3Nlcy5kaXJlY3Rpb25Sb3ddOiBkaXJlY3Rpb24gPT09ICdyb3cnLFxuICAgICAgICAgICAgICBbY2xhc3Nlcy5kaXJlY3Rpb25Db2x1bW5dOiBkaXJlY3Rpb24gPT09ICdjb2x1bW4nLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICl9XG4gICAgICAgID5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9maWVsZHNldD5cbiAgICA8L1JhZGlvR3JvdXBDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcbiJdfQ==