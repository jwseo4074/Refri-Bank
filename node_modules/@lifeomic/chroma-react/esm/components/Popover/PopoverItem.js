var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { makeStyles } from '../../styles';
import { Text } from '../Text';
export var PopoverItemStylesKey = 'ChromaPopoverItem';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        display: 'flex',
        alignItems: 'center',
        padding: theme.spacing(1.25, 2.5),
        transition: 'background 0.25s ease, opacity 0.25s ease',
        '&:focus': {
            outline: 'none',
        },
    },
    hoverPointer: {
        '&:hover, &:focus': {
            backgroundColor: 'rgba(222,244,252, 0.6)',
            cursor: 'pointer',
        },
    },
    icon: {
        marginRight: theme.spacing(2),
    },
    text: {
        letterSpacing: 0.25,
    },
    clipText: {
        overflow: 'hidden',
        textOverflow: 'ellipsis',
    },
    textNoWrap: {
        whiteSpace: 'nowrap',
    },
    justifyStart: {
        justifyContent: 'flex-start',
    },
    justifyBetween: {
        justifyContent: 'space-between',
    },
    justifyCenter: {
        justifyContent: 'center',
    },
    justifyEnd: {
        justifyContent: 'flex-end',
    },
    directionRow: {
        flexDirection: 'row',
    },
    directionRowReverse: {
        flexDirection: 'row-reverse',
    },
}); }, { name: PopoverItemStylesKey });
export var PopoverItem = React.forwardRef(function (_a, ref) {
    var _b, _c;
    var className = _a.className, clipText = _a.clipText, children = _a.children, _d = _a.direction, direction = _d === void 0 ? 'row' : _d, Icon = _a.icon, _e = _a.justify, justify = _e === void 0 ? 'flex-start' : _e, _f = _a.noTextWrap, noTextWrap = _f === void 0 ? false : _f, onClick = _a.onClick, text = _a.text, additionalClasses = _a.classes, rootProps = __rest(_a, ["className", "clipText", "children", "direction", "icon", "justify", "noTextWrap", "onClick", "text", "classes"]);
    var classes = useStyles({ classes: additionalClasses });
    return (React.createElement("li", __assign({ ref: ref, className: clsx(classes.root, onClick && classes.hoverPointer, (_b = {},
            _b[classes.justifyCenter] = justify === 'center',
            _b[classes.justifyBetween] = justify === 'space-between',
            _b[classes.justifyStart] = justify === 'flex-start',
            _b[classes.justifyEnd] = justify === 'flex-end',
            _b), (_c = {},
            _c[classes.directionRow] = direction === 'row',
            _c[classes.directionRowReverse] = direction === 'row-reverse',
            _c), className), role: "button", onClick: onClick, tabIndex: 0 }, rootProps),
        !!Icon && (React.createElement(Icon, { role: "img", "aria-hidden": true, className: classes.icon, width: 18, height: 18 })),
        !!text && (React.createElement(Text, { className: clsx(classes.text, noTextWrap && classes.textNoWrap, clipText && classes.clipText) }, text)),
        children));
});
//# sourceMappingURL=data:application/json;base64,