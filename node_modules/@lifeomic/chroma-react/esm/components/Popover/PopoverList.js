var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { makeStyles } from '../../styles';
export var PopoverListStylesKey = 'ChromaPopoverList';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        listStyle: 'none',
        padding: 0,
        margin: 0,
        paddingTop: theme.spacing(2),
        paddingBottom: theme.spacing(2),
        maxHeight: theme.pxToRem(432),
        overflowY: 'auto',
        '&:focus': {
            outline: 'none',
        },
    },
}); }, { name: PopoverListStylesKey });
export var PopoverList = React.forwardRef(function (_a, ref) {
    var children = _a.children, rootProps = __rest(_a, ["children"]);
    var classes = useStyles({});
    return (React.createElement("ul", __assign({ ref: ref, className: classes.root, tabIndex: 0 }, rootProps), children));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9wb3Zlckxpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Qb3BvdmVyL1BvcG92ZXJMaXN0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUcxQyxNQUFNLENBQUMsSUFBTSxvQkFBb0IsR0FBRyxtQkFBbUIsQ0FBQztBQUV4RCxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsVUFBVSxDQUNqQyxVQUFDLEtBQUssSUFBSyxPQUFBLENBQUM7SUFDVixJQUFJLEVBQUU7UUFDSixTQUFTLEVBQUUsTUFBTTtRQUNqQixPQUFPLEVBQUUsQ0FBQztRQUNWLE1BQU0sRUFBRSxDQUFDO1FBQ1QsVUFBVSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzVCLGFBQWEsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMvQixTQUFTLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDN0IsU0FBUyxFQUFFLE1BQU07UUFDakIsU0FBUyxFQUFFO1lBQ1QsT0FBTyxFQUFFLE1BQU07U0FDaEI7S0FDRjtDQUNGLENBQUMsRUFiUyxDQWFULEVBQ0YsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsQ0FDL0IsQ0FBQztBQVVGLE1BQU0sQ0FBQyxJQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUN6QyxVQUFDLEVBQTBCLEVBQUUsR0FBRztJQUE3QixJQUFBLHNCQUFRLEVBQUUsb0NBQVk7SUFDdkIsSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTlCLE9BQU8sQ0FDTCxxQ0FBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLElBQU0sU0FBUyxHQUM5RCxRQUFRLENBQ04sQ0FDTixDQUFDO0FBQ0osQ0FBQyxDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnLi4vLi4vc3R5bGVzJztcbmltcG9ydCB7IEdldENsYXNzZXMgfSBmcm9tICcuLi8uLi90eXBlVXRpbHMnO1xuXG5leHBvcnQgY29uc3QgUG9wb3Zlckxpc3RTdHlsZXNLZXkgPSAnQ2hyb21hUG9wb3Zlckxpc3QnO1xuXG5leHBvcnQgY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhcbiAgKHRoZW1lKSA9PiAoe1xuICAgIHJvb3Q6IHtcbiAgICAgIGxpc3RTdHlsZTogJ25vbmUnLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIHBhZGRpbmdUb3A6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICBwYWRkaW5nQm90dG9tOiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgbWF4SGVpZ2h0OiB0aGVtZS5weFRvUmVtKDQzMiksXG4gICAgICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pLFxuICB7IG5hbWU6IFBvcG92ZXJMaXN0U3R5bGVzS2V5IH1cbik7XG5cbmV4cG9ydCB0eXBlIFBvcG92ZXJMaXN0Q2xhc3NlcyA9IEdldENsYXNzZXM8dHlwZW9mIHVzZVN0eWxlcz47XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9wb3Zlckxpc3RQcm9wc1xuICBleHRlbmRzIFJlYWN0LkRldGFpbGVkSFRNTFByb3BzPFxuICAgIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxVTGlzdEVsZW1lbnQ+LFxuICAgIEhUTUxVTGlzdEVsZW1lbnRcbiAgPiB7fVxuXG5leHBvcnQgY29uc3QgUG9wb3Zlckxpc3QgPSBSZWFjdC5mb3J3YXJkUmVmPEhUTUxVTGlzdEVsZW1lbnQsIFBvcG92ZXJMaXN0UHJvcHM+KFxuICAoeyBjaGlsZHJlbiwgLi4ucm9vdFByb3BzIH0sIHJlZikgPT4ge1xuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoe30pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDx1bCByZWY9e3JlZn0gY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9IHRhYkluZGV4PXswfSB7Li4ucm9vdFByb3BzfT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC91bD5cbiAgICApO1xuICB9XG4pO1xuIl19