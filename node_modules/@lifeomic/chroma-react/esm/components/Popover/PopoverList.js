var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { makeStyles } from '../../styles';
export var PopoverListStylesKey = 'ChromaPopoverList';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        listStyle: 'none',
        padding: 0,
        margin: 0,
        paddingTop: theme.spacing(2),
        paddingBottom: theme.spacing(2),
        maxHeight: theme.pxToRem(432),
        overflowY: 'auto',
        '&:focus': {
            outline: 'none',
        },
    },
}); }, { name: PopoverListStylesKey });
export var PopoverList = React.forwardRef(function (_a, ref) {
    var children = _a.children, rootProps = __rest(_a, ["children"]);
    var classes = useStyles({});
    return (React.createElement("ul", __assign({ ref: ref, className: classes.root, tabIndex: 0 }, rootProps), children));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9wb3Zlckxpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Qb3BvdmVyL1BvcG92ZXJMaXN0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUcxQyxNQUFNLENBQUMsSUFBTSxvQkFBb0IsR0FBRyxtQkFBbUIsQ0FBQztBQUV4RCxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsVUFBVSxDQUNqQyxVQUFDLEtBQUssSUFBSyxPQUFBLENBQUM7SUFDVixJQUFJLEVBQUU7UUFDSixTQUFTLEVBQUUsTUFBTTtRQUNqQixPQUFPLEVBQUUsQ0FBQztRQUNWLE1BQU0sRUFBRSxDQUFDO1FBQ1QsVUFBVSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzVCLGFBQWEsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMvQixTQUFTLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDN0IsU0FBUyxFQUFFLE1BQU07UUFDakIsU0FBUyxFQUFFO1lBQ1QsT0FBTyxFQUFFLE1BQU07U0FDaEI7S0FDRjtDQUNGLENBQUMsRUFiUyxDQWFULEVBQ0YsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsQ0FDL0IsQ0FBQztBQVlGLE1BQU0sQ0FBQyxJQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUN6QyxVQUFDLEVBQTBCLEVBQUUsR0FBRztJQUE3QixJQUFBLFFBQVEsY0FBQSxFQUFLLFNBQVMsY0FBeEIsWUFBMEIsQ0FBRjtJQUN2QixJQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFOUIsT0FBTyxDQUNMLHFDQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsSUFBTSxTQUFTLEdBQzlELFFBQVEsQ0FDTixDQUNOLENBQUM7QUFDSixDQUFDLENBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICcuLi8uLi9zdHlsZXMnO1xuaW1wb3J0IHsgR2V0Q2xhc3NlcyB9IGZyb20gJy4uLy4uL3R5cGVVdGlscyc7XG5cbmV4cG9ydCBjb25zdCBQb3BvdmVyTGlzdFN0eWxlc0tleSA9ICdDaHJvbWFQb3BvdmVyTGlzdCc7XG5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAodGhlbWUpID0+ICh7XG4gICAgcm9vdDoge1xuICAgICAgbGlzdFN0eWxlOiAnbm9uZScsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgbWFyZ2luOiAwLFxuICAgICAgcGFkZGluZ1RvcDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIHBhZGRpbmdCb3R0b206IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICBtYXhIZWlnaHQ6IHRoZW1lLnB4VG9SZW0oNDMyKSxcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgJyY6Zm9jdXMnOiB7XG4gICAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSksXG4gIHsgbmFtZTogUG9wb3Zlckxpc3RTdHlsZXNLZXkgfVxuKTtcblxuZXhwb3J0IHR5cGUgUG9wb3Zlckxpc3RDbGFzc2VzID0gR2V0Q2xhc3Nlczx0eXBlb2YgdXNlU3R5bGVzPjtcblxuZXhwb3J0IGludGVyZmFjZSBQb3BvdmVyTGlzdFByb3BzXG4gIGV4dGVuZHMgUmVhY3QuRGV0YWlsZWRIVE1MUHJvcHM8XG4gICAgUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTFVMaXN0RWxlbWVudD4sXG4gICAgSFRNTFVMaXN0RWxlbWVudFxuICA+IHtcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG59XG5cbmV4cG9ydCBjb25zdCBQb3BvdmVyTGlzdCA9IFJlYWN0LmZvcndhcmRSZWY8SFRNTFVMaXN0RWxlbWVudCwgUG9wb3Zlckxpc3RQcm9wcz4oXG4gICh7IGNoaWxkcmVuLCAuLi5yb290UHJvcHMgfSwgcmVmKSA9PiB7XG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcyh7fSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPHVsIHJlZj17cmVmfSBjbGFzc05hbWU9e2NsYXNzZXMucm9vdH0gdGFiSW5kZXg9ezB9IHsuLi5yb290UHJvcHN9PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L3VsPlxuICAgICk7XG4gIH1cbik7XG4iXX0=