var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { makeStyles } from '../../styles';
export var SecondaryNavigationStylesKey = 'ChromaSecondaryNavigation';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        borderRight: "1px solid " + theme.palette.divider,
        display: 'flex',
        flex: 1,
        flexDirection: 'column',
        height: '100%',
    },
    horizontalNav: {
        position: 'relative',
        borderRight: 0,
        '& > ul': {
            display: 'flex',
            borderBottom: "1px solid",
            borderBottomColor: theme.palette.divider,
            '& > li': {
                padding: theme.spacing(1, 3),
                fontSize: theme.typography.button.fontSize,
                letterSpacing: 0.5,
                whiteSpace: 'nowrap',
                '& > div': {
                    height: theme.pxToRem(2),
                    width: '100%',
                    top: 'auto',
                    bottom: 0,
                    left: 0,
                },
            },
        },
    },
    list: {
        listStyle: 'none',
        margin: 0,
        overflowY: 'auto',
        padding: 0,
    },
}); }, { name: SecondaryNavigationStylesKey });
export var SecondaryNavigation = React.forwardRef(function (_a, ref) {
    var children = _a.children, _b = _a.variant, variant = _b === void 0 ? 'vertical' : _b, className = _a.className, additionalClasses = _a.classes, rootProps = __rest(_a, ["children", "variant", "className", "classes"]);
    var classes = useStyles({ classes: additionalClasses });
    return (React.createElement("nav", __assign({ ref: ref, className: clsx(classes.root, className, variant === 'horizontal' && classes.horizontalNav), "aria-label": "Secondary", role: "navigation" }, rootProps),
        React.createElement("ul", { className: classes.list }, children)));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Vjb25kYXJ5TmF2aWdhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1NlY29uZGFyeU5hdmlnYXRpb24vU2Vjb25kYXJ5TmF2aWdhdGlvbi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRzFDLE1BQU0sQ0FBQyxJQUFNLDRCQUE0QixHQUFHLDJCQUEyQixDQUFDO0FBRXhFLE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQ2pDLFVBQUMsS0FBSyxJQUFLLE9BQUEsQ0FBQztJQUNWLElBQUksRUFBRTtRQUNKLFdBQVcsRUFBRSxlQUFhLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBUztRQUNqRCxPQUFPLEVBQUUsTUFBTTtRQUNmLElBQUksRUFBRSxDQUFDO1FBQ1AsYUFBYSxFQUFFLFFBQVE7UUFDdkIsTUFBTSxFQUFFLE1BQU07S0FDZjtJQUNELGFBQWEsRUFBRTtRQUNiLFFBQVEsRUFBRSxVQUFVO1FBQ3BCLFdBQVcsRUFBRSxDQUFDO1FBRWQsUUFBUSxFQUFFO1lBQ1IsT0FBTyxFQUFFLE1BQU07WUFDZixZQUFZLEVBQUUsV0FBVztZQUN6QixpQkFBaUIsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU87WUFFeEMsUUFBUSxFQUFFO2dCQUNSLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQzVCLFFBQVEsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRO2dCQUMxQyxhQUFhLEVBQUUsR0FBRztnQkFDbEIsVUFBVSxFQUFFLFFBQVE7Z0JBRXBCLFNBQVMsRUFBRTtvQkFDVCxNQUFNLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7b0JBQ3hCLEtBQUssRUFBRSxNQUFNO29CQUNiLEdBQUcsRUFBRSxNQUFNO29CQUNYLE1BQU0sRUFBRSxDQUFDO29CQUNULElBQUksRUFBRSxDQUFDO2lCQUNSO2FBQ0Y7U0FDRjtLQUNGO0lBQ0QsSUFBSSxFQUFFO1FBQ0osU0FBUyxFQUFFLE1BQU07UUFDakIsTUFBTSxFQUFFLENBQUM7UUFDVCxTQUFTLEVBQUUsTUFBTTtRQUNqQixPQUFPLEVBQUUsQ0FBQztLQUNYO0NBQ0YsQ0FBQyxFQXZDUyxDQXVDVCxFQUNGLEVBQUUsSUFBSSxFQUFFLDRCQUE0QixFQUFFLENBQ3ZDLENBQUM7QUFTRixNQUFNLENBQUMsSUFBTSxtQkFBbUIsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUlqRCxVQUNFLEVBTUMsRUFDRCxHQUFHO0lBTkQsSUFBQSxzQkFBUSxFQUNSLGVBQW9CLEVBQXBCLHlDQUFvQixFQUNwQix3QkFBUyxFQUNULDhCQUEwQixFQUMxQix1RUFBWTtJQUlkLElBQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUM7SUFDMUQsT0FBTyxDQUNMLHNDQUNFLEdBQUcsRUFBRSxHQUFHLEVBQ1IsU0FBUyxFQUFFLElBQUksQ0FDYixPQUFPLENBQUMsSUFBSSxFQUNaLFNBQVMsRUFDVCxPQUFPLEtBQUssWUFBWSxJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQ2xELGdCQUNVLFdBQVcsRUFDdEIsSUFBSSxFQUFDLFlBQVksSUFDYixTQUFTO1FBRWIsNEJBQUksU0FBUyxFQUFFLE9BQU8sQ0FBQyxJQUFJLElBQUcsUUFBUSxDQUFNLENBQ3hDLENBQ1AsQ0FBQztBQUNKLENBQUMsQ0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnLi4vLi4vc3R5bGVzJztcbmltcG9ydCB7IEdldENsYXNzZXMsIFN0YW5kYXJkUHJvcHMgfSBmcm9tICcuLi8uLi90eXBlVXRpbHMnO1xuXG5leHBvcnQgY29uc3QgU2Vjb25kYXJ5TmF2aWdhdGlvblN0eWxlc0tleSA9ICdDaHJvbWFTZWNvbmRhcnlOYXZpZ2F0aW9uJztcblxuZXhwb3J0IGNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoXG4gICh0aGVtZSkgPT4gKHtcbiAgICByb290OiB7XG4gICAgICBib3JkZXJSaWdodDogYDFweCBzb2xpZCAke3RoZW1lLnBhbGV0dGUuZGl2aWRlcn1gLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleDogMSxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgfSxcbiAgICBob3Jpem9udGFsTmF2OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGJvcmRlclJpZ2h0OiAwLFxuXG4gICAgICAnJiA+IHVsJzoge1xuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGJvcmRlckJvdHRvbTogYDFweCBzb2xpZGAsXG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0aGVtZS5wYWxldHRlLmRpdmlkZXIsXG5cbiAgICAgICAgJyYgPiBsaSc6IHtcbiAgICAgICAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDEsIDMpLFxuICAgICAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LmJ1dHRvbi5mb250U2l6ZSxcbiAgICAgICAgICBsZXR0ZXJTcGFjaW5nOiAwLjUsXG4gICAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG5cbiAgICAgICAgICAnJiA+IGRpdic6IHtcbiAgICAgICAgICAgIGhlaWdodDogdGhlbWUucHhUb1JlbSgyKSxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICB0b3A6ICdhdXRvJyxcbiAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBsaXN0OiB7XG4gICAgICBsaXN0U3R5bGU6ICdub25lJyxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICB9LFxuICB9KSxcbiAgeyBuYW1lOiBTZWNvbmRhcnlOYXZpZ2F0aW9uU3R5bGVzS2V5IH1cbik7XG5cbmV4cG9ydCB0eXBlIFNlY29uZGFyeU5hdmlnYXRpb25DbGFzc2VzID0gR2V0Q2xhc3Nlczx0eXBlb2YgdXNlU3R5bGVzPjtcblxuZXhwb3J0IGludGVyZmFjZSBTZWNvbmRhcnlOYXZpZ2F0aW9uUHJvcHNcbiAgZXh0ZW5kcyBTdGFuZGFyZFByb3BzPEhUTUxFbGVtZW50LCBTZWNvbmRhcnlOYXZpZ2F0aW9uQ2xhc3Nlcz4ge1xuICB2YXJpYW50PzogJ3ZlcnRpY2FsJyB8ICdob3Jpem9udGFsJztcbn1cblxuZXhwb3J0IGNvbnN0IFNlY29uZGFyeU5hdmlnYXRpb24gPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBIVE1MRWxlbWVudCxcbiAgU2Vjb25kYXJ5TmF2aWdhdGlvblByb3BzXG4+KFxuICAoXG4gICAge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICB2YXJpYW50ID0gJ3ZlcnRpY2FsJyxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNsYXNzZXM6IGFkZGl0aW9uYWxDbGFzc2VzLFxuICAgICAgLi4ucm9vdFByb3BzXG4gICAgfSxcbiAgICByZWZcbiAgKSA9PiB7XG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcyh7IGNsYXNzZXM6IGFkZGl0aW9uYWxDbGFzc2VzIH0pO1xuICAgIHJldHVybiAoXG4gICAgICA8bmF2XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICBjbGFzc05hbWU9e2Nsc3goXG4gICAgICAgICAgY2xhc3Nlcy5yb290LFxuICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgICB2YXJpYW50ID09PSAnaG9yaXpvbnRhbCcgJiYgY2xhc3Nlcy5ob3Jpem9udGFsTmF2XG4gICAgICAgICl9XG4gICAgICAgIGFyaWEtbGFiZWw9XCJTZWNvbmRhcnlcIlxuICAgICAgICByb2xlPVwibmF2aWdhdGlvblwiXG4gICAgICAgIHsuLi5yb290UHJvcHN9XG4gICAgICA+XG4gICAgICAgIDx1bCBjbGFzc05hbWU9e2NsYXNzZXMubGlzdH0+e2NoaWxkcmVufTwvdWw+XG4gICAgICA8L25hdj5cbiAgICApO1xuICB9XG4pO1xuIl19