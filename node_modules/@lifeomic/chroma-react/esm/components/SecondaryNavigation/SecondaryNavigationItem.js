var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { NavLink, Route } from 'react-router-dom';
import { makeStyles } from '../../styles';
export var SecondaryNavigationItemStylesKey = 'ChromaSecondaryNavigationItem';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        paddingTop: theme.spacing(1.5),
        paddingBottom: theme.spacing(1.5),
        paddingRight: theme.spacing(3),
        textAlign: 'right',
        position: 'relative',
    },
    link: {
        color: theme.palette.text.hint,
        display: 'block',
        textDecoration: 'none',
        transition: 'color 0.5s ease',
        '&:hover': {
            textDecoration: 'none',
            color: theme.palette.primary.main,
        },
    },
    linkActive: {
        color: theme.palette.text.primary,
    },
    selector: {
        position: 'absolute',
        width: theme.pxToRem(4),
        height: '100%',
        top: 0,
        right: 0,
        background: theme.palette.primary.main,
        transition: 'all 0.2s',
        opacity: 0,
    },
    selectorActive: {
        opacity: 100,
    },
}); }, { name: SecondaryNavigationItemStylesKey });
export var SecondaryNavigationItem = React.forwardRef(function (_a, ref) {
    var className = _a.className, exact = _a.exact, label = _a.label, to = _a.to, additionalClasses = _a.classes, rootProps = __rest(_a, ["className", "exact", "label", "to", "classes"]);
    var classes = useStyles({ classes: additionalClasses });
    return (React.createElement(Route, { exact: exact, path: to }, function (_a) {
        var match = _a.match;
        var isActive = Boolean(match);
        return (React.createElement("li", __assign({ ref: ref, className: clsx(classes.root, className) }, rootProps),
            React.createElement(NavLink, { activeClassName: classes.linkActive, className: classes.link, exact: exact, to: to }, label),
            React.createElement("div", { role: "presentation", className: clsx(classes.selector, isActive && classes.selectorActive) })));
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Vjb25kYXJ5TmF2aWdhdGlvbkl0ZW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9TZWNvbmRhcnlOYXZpZ2F0aW9uL1NlY29uZGFyeU5hdmlnYXRpb25JdGVtLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFjLE1BQU0sa0JBQWtCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUcxQyxNQUFNLENBQUMsSUFBTSxnQ0FBZ0MsR0FBRywrQkFBK0IsQ0FBQztBQUVoRixNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsVUFBVSxDQUNqQyxVQUFDLEtBQUssSUFBSyxPQUFBLENBQUM7SUFDVixJQUFJLEVBQUU7UUFDSixVQUFVLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDOUIsYUFBYSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQ2pDLFlBQVksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUM5QixTQUFTLEVBQUUsT0FBTztRQUNsQixRQUFRLEVBQUUsVUFBVTtLQUNyQjtJQUNELElBQUksRUFBRTtRQUNKLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJO1FBQzlCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLGNBQWMsRUFBRSxNQUFNO1FBQ3RCLFVBQVUsRUFBRSxpQkFBaUI7UUFDN0IsU0FBUyxFQUFFO1lBQ1QsY0FBYyxFQUFFLE1BQU07WUFDdEIsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUk7U0FDbEM7S0FDRjtJQUNELFVBQVUsRUFBRTtRQUNWLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPO0tBQ2xDO0lBQ0QsUUFBUSxFQUFFO1FBQ1IsUUFBUSxFQUFFLFVBQVU7UUFDcEIsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sRUFBRSxNQUFNO1FBQ2QsR0FBRyxFQUFFLENBQUM7UUFDTixLQUFLLEVBQUUsQ0FBQztRQUNSLFVBQVUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJO1FBQ3RDLFVBQVUsRUFBRSxVQUFVO1FBQ3RCLE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFDRCxjQUFjLEVBQUU7UUFDZCxPQUFPLEVBQUUsR0FBRztLQUNiO0NBQ0YsQ0FBQyxFQWxDUyxDQWtDVCxFQUNGLEVBQUUsSUFBSSxFQUFFLGdDQUFnQyxFQUFFLENBQzNDLENBQUM7QUFXRixNQUFNLENBQUMsSUFBTSx1QkFBdUIsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUlyRCxVQUNFLEVBQXlFLEVBQ3pFLEdBQUc7SUFERCxJQUFBLHdCQUFTLEVBQUUsZ0JBQUssRUFBRSxnQkFBSyxFQUFFLFVBQUUsRUFBRSw4QkFBMEIsRUFBRSx3RUFBWTtJQUd2RSxJQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBRTFELE9BQU8sQ0FDTCxvQkFBQyxLQUFLLElBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUMxQixVQUFDLEVBQVM7WUFBUCxnQkFBSztRQUNQLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVoQyxPQUFPLENBQ0wscUNBQ0UsR0FBRyxFQUFFLEdBQUcsRUFDUixTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQ3BDLFNBQVM7WUFFYixvQkFBQyxPQUFPLElBQ04sZUFBZSxFQUFFLE9BQU8sQ0FBQyxVQUFVLEVBQ25DLFNBQVMsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUN2QixLQUFLLEVBQUUsS0FBSyxFQUNaLEVBQUUsRUFBRSxFQUFFLElBRUwsS0FBSyxDQUNFO1lBRVYsNkJBQ0UsSUFBSSxFQUFDLGNBQWMsRUFDbkIsU0FBUyxFQUFFLElBQUksQ0FDYixPQUFPLENBQUMsUUFBUSxFQUNoQixRQUFRLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FDbkMsR0FDRCxDQUNDLENBQ04sQ0FBQztJQUNKLENBQUMsQ0FDSyxDQUNULENBQUM7QUFDSixDQUFDLENBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTmF2TGluaywgUm91dGUsIFJvdXRlUHJvcHMgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICcuLi8uLi9zdHlsZXMnO1xuaW1wb3J0IHsgR2V0Q2xhc3NlcywgU3RhbmRhcmRQcm9wcyB9IGZyb20gJy4uLy4uL3R5cGVVdGlscyc7XG5cbmV4cG9ydCBjb25zdCBTZWNvbmRhcnlOYXZpZ2F0aW9uSXRlbVN0eWxlc0tleSA9ICdDaHJvbWFTZWNvbmRhcnlOYXZpZ2F0aW9uSXRlbSc7XG5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAodGhlbWUpID0+ICh7XG4gICAgcm9vdDoge1xuICAgICAgcGFkZGluZ1RvcDogdGhlbWUuc3BhY2luZygxLjUpLFxuICAgICAgcGFkZGluZ0JvdHRvbTogdGhlbWUuc3BhY2luZygxLjUpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDMpLFxuICAgICAgdGV4dEFsaWduOiAncmlnaHQnLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgfSxcbiAgICBsaW5rOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmhpbnQsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgIHRyYW5zaXRpb246ICdjb2xvciAwLjVzIGVhc2UnLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgIH0sXG4gICAgfSxcbiAgICBsaW5rQWN0aXZlOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgfSxcbiAgICBzZWxlY3Rvcjoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB3aWR0aDogdGhlbWUucHhUb1JlbSg0KSxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgdG9wOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBiYWNrZ3JvdW5kOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgIHRyYW5zaXRpb246ICdhbGwgMC4ycycsXG4gICAgICBvcGFjaXR5OiAwLFxuICAgIH0sXG4gICAgc2VsZWN0b3JBY3RpdmU6IHtcbiAgICAgIG9wYWNpdHk6IDEwMCxcbiAgICB9LFxuICB9KSxcbiAgeyBuYW1lOiBTZWNvbmRhcnlOYXZpZ2F0aW9uSXRlbVN0eWxlc0tleSB9XG4pO1xuXG5leHBvcnQgdHlwZSBTZWNvbmRhcnlOYXZpZ2F0aW9uSXRlbUNsYXNzZXMgPSBHZXRDbGFzc2VzPHR5cGVvZiB1c2VTdHlsZXM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFNlY29uZGFyeU5hdmlnYXRpb25JdGVtUHJvcHNcbiAgZXh0ZW5kcyBTdGFuZGFyZFByb3BzPEhUTUxMSUVsZW1lbnQsIFNlY29uZGFyeU5hdmlnYXRpb25JdGVtQ2xhc3Nlcz4sXG4gICAgUGljazxSb3V0ZVByb3BzLCAnZXhhY3QnPiB7XG4gIHRvOiBzdHJpbmc7XG4gIGxhYmVsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBTZWNvbmRhcnlOYXZpZ2F0aW9uSXRlbSA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIEhUTUxMSUVsZW1lbnQsXG4gIFNlY29uZGFyeU5hdmlnYXRpb25JdGVtUHJvcHNcbj4oXG4gIChcbiAgICB7IGNsYXNzTmFtZSwgZXhhY3QsIGxhYmVsLCB0bywgY2xhc3NlczogYWRkaXRpb25hbENsYXNzZXMsIC4uLnJvb3RQcm9wcyB9LFxuICAgIHJlZlxuICApID0+IHtcbiAgICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKHsgY2xhc3NlczogYWRkaXRpb25hbENsYXNzZXMgfSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlIGV4YWN0PXtleGFjdH0gcGF0aD17dG99PlxuICAgICAgICB7KHsgbWF0Y2ggfSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGlzQWN0aXZlID0gQm9vbGVhbihtYXRjaCk7XG5cbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGxpXG4gICAgICAgICAgICAgIHJlZj17cmVmfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2Nsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpfVxuICAgICAgICAgICAgICB7Li4ucm9vdFByb3BzfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8TmF2TGlua1xuICAgICAgICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZT17Y2xhc3Nlcy5saW5rQWN0aXZlfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5saW5rfVxuICAgICAgICAgICAgICAgIGV4YWN0PXtleGFjdH1cbiAgICAgICAgICAgICAgICB0bz17dG99XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7bGFiZWx9XG4gICAgICAgICAgICAgIDwvTmF2TGluaz5cblxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgcm9sZT1cInByZXNlbnRhdGlvblwiXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbHN4KFxuICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5zZWxlY3RvcixcbiAgICAgICAgICAgICAgICAgIGlzQWN0aXZlICYmIGNsYXNzZXMuc2VsZWN0b3JBY3RpdmVcbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICApO1xuICAgICAgICB9fVxuICAgICAgPC9Sb3V0ZT5cbiAgICApO1xuICB9XG4pO1xuIl19