var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { ChevronDown } from '@lifeomic/chromicons';
import { generateUniqueId } from '../_private/UniqueId';
import { motion, useReducedMotion } from 'framer-motion';
import { Portal } from 'reakit/Portal';
import { Rover, useRoverState } from 'reakit/Rover';
import { useStyles } from './Select';
import { Text } from '../Text';
import { buildDescribedBy, errorFor, FormErrorMessage, FormHelpMessage, helpFor, } from '../_private/forms';
import { Popover as ReakitPopover, PopoverDisclosure, usePopoverState, } from 'reakit/Popover';
import clsx from 'clsx';
import FocusLock from 'react-focus-lock';
import * as React from 'react';
var popoverVariants = {
    open: {
        opacity: 1,
        offsetTop: -2,
        transition: {
            duration: 0.25,
            ease: 'easeOut',
        },
    },
    closed: {
        opacity: 0,
        offsetTop: -18,
    },
};
var popoverVariantsReduced = {
    open: {
        opacity: 1,
        transition: {
            duration: 0.2,
            ease: 'easeOut',
        },
    },
    closed: {
        opacity: 0,
    },
};
var listMotionVariants = {
    open: {
        transition: {
            delayChildren: 0.025,
            staggerChildren: 0.045,
            duration: 0.2,
        },
    },
    closed: {},
};
var listMotionVariantsReduced = {
    open: {},
    closed: {},
};
var listItemMotionVariants = {
    open: {
        y: 0,
        opacity: 1,
        transition: {
            y: { stiffness: 1000, velocity: -100 },
        },
    },
    closed: {
        y: -16,
        opacity: 0,
    },
};
var listItemMotionVariantsReduced = {
    open: {
        opacity: 1,
    },
    closed: {
        opacity: 0,
    },
};
export var ComboBox = function (_a) {
    var _b;
    var ariaLabel = _a["aria-label"], children = _a.children, className = _a.className, _c = _a.color, color = _c === void 0 ? 'default' : _c, errorMessage = _a.errorMessage, fullWidth = _a.fullWidth, hasError = _a.hasError, helpMessage = _a.helpMessage, id = _a.id, label = _a.label, secondaryLabel = _a.secondaryLabel, onChange = _a.onChange, placeholder = _a.placeholder, placement = _a.placement, popoverAriaLabel = _a.popoverAriaLabel, selectedOptionDisplay = _a.selectedOptionDisplay, value = _a.value, rootProps = __rest(_a, ['aria-label', "children", "className", "color", "errorMessage", "fullWidth", "hasError", "helpMessage", "id", "label", "secondaryLabel", "onChange", "placeholder", "placement", "popoverAriaLabel", "selectedOptionDisplay", "value"]);
    var classes = useStyles({});
    var popover = usePopoverState({ placement: placement });
    var rover = useRoverState({ loop: true, orientation: 'vertical' });
    var shouldReduceMotion = useReducedMotion();
    var buttonRef = React.useRef();
    // This width is used to determine the popover width when open,
    // as well as setting the `maxWidth` of the text inside to ensure
    // the element size doesn't shift when the selected option text
    // gets long.
    var _d = React.useState(50), width = _d[0], setWidth = _d[1];
    var _e = React.useState(null), internalSelections = _e[0], setInternalSelections = _e[1];
    // A uniqueId is required to wire up aria-attributes
    var uniqueId = React.useState(function () { return id || name || generateUniqueId('combobox-'); })[0];
    // Update the opened popover width when the window width changes
    // TODO: Review the best way to handle this without breaking
    // eslint-disable-next-line react-hooks/exhaustive-deps
    React.useEffect(function () {
        setWidth(buttonRef.current.getBoundingClientRect().width);
    });
    // Determine which of the child select option values are matches based on
    // the "value" prop.  If a select option value is included in the "value",
    // then we add it to the list of internal select options (which keep
    // track of which options are selected to apply classes)
    React.useEffect(function () {
        var matches = React.Children.toArray(children).filter(function (child) {
            if (!React.isValidElement(child)) {
                return null;
            }
            return value === null || value === void 0 ? void 0 : value.includes(child.props.value);
        });
        if (matches.length === 0) {
            setInternalSelections([]);
            return;
        }
        setInternalSelections(matches.map(function (m) { return m.props; }));
    }, [children, value]);
    var handleOptionSelected = function (optionValue, meta) {
        var isAlreadySelected = internalSelections === null || internalSelections === void 0 ? void 0 : internalSelections.find(function (s) { return s.value === optionValue; });
        if (isAlreadySelected) {
            // Filter out the option the user selected from our list of internal selections
            // (so that it's removed), and then pass the values and meta arrays back
            // to the consumer.
            var filteredSelections = (internalSelections === null || internalSelections === void 0 ? void 0 : internalSelections.filter(function (s) { return s.value !== optionValue; })) || [];
            onChange === null || onChange === void 0 ? void 0 : onChange(__spreadArrays(filteredSelections === null || filteredSelections === void 0 ? void 0 : filteredSelections.map(function (s) { return s.value; })), __spreadArrays(filteredSelections === null || filteredSelections === void 0 ? void 0 : filteredSelections.map(function (s) { return s.meta; })));
            return;
        }
        // We are adding a selected option, so we collect all of the values
        // and meta arrays, add in our new selection, and return the updated
        // list to the consumer
        var valueOptions = (internalSelections === null || internalSelections === void 0 ? void 0 : internalSelections.map(function (s) { return s.value; })) || [];
        var metaOptions = (internalSelections === null || internalSelections === void 0 ? void 0 : internalSelections.map(function (s) { return s.meta; })) || [];
        onChange === null || onChange === void 0 ? void 0 : onChange(__spreadArrays(valueOptions, [optionValue]), __spreadArrays(metaOptions, [meta]));
    };
    if (!label && !ariaLabel && process.env.NODE_ENV === 'development') {
        throw new Error('If a "label" is not provided to ComboBox, please provide "aria-label".');
    }
    return (React.createElement("div", { className: clsx(classes.root, className) },
        React.createElement("label", { "aria-hidden": "true", className: clsx(classes.label, color === 'inverse' && classes.labelInverse, !label && ariaLabel && classes.srOnly), htmlFor: uniqueId },
            label || ariaLabel,
            secondaryLabel ? (React.createElement("span", { className: clsx(classes.labelSecondary, color === 'inverse' && classes.labelInverse) }, secondaryLabel)) : null),
        React.createElement(PopoverDisclosure, __assign({ className: clsx(classes.button, classes.comboxBoxOverflow, hasError && classes.buttonError, fullWidth && classes.buttonFullWidth, (_b = {},
                _b[classes.buttonInverse] = color === 'inverse',
                _b)), ref: buttonRef, "aria-describedby": buildDescribedBy({
                hasError: hasError,
                hasHelpMessage: !!helpMessage,
                uniqueId: uniqueId,
            }), id: uniqueId }, popover, rootProps),
            React.createElement(React.Fragment, null,
                (internalSelections === null || internalSelections === void 0 ? void 0 : internalSelections.length) === 0 && (React.createElement(motion.div, { initial: { opacity: 0 }, animate: {
                        opacity: 1,
                        transition: { duration: 0.2, ease: 'easeIn' },
                    } },
                    React.createElement(Text, { className: clsx(classes.buttonText, classes.placeholderText, classes.comboBoxPlaceholder), size: "subbody" }, placeholder))),
                internalSelections &&
                    (internalSelections === null || internalSelections === void 0 ? void 0 : internalSelections.length) > 0 &&
                    !selectedOptionDisplay && (React.createElement(Text, { className: clsx(classes.buttonText, classes.chipList), size: "subbody", style: fullWidth ? {} : { maxWidth: width - 42 } }, internalSelections === null || internalSelections === void 0 ? void 0 : internalSelections.map(function (selectedOption, index) { return (React.createElement(motion.span, { key: index, className: classes.chip, initial: shouldReduceMotion
                        ? { opacity: 0 }
                        : { opacity: 0, y: -8 }, animate: shouldReduceMotion
                        ? { opacity: 1 }
                        : {
                            opacity: 1,
                            transition: { duration: 0.2, ease: 'easeOut' },
                            y: 0,
                        } }, selectedOption.title)); }))),
                internalSelections &&
                    (internalSelections === null || internalSelections === void 0 ? void 0 : internalSelections.length) > 0 &&
                    selectedOptionDisplay && (React.createElement(Text, { className: classes.buttonText, size: "subbody" }, selectedOptionDisplay(internalSelections))),
                React.createElement("div", { className: classes.buttonArrowContainer, role: "presentation" },
                    React.createElement(ChevronDown, { className: clsx(classes.arrowIcon, popover.visible && classes.rotate), "aria-hidden": true, role: "img", width: 18, height: 18 })))),
        helpMessage && (React.createElement(FormHelpMessage, { className: classes.message, color: color, rootElementId: uniqueId, describedById: helpFor(uniqueId) }, helpMessage)),
        hasError && (React.createElement(FormErrorMessage, { className: classes.message, color: color, rootElementId: uniqueId, describedById: errorFor(uniqueId) }, errorMessage)),
        React.createElement(Portal, null,
            React.createElement(FocusLock, null,
                React.createElement(ReakitPopover, __assign({ "aria-label": label || ariaLabel || popoverAriaLabel, className: classes.popover }, popover, { style: { width: width }, as: motion.div, animate: popover.visible ? 'open' : 'closed', variants: shouldReduceMotion ? popoverVariantsReduced : popoverVariants }),
                    React.createElement(motion.ul, { className: classes.ul, variants: shouldReduceMotion
                            ? listMotionVariantsReduced
                            : listMotionVariants, role: "listbox", "aria-multiselectable": true }, React.Children.map(children, function (child) {
                        var _a, _b, _c, _d;
                        if (!React.isValidElement(child)) {
                            return null;
                        }
                        var option = child;
                        return (React.createElement(Rover, __assign({}, rover, { "aria-selected": value === null || value === void 0 ? void 0 : value.includes((_a = option === null || option === void 0 ? void 0 : option.props) === null || _a === void 0 ? void 0 : _a.value), className: classes.option, as: motion.li, disabled: (_b = child === null || child === void 0 ? void 0 : child.props) === null || _b === void 0 ? void 0 : _b.disabled, role: "option", value: (_c = option === null || option === void 0 ? void 0 : option.props) === null || _c === void 0 ? void 0 : _c.value, variants: shouldReduceMotion
                                ? listItemMotionVariantsReduced
                                : listItemMotionVariants, onClick: function () {
                                var _a, _b;
                                return handleOptionSelected((_a = option === null || option === void 0 ? void 0 : option.props) === null || _a === void 0 ? void 0 : _a.value, (_b = option === null || option === void 0 ? void 0 : option.props) === null || _b === void 0 ? void 0 : _b.meta);
                            } }), React.cloneElement(option, __assign({ isChecked: value === null || value === void 0 ? void 0 : value.includes((_d = option === null || option === void 0 ? void 0 : option.props) === null || _d === void 0 ? void 0 : _d.value) }, option.props))));
                    })))))));
};
//# sourceMappingURL=data:application/json;base64,