var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { makeStyles } from '../../styles';
export var GroupHeadingStylesKey = 'ChromaSelectGroupHeading';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        fontSize: theme.pxToRem(10),
        fontWeight: theme.typography.fontWeightBold,
        letterSpacing: theme.pxToRem(1),
        padding: theme.spacing(0.25, 2, 0.5),
        color: theme.palette.text.hint,
        textTransform: 'uppercase',
        '&:not(:first-child)': {
            marginTop: theme.spacing(0.75),
            paddingTop: theme.spacing(1.25),
            borderTop: "solid 1px " + theme.palette.divider,
        },
    },
}); }, { name: GroupHeadingStylesKey });
export var GroupHeading = function (_a) {
    var children = _a.children, className = _a.className, dataSelectRole = _a["data-select-role"], rootProps = __rest(_a, ["children", "className", 'data-select-role']);
    var classes = useStyles({});
    return (React.createElement("li", __assign({ className: clsx(classes.root, className), role: "option" }, rootProps), children));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3JvdXBIZWFkaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvU2VsZWN0L0dyb3VwSGVhZGluZy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRzFDLE1BQU0sQ0FBQyxJQUFNLHFCQUFxQixHQUFHLDBCQUEwQixDQUFDO0FBRWhFLE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQ2pDLFVBQUMsS0FBSyxJQUFLLE9BQUEsQ0FBQztJQUNWLElBQUksRUFBRTtRQUNKLFFBQVEsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUMzQixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxjQUFjO1FBQzNDLGFBQWEsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMvQixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUNwQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSTtRQUM5QixhQUFhLEVBQUUsV0FBVztRQUMxQixxQkFBcUIsRUFBRTtZQUNyQixTQUFTLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFDOUIsVUFBVSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQy9CLFNBQVMsRUFBRSxlQUFhLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBUztTQUNoRDtLQUNGO0NBQ0YsQ0FBQyxFQWRTLENBY1QsRUFDRixFQUFFLElBQUksRUFBRSxxQkFBcUIsRUFBRSxDQUNoQyxDQUFDO0FBU0YsTUFBTSxDQUFDLElBQU0sWUFBWSxHQUFnQyxVQUFDLEVBS3pEO0lBSkMsSUFBQSxzQkFBUSxFQUNSLHdCQUFTLEVBQ1QsdUNBQW9DLEVBQ3BDLHFFQUFZO0lBRVosSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLE9BQU8sQ0FDTCxxQ0FBSSxTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEVBQUUsSUFBSSxFQUFDLFFBQVEsSUFBSyxTQUFTLEdBQ3RFLFFBQVEsQ0FDTixDQUNOLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICcuLi8uLi9zdHlsZXMnO1xuaW1wb3J0IHsgR2V0Q2xhc3NlcyB9IGZyb20gJy4uLy4uL3R5cGVVdGlscyc7XG5cbmV4cG9ydCBjb25zdCBHcm91cEhlYWRpbmdTdHlsZXNLZXkgPSAnQ2hyb21hU2VsZWN0R3JvdXBIZWFkaW5nJztcblxuZXhwb3J0IGNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoXG4gICh0aGVtZSkgPT4gKHtcbiAgICByb290OiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUucHhUb1JlbSgxMCksXG4gICAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRCb2xkLFxuICAgICAgbGV0dGVyU3BhY2luZzogdGhlbWUucHhUb1JlbSgxKSxcbiAgICAgIHBhZGRpbmc6IHRoZW1lLnNwYWNpbmcoMC4yNSwgMiwgMC41KSxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuaGludCxcbiAgICAgIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgICAgJyY6bm90KDpmaXJzdC1jaGlsZCknOiB7XG4gICAgICAgIG1hcmdpblRvcDogdGhlbWUuc3BhY2luZygwLjc1KSxcbiAgICAgICAgcGFkZGluZ1RvcDogdGhlbWUuc3BhY2luZygxLjI1KSxcbiAgICAgICAgYm9yZGVyVG9wOiBgc29saWQgMXB4ICR7dGhlbWUucGFsZXR0ZS5kaXZpZGVyfWAsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pLFxuICB7IG5hbWU6IEdyb3VwSGVhZGluZ1N0eWxlc0tleSB9XG4pO1xuXG5leHBvcnQgdHlwZSBHcm91cEhlYWRpbmdDbGFzc2VzID0gR2V0Q2xhc3Nlczx0eXBlb2YgdXNlU3R5bGVzPjtcblxuZXhwb3J0IGludGVyZmFjZSBHcm91cEhlYWRpbmdQcm9wcyB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgWydkYXRhLXNlbGVjdC1yb2xlJ106ICdoZWFkaW5nJztcbn1cblxuZXhwb3J0IGNvbnN0IEdyb3VwSGVhZGluZzogUmVhY3QuRkM8R3JvdXBIZWFkaW5nUHJvcHM+ID0gKHtcbiAgY2hpbGRyZW4sXG4gIGNsYXNzTmFtZSxcbiAgWydkYXRhLXNlbGVjdC1yb2xlJ106IGRhdGFTZWxlY3RSb2xlLFxuICAuLi5yb290UHJvcHNcbn0pID0+IHtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcyh7fSk7XG4gIHJldHVybiAoXG4gICAgPGxpIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSl9IHJvbGU9XCJvcHRpb25cIiB7Li4ucm9vdFByb3BzfT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2xpPlxuICApO1xufTtcbiJdfQ==