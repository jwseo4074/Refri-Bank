var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { makeStyles } from '../../styles';
export var GroupHeadingStylesKey = 'ChromaSelectGroupHeading';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        fontSize: theme.pxToRem(10),
        fontWeight: theme.typography.fontWeightBold,
        letterSpacing: theme.pxToRem(1),
        padding: theme.spacing(0.25, 2, 0.5),
        color: theme.palette.text.hint,
        textTransform: 'uppercase',
        '&:not(:first-child)': {
            marginTop: theme.spacing(0.75),
            paddingTop: theme.spacing(1.25),
            borderTop: "solid 1px ".concat(theme.palette.divider),
        },
    },
}); }, { name: GroupHeadingStylesKey });
export var GroupHeading = function (_a) {
    var children = _a.children, className = _a.className, dataSelectRole = _a["data-select-role"], rootProps = __rest(_a, ["children", "className", 'data-select-role']);
    var classes = useStyles({});
    return (React.createElement("li", __assign({ className: clsx(classes.root, className), role: "option" }, rootProps), children));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3JvdXBIZWFkaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvU2VsZWN0L0dyb3VwSGVhZGluZy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRzFDLE1BQU0sQ0FBQyxJQUFNLHFCQUFxQixHQUFHLDBCQUEwQixDQUFDO0FBRWhFLE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQ2pDLFVBQUMsS0FBSyxJQUFLLE9BQUEsQ0FBQztJQUNWLElBQUksRUFBRTtRQUNKLFFBQVEsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUMzQixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxjQUFjO1FBQzNDLGFBQWEsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMvQixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUNwQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSTtRQUM5QixhQUFhLEVBQUUsV0FBVztRQUMxQixxQkFBcUIsRUFBRTtZQUNyQixTQUFTLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFDOUIsVUFBVSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQy9CLFNBQVMsRUFBRSxvQkFBYSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBRTtTQUNoRDtLQUNGO0NBQ0YsQ0FBQyxFQWRTLENBY1QsRUFDRixFQUFFLElBQUksRUFBRSxxQkFBcUIsRUFBRSxDQUNoQyxDQUFDO0FBVUYsTUFBTSxDQUFDLElBQU0sWUFBWSxHQUFnQyxVQUFDLEVBS3pEO0lBSkMsSUFBQSxRQUFRLGNBQUEsRUFDUixTQUFTLGVBQUEsRUFDYSxjQUFjLHlCQUFBLEVBQ2pDLFNBQVMsY0FKNEMsNkNBS3pELENBRGE7SUFFWixJQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUIsT0FBTyxDQUNMLHFDQUFJLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsRUFBRSxJQUFJLEVBQUMsUUFBUSxJQUFLLFNBQVMsR0FDdEUsUUFBUSxDQUNOLENBQ04sQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJy4uLy4uL3N0eWxlcyc7XG5pbXBvcnQgeyBHZXRDbGFzc2VzIH0gZnJvbSAnLi4vLi4vdHlwZVV0aWxzJztcblxuZXhwb3J0IGNvbnN0IEdyb3VwSGVhZGluZ1N0eWxlc0tleSA9ICdDaHJvbWFTZWxlY3RHcm91cEhlYWRpbmcnO1xuXG5leHBvcnQgY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhcbiAgKHRoZW1lKSA9PiAoe1xuICAgIHJvb3Q6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS5weFRvUmVtKDEwKSxcbiAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodEJvbGQsXG4gICAgICBsZXR0ZXJTcGFjaW5nOiB0aGVtZS5weFRvUmVtKDEpLFxuICAgICAgcGFkZGluZzogdGhlbWUuc3BhY2luZygwLjI1LCAyLCAwLjUpLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5oaW50LFxuICAgICAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gICAgICAnJjpub3QoOmZpcnN0LWNoaWxkKSc6IHtcbiAgICAgICAgbWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nKDAuNzUpLFxuICAgICAgICBwYWRkaW5nVG9wOiB0aGVtZS5zcGFjaW5nKDEuMjUpLFxuICAgICAgICBib3JkZXJUb3A6IGBzb2xpZCAxcHggJHt0aGVtZS5wYWxldHRlLmRpdmlkZXJ9YCxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSksXG4gIHsgbmFtZTogR3JvdXBIZWFkaW5nU3R5bGVzS2V5IH1cbik7XG5cbmV4cG9ydCB0eXBlIEdyb3VwSGVhZGluZ0NsYXNzZXMgPSBHZXRDbGFzc2VzPHR5cGVvZiB1c2VTdHlsZXM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEdyb3VwSGVhZGluZ1Byb3BzIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgWydkYXRhLXNlbGVjdC1yb2xlJ106ICdoZWFkaW5nJztcbn1cblxuZXhwb3J0IGNvbnN0IEdyb3VwSGVhZGluZzogUmVhY3QuRkM8R3JvdXBIZWFkaW5nUHJvcHM+ID0gKHtcbiAgY2hpbGRyZW4sXG4gIGNsYXNzTmFtZSxcbiAgWydkYXRhLXNlbGVjdC1yb2xlJ106IGRhdGFTZWxlY3RSb2xlLFxuICAuLi5yb290UHJvcHNcbn0pID0+IHtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcyh7fSk7XG4gIHJldHVybiAoXG4gICAgPGxpIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSl9IHJvbGU9XCJvcHRpb25cIiB7Li4ucm9vdFByb3BzfT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2xpPlxuICApO1xufTtcbiJdfQ==