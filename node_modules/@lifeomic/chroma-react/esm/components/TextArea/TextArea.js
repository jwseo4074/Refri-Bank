var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { makeStyles } from '../../styles';
import { buildDescribedBy, errorFor, FormErrorMessage, FormHelpMessage, helpFor, } from '../_private/forms';
import { generateUniqueId } from '../_private/UniqueId';
import { Tooltip } from '../Tooltip';
import { screenreaderOnlyStyles } from '../../styles/screenreaderOnly';
export var TextAreaStylesKey = 'ChromaTextArea';
export var useStyles = makeStyles(function (theme) { return ({
    root: {},
    label: {
        alignItems: 'center',
        color: theme.palette.black[800],
        display: 'flex',
        fontSize: theme.pxToRem(14),
        fontWeight: theme.typography.fontWeightBold,
        marginBottom: theme.spacing(1),
        '&:empty': {
            marginBottom: theme.spacing(0),
        },
    },
    labelIcon: {
        marginLeft: theme.spacing(0.75),
        color: theme.palette.primary.main,
    },
    labelIconInverse: {
        mixBlendMode: 'screen',
    },
    labelSecondary: {
        color: theme.palette.text.hint,
        fontSize: theme.pxToRem(11),
        display: 'inline-block',
        margin: theme.spacing(0, 0.75),
    },
    labelInverse: {
        color: theme.palette.common.white,
        '&$labelSecondary': {
            opacity: 0.9,
        },
    },
    textarea: {
        backgroundColor: 'rgba(132, 137, 166, 0.15)',
        border: "1px solid transparent",
        borderRadius: theme.pxToRem(4),
        color: theme.palette.text.primary,
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.pxToRem(14),
        lineHeight: 1.25,
        maxHeight: '6rem',
        maxWidth: '100%',
        minHeight: '2.5rem',
        minWidth: theme.pxToRem(175),
        paddingBottom: theme.spacing(1),
        paddingLeft: theme.spacing(1.25),
        paddingRight: theme.spacing(1.25),
        paddingTop: theme.spacing(1),
        transition: 'border 0.25s ease',
        '&:focus': {
            outline: 'none',
            backgroundColor: 'rgba(255, 255, 255, 0.5)',
            border: "1px solid rgba(132, 137, 166, 0.45)",
        },
        '&:disabled': {
            cursor: 'not-allowed',
            opacity: 0.625,
        },
        '&:read-only': {
            cursor: 'not-allowed',
            opacity: 0.9,
            '&:focus': {
                backgroundColor: 'rgba(132, 137, 166, 0.15)',
                border: "1px solid transparent",
            }
        },
        '&::-webkit-input-placeholder': {
            color: theme.palette.black[400],
        },
        '&::-moz-placeholder': {
            color: theme.palette.black[400],
        },
        '&:-ms-input-placeholder': {
            color: theme.palette.black[400],
        },
        '&:-moz-placeholder': {
            color: theme.palette.black[400],
        },
    },
    textareaInverse: {
        backgroundColor: 'rgba(230, 231, 237, 0.1)',
        color: theme.palette.common.white,
        '&:focus': {
            backgroundColor: 'rgba(230, 231, 237, 0.1)',
            border: "1px solid rgba(230, 231, 237, 0.55)",
        },
        '&:read-only': {
            opacity: 1,
            '&:focus': {
                backgroundColor: 'rgba(230, 231, 237, 0.1)',
            }
        },
        '&::-webkit-input-placeholder': {
            color: 'rgba(255, 255, 255, 0.8)',
        },
        '&::-moz-placeholder': {
            color: 'rgba(255, 255, 255, 0.8)',
        },
        '&:-ms-input-placeholder': {
            color: 'rgba(255, 255, 255, 0.8)',
        },
        '&:-moz-placeholder': {
            color: 'rgba(255, 255, 255, 0.8)',
        },
    },
    textareaError: {
        backgroundColor: 'rgba(230, 231, 237, 0.1)',
        border: "1px solid ".concat(theme.palette.error.main),
        '&:focus': {
            border: "1px solid ".concat(theme.palette.error.main),
        },
    },
    fullWidth: {
        width: '100%',
    },
    message: {
        marginLeft: 0,
    },
    tooltipContainer: {
        display: 'flex',
        outline: 'none',
    },
    srOnly: __assign({}, screenreaderOnlyStyles),
}); }, { name: TextAreaStylesKey });
export var TextArea = React.forwardRef(function (_a, ref) {
    var _b, _c;
    var ariaLabel = _a["aria-label"], className = _a.className, color = _a.color, errorMessage = _a.errorMessage, fullWidth = _a.fullWidth, hasError = _a.hasError, helpMessage = _a.helpMessage, Icon = _a.icon, id = _a.id, label = _a.label, name = _a.name, secondaryLabel = _a.secondaryLabel, textAreaClassName = _a.textAreaClassName, tooltipMessage = _a.tooltipMessage, rootProps = __rest(_a, ['aria-label', "className", "color", "errorMessage", "fullWidth", "hasError", "helpMessage", "icon", "id", "label", "name", "secondaryLabel", "textAreaClassName", "tooltipMessage"]);
    var classes = useStyles({});
    var uniqueId = React.useState(function () { return id || name || generateUniqueId('textArea-'); })[0];
    if (!label && !ariaLabel && process.env.NODE_ENV === 'development') {
        throw new Error('If a "label" is not provided to TextArea, please provide "aria-label".');
    }
    return (React.createElement("div", { className: clsx(classes.root, className) },
        React.createElement("label", { className: clsx(classes.label, (_b = {},
                _b[classes.labelInverse] = color === 'inverse',
                _b), !label && ariaLabel && classes.srOnly), htmlFor: uniqueId },
            label || ariaLabel,
            !!Icon && tooltipMessage && (React.createElement(Tooltip, { title: tooltipMessage },
                React.createElement("span", { className: classes.tooltipContainer },
                    React.createElement(Icon, { className: clsx(classes.labelIcon, color === 'inverse' && classes.labelIconInverse), width: 16, height: 16, role: "img", "aria-hidden": true })))),
            secondaryLabel && (React.createElement("span", { className: clsx(classes.labelSecondary, color === 'inverse' && classes.labelInverse) }, secondaryLabel))),
        React.createElement("textarea", __assign({ "aria-describedby": buildDescribedBy({
                hasError: hasError,
                hasHelpMessage: !!helpMessage,
                uniqueId: uniqueId,
            }), className: clsx(classes.textarea, (_c = {}, _c[classes.textareaInverse] = color === 'inverse', _c), fullWidth && classes.fullWidth, hasError && classes.textareaError, textAreaClassName), cols: 1, id: uniqueId, ref: ref, name: name }, rootProps)),
        helpMessage && (React.createElement(FormHelpMessage, { color: color, className: classes.message, rootElementId: uniqueId, describedById: helpFor(uniqueId) }, helpMessage)),
        hasError && errorMessage && (React.createElement(FormErrorMessage, { color: color, className: classes.message, rootElementId: uniqueId, describedById: errorFor(uniqueId) }, errorMessage))));
});
//# sourceMappingURL=data:application/json;base64,