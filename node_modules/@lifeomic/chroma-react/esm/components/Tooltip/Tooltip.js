var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { fontSizes } from '../../styles/createTypography';
import { makeStyles } from '../../styles';
import { motion, useReducedMotion } from 'framer-motion';
import { Portal } from 'reakit/Portal';
import { Tooltip as ReakitTooltip, TooltipReference, useTooltipState, } from 'reakit/Tooltip';
import clsx from 'clsx';
import * as React from 'react';
export var TooltipStylesKey = 'ChromaTooltip';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        backgroundColor: theme.palette.common.black,
        borderRadius: theme.pxToRem(4),
        boxShadow: theme.boxShadows.tooltip,
        color: theme.palette.common.white,
        fontFamily: theme.typography.fontFamily,
        fontSize: fontSizes.tooltip,
        letterSpacing: '0.021875em',
        maxWidth: theme.pxToRem(500),
        paddingLeft: theme.spacing(1),
        paddingRight: theme.spacing(1),
        paddingTop: theme.spacing(0.5),
        paddingBottom: theme.spacing(0.75),
        zIndex: 1300,
    },
}); }, { name: TooltipStylesKey });
export var Tooltip = function (_a) {
    var children = _a.children, className = _a.className, _b = _a.defaultVisible, defaultVisible = _b === void 0 ? false : _b, _c = _a.placement, placement = _c === void 0 ? 'bottom' : _c, _d = _a.title, title = _d === void 0 ? '' : _d, gutter = _a.gutter, rootProps = __rest(_a, ["children", "className", "defaultVisible", "placement", "title", "gutter"]);
    var classes = useStyles({});
    var shouldReduceMotion = useReducedMotion();
    var tooltip = useTooltipState({
        placement: placement,
        visible: defaultVisible,
        gutter: gutter,
    });
    React.useEffect(function () {
        tooltip.place(placement);
    }, [placement, tooltip]);
    return (React.createElement(React.Fragment, null,
        React.createElement(TooltipReference, __assign({}, tooltip), function (referenceProps) {
            return React.cloneElement(React.Children.only(children), referenceProps);
        }),
        React.createElement(Portal, null,
            React.createElement(ReakitTooltip, __assign({}, tooltip, { as: motion.div, className: clsx(classes.root, className), animate: tooltip.visible
                    ? shouldReduceMotion
                        ? { opacity: 1 }
                        : {
                            opacity: 1,
                            transition: { delay: 0.75 },
                        }
                    : {
                        opacity: 0,
                    } }, rootProps), title))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9vbHRpcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1Rvb2x0aXAvVG9vbHRpcC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUUxRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2QyxPQUFPLEVBQ0wsT0FBTyxJQUFJLGFBQWEsRUFFeEIsZ0JBQWdCLEVBQ2hCLGVBQWUsR0FFaEIsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFFL0IsTUFBTSxDQUFDLElBQU0sZ0JBQWdCLEdBQUcsZUFBZSxDQUFDO0FBRWhELE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQ2pDLFVBQUMsS0FBSyxJQUFLLE9BQUEsQ0FBQztJQUNWLElBQUksRUFBRTtRQUNKLGVBQWUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLO1FBQzNDLFlBQVksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUM5QixTQUFTLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFPO1FBQ25DLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLO1FBQ2pDLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVU7UUFDdkMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxPQUFPO1FBQzNCLGFBQWEsRUFBRSxZQUFZO1FBQzNCLFFBQVEsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUM1QixXQUFXLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDN0IsWUFBWSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzlCLFVBQVUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUM5QixhQUFhLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDbEMsTUFBTSxFQUFFLElBQUk7S0FDYjtDQUNGLENBQUMsRUFoQlMsQ0FnQlQsRUFDRixFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxDQUMzQixDQUFDO0FBV0YsTUFBTSxDQUFDLElBQU0sT0FBTyxHQUEyQixVQUFDLEVBUS9DO0lBUEMsSUFBQSxzQkFBUSxFQUNSLHdCQUFTLEVBQ1Qsc0JBQXNCLEVBQXRCLDJDQUFzQixFQUN0QixpQkFBb0IsRUFBcEIseUNBQW9CLEVBQ3BCLGFBQVUsRUFBViwrQkFBVSxFQUNWLGtCQUFNLEVBQ04sbUdBQVk7SUFFWixJQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFOUIsSUFBTSxrQkFBa0IsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0lBRTlDLElBQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQztRQUM5QixTQUFTLFdBQUE7UUFDVCxPQUFPLEVBQUUsY0FBYztRQUN2QixNQUFNLFFBQUE7S0FDUCxDQUFDLENBQUM7SUFFSCxLQUFLLENBQUMsU0FBUyxDQUFDO1FBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMzQixDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUV6QixPQUFPLENBQ0w7UUFDRSxvQkFBQyxnQkFBZ0IsZUFBSyxPQUFPLEdBQzFCLFVBQUMsY0FBYztZQUNkLE9BQUEsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxjQUFjLENBQUM7UUFBakUsQ0FBaUUsQ0FFbEQ7UUFDbkIsb0JBQUMsTUFBTTtZQUNMLG9CQUFDLGFBQWEsZUFDUixPQUFPLElBQ1gsRUFBRSxFQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQ2QsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUN4QyxPQUFPLEVBQ0wsT0FBTyxDQUFDLE9BQU87b0JBQ2IsQ0FBQyxDQUFDLGtCQUFrQjt3QkFDbEIsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRTt3QkFDaEIsQ0FBQyxDQUFDOzRCQUNFLE9BQU8sRUFBRSxDQUFDOzRCQUNWLFVBQVUsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7eUJBQzVCO29CQUNMLENBQUMsQ0FBQzt3QkFDRSxPQUFPLEVBQUUsQ0FBQztxQkFDWCxJQUVILFNBQVMsR0FFWixLQUFLLENBQ1EsQ0FDVCxDQUNSLENBQ0osQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvbnRTaXplcyB9IGZyb20gJy4uLy4uL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5JztcbmltcG9ydCB7IEdldENsYXNzZXMgfSBmcm9tICcuLi8uLi90eXBlVXRpbHMnO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJy4uLy4uL3N0eWxlcyc7XG5pbXBvcnQgeyBtb3Rpb24sIHVzZVJlZHVjZWRNb3Rpb24gfSBmcm9tICdmcmFtZXItbW90aW9uJztcbmltcG9ydCB7IFBvcnRhbCB9IGZyb20gJ3JlYWtpdC9Qb3J0YWwnO1xuaW1wb3J0IHtcbiAgVG9vbHRpcCBhcyBSZWFraXRUb29sdGlwLFxuICBUb29sdGlwUHJvcHMgYXMgUmVha2l0VG9vbHRpcFByb3BzLFxuICBUb29sdGlwUmVmZXJlbmNlLFxuICB1c2VUb29sdGlwU3RhdGUsXG4gIFRvb2x0aXBJbml0aWFsU3RhdGUsXG59IGZyb20gJ3JlYWtpdC9Ub29sdGlwJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgY29uc3QgVG9vbHRpcFN0eWxlc0tleSA9ICdDaHJvbWFUb29sdGlwJztcblxuZXhwb3J0IGNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoXG4gICh0aGVtZSkgPT4gKHtcbiAgICByb290OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuY29tbW9uLmJsYWNrLFxuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5weFRvUmVtKDQpLFxuICAgICAgYm94U2hhZG93OiB0aGVtZS5ib3hTaGFkb3dzLnRvb2x0aXAsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gICAgICBmb250U2l6ZTogZm9udFNpemVzLnRvb2x0aXAsXG4gICAgICBsZXR0ZXJTcGFjaW5nOiAnMC4wMjE4NzVlbScsXG4gICAgICBtYXhXaWR0aDogdGhlbWUucHhUb1JlbSg1MDApLFxuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMSksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMSksXG4gICAgICBwYWRkaW5nVG9wOiB0aGVtZS5zcGFjaW5nKDAuNSksXG4gICAgICBwYWRkaW5nQm90dG9tOiB0aGVtZS5zcGFjaW5nKDAuNzUpLFxuICAgICAgekluZGV4OiAxMzAwLFxuICAgIH0sXG4gIH0pLFxuICB7IG5hbWU6IFRvb2x0aXBTdHlsZXNLZXkgfVxuKTtcblxuZXhwb3J0IHR5cGUgVG9vbHRpcENsYXNzZXMgPSBHZXRDbGFzc2VzPHR5cGVvZiB1c2VTdHlsZXM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFRvb2x0aXBQcm9wc1xuICBleHRlbmRzIFBpY2s8UmVha2l0VG9vbHRpcFByb3BzLCAnY2xhc3NOYW1lJyB8ICdoaWRkZW4nIHwgJ3RpdGxlJz4sXG4gICAgUGljazxUb29sdGlwSW5pdGlhbFN0YXRlLCAncGxhY2VtZW50JyB8ICdndXR0ZXInPiB7XG4gIGNoaWxkcmVuPzogYW55O1xuICBkZWZhdWx0VmlzaWJsZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBUb29sdGlwOiBSZWFjdC5GQzxUb29sdGlwUHJvcHM+ID0gKHtcbiAgY2hpbGRyZW4sXG4gIGNsYXNzTmFtZSxcbiAgZGVmYXVsdFZpc2libGUgPSBmYWxzZSxcbiAgcGxhY2VtZW50ID0gJ2JvdHRvbScsXG4gIHRpdGxlID0gJycsXG4gIGd1dHRlcixcbiAgLi4ucm9vdFByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoe30pO1xuXG4gIGNvbnN0IHNob3VsZFJlZHVjZU1vdGlvbiA9IHVzZVJlZHVjZWRNb3Rpb24oKTtcblxuICBjb25zdCB0b29sdGlwID0gdXNlVG9vbHRpcFN0YXRlKHtcbiAgICBwbGFjZW1lbnQsXG4gICAgdmlzaWJsZTogZGVmYXVsdFZpc2libGUsXG4gICAgZ3V0dGVyLFxuICB9KTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHRvb2x0aXAucGxhY2UocGxhY2VtZW50KTtcbiAgfSwgW3BsYWNlbWVudCwgdG9vbHRpcF0pO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxUb29sdGlwUmVmZXJlbmNlIHsuLi50b29sdGlwfT5cbiAgICAgICAgeyhyZWZlcmVuY2VQcm9wcykgPT5cbiAgICAgICAgICBSZWFjdC5jbG9uZUVsZW1lbnQoUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbiksIHJlZmVyZW5jZVByb3BzKVxuICAgICAgICB9XG4gICAgICA8L1Rvb2x0aXBSZWZlcmVuY2U+XG4gICAgICA8UG9ydGFsPlxuICAgICAgICA8UmVha2l0VG9vbHRpcFxuICAgICAgICAgIHsuLi50b29sdGlwfVxuICAgICAgICAgIGFzPXttb3Rpb24uZGl2fVxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSl9XG4gICAgICAgICAgYW5pbWF0ZT17XG4gICAgICAgICAgICB0b29sdGlwLnZpc2libGVcbiAgICAgICAgICAgICAgPyBzaG91bGRSZWR1Y2VNb3Rpb25cbiAgICAgICAgICAgICAgICA/IHsgb3BhY2l0eTogMSB9XG4gICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IHsgZGVsYXk6IDAuNzUgfSxcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgey4uLnJvb3RQcm9wc31cbiAgICAgICAgPlxuICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgPC9SZWFraXRUb29sdGlwPlxuICAgICAgPC9Qb3J0YWw+XG4gICAgPC8+XG4gICk7XG59O1xuIl19