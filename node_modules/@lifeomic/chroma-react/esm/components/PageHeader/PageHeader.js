var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { makeStyles } from '../../styles';
import { Text } from '../Text';
export var PageHeaderStylesKey = 'ChromaPageHeader';
var capitalize = function (text) {
    return text.charAt(0).toUpperCase() + text.slice(1);
};
export var useStyles = makeStyles(function (theme) {
    var _a, _b, _c, _d, _e;
    return ({
        root: (_a = {
                display: 'flex',
                justifyContent: 'space-between',
                marginBottom: 0,
                minHeight: theme.pxToRem(82),
                paddingTop: theme.spacing(3)
            },
            _a[theme.breakpoints.down('sm')] = {
                flexWrap: 'wrap',
            },
            _a),
        topSpacing: {
            marginTop: theme.spacing(0.625),
        },
        alignCenter: {
            alignItems: 'center',
            paddingTop: 0,
        },
        marginNormal: {
            marginBottom: theme.spacing(4),
        },
        title: (_b = {
                flex: 1
            },
            _b[theme.breakpoints.down('sm')] = {
                flexBasis: 'auto',
            },
            _b),
        left: (_c = {
                flex: 1
            },
            _c[theme.breakpoints.down('sm')] = {
                flexBasis: 'auto',
            },
            _c),
        titleInverse: {
            color: theme.palette.common.white,
        },
        center: (_d = {
                display: 'flex',
                justifyContent: 'center',
                flex: 1
            },
            _d[theme.breakpoints.down('sm')] = {
                justifyContent: 'flex-start',
                flexBasis: '100%',
                margin: theme.spacing(2, 0, 4),
                order: 3,
            },
            _d),
        actions: (_e = {
                display: 'flex',
                justifyContent: 'flex-end',
                flex: 1
            },
            _e[theme.breakpoints.down('sm')] = {
                flexBasis: 'auto',
            },
            _e),
    });
}, { name: PageHeaderStylesKey });
export var PageHeader = React.forwardRef(function (_a, ref) {
    var _b, _c, _d, _e;
    var _f = _a.align, align = _f === void 0 ? 'top' : _f, margin = _a.margin, className = _a.className, title = _a.title, actions = _a.actions, _g = _a.center, center = _g === void 0 ? null : _g, _h = _a.centerClassName, centerClassName = _h === void 0 ? '' : _h, _j = _a.actionsClassName, actionsClassName = _j === void 0 ? '' : _j, additionalClasses = _a.classes, color = _a.color, left = _a.left, leftClassName = _a.leftClassName, rootProps = __rest(_a, ["align", "margin", "className", "title", "actions", "center", "centerClassName", "actionsClassName", "classes", "color", "left", "leftClassName"]);
    var classes = useStyles({ classes: additionalClasses });
    return (React.createElement("header", __assign({}, rootProps, { ref: ref, className: clsx(classes.root, (_b = {},
            _b[classes["margin" + capitalize(margin)]] = margin !== 'none',
            _b), (_c = {},
            _c[classes.alignCenter] = align === 'center',
            _c), className) }),
        !!left && (React.createElement("div", { className: clsx(classes.left, (_d = {},
                _d[classes.topSpacing] = align !== 'center',
                _d), leftClassName) }, left)),
        title && (React.createElement(Text, { className: clsx(classes.title, (_e = {},
                _e[classes.topSpacing] = align !== 'center',
                _e)), size: "headline", color: color }, title)),
        !!center && (React.createElement("div", { className: clsx(classes.center, centerClassName) }, center)),
        !!actions && (React.createElement("div", { className: clsx(classes.actions, actionsClassName) }, actions))));
});
PageHeader.defaultProps = {
    margin: 'none',
};
//# sourceMappingURL=data:application/json;base64,