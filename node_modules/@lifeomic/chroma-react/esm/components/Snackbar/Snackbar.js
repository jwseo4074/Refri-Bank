var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { makeStyles } from '../../styles';
import { motion, AnimatePresence, useReducedMotion } from 'framer-motion';
import { Text } from '../Text';
import clsx from 'clsx';
import * as React from 'react';
import { IconButton } from '../IconButton';
import { X } from '@lifeomic/chromicons';
export var SnackbarStylesKey = 'ChromaSnackbar';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        color: theme.palette.text.secondary,
        paddingTop: theme.spacing(1),
        paddingBottom: theme.spacing(1),
        paddingLeft: theme.spacing(2),
        paddingRight: theme.spacing(2),
        backgroundColor: theme.palette.common.white,
        borderRadius: 'unset',
        position: 'fixed',
        display: 'flex',
        alignItems: 'center',
        boxShadow: theme.boxShadows.tooltip,
        top: 0,
        right: 0,
        zIndex: 1500,
        pointerEvents: 'auto',
        '@media screen and (max-width: 480px)': {
            top: 'unset',
            bottom: 0,
            width: '100%',
        },
    },
    infoModifier: {
        borderLeft: "10px solid " + theme.palette.blue.main,
    },
    errorModifier: {
        borderLeft: "10px solid " + theme.palette.red.main,
    },
    warningModifier: {
        borderLeft: "10px solid " + theme.palette.yellow.main,
    },
    successModifier: {
        borderLeft: "10px solid " + theme.palette.green.main,
    },
    icon: {
        width: theme.pxToRem(16),
        height: theme.pxToRem(16),
        marginRight: theme.spacing(1),
    },
    title: {
        color: theme.palette.black[600],
    },
    closeButton: {
        marginLeft: theme.spacing(2),
        borderLeft: "1px solid " + theme.palette.divider,
    },
}); }, { name: SnackbarStylesKey });
export var Snackbar = React.forwardRef(function (_a, ref) {
    var _b;
    var className = _a.className, _c = _a.duration, duration = _c === void 0 ? 6000 : _c, Icon = _a.icon, _d = _a.isOpen, isOpen = _d === void 0 ? false : _d, _e = _a.allowDismiss, allowDismiss = _e === void 0 ? false : _e, onClose = _a.onClose, _f = _a.role, role = _f === void 0 ? 'status' : _f, _g = _a.statusType, statusType = _g === void 0 ? 'info' : _g, title = _a.title, children = _a.children, rootProps = __rest(_a, ["className", "duration", "icon", "isOpen", "allowDismiss", "onClose", "role", "statusType", "title", "children"]);
    var classes = useStyles({});
    var shouldReduceMotion = useReducedMotion();
    var _h = React.useState(duration), snackbarTimeout = _h[0], setSnackbarTimeout = _h[1];
    // Event handlers
    var onMouseEnter = function () { return setSnackbarTimeout(null); };
    var onMouseLeave = function () { return setSnackbarTimeout(duration); };
    var closeSnackbar = React.useCallback(function () {
        onClose && onClose();
    }, [onClose]);
    // Use a ref to close our Snackbar after the timeout
    var callbackRef = React.useRef();
    React.useEffect(function () {
        if (!callbackRef.current) {
            callbackRef.current = closeSnackbar;
        }
    }, [closeSnackbar]);
    React.useEffect(function () {
        // Ignore setting up a timer for the Snackbar
        // if one is not isOpen.
        if (!isOpen) {
            return;
        }
        var tick = function () {
            if (callbackRef.current) {
                callbackRef.current();
            }
        };
        if (snackbarTimeout) {
            var id_1 = setTimeout(tick, snackbarTimeout);
            return function () { return clearTimeout(id_1); };
        }
    }, [snackbarTimeout, isOpen]);
    return (React.createElement(AnimatePresence, { initial: false }, isOpen ? (React.createElement(motion.div, __assign({ ref: ref, className: clsx(classes.root, (_b = {},
            _b[classes.infoModifier] = statusType === 'info',
            _b[classes.errorModifier] = statusType === 'error',
            _b[classes.warningModifier] = statusType === 'warning',
            _b[classes.successModifier] = statusType === 'success',
            _b), className), "aria-live": role === 'alert' ? 'assertive' : 'polite', role: role, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, positionTransition: true, initial: shouldReduceMotion ? { opacity: 0 } : { opacity: 0, y: -40 }, animate: shouldReduceMotion
            ? { opacity: 1 }
            : {
                opacity: 1,
                y: 0,
            }, exit: shouldReduceMotion
            ? { opacity: 0 }
            : {
                opacity: 0,
                y: 60,
                transition: { duration: 0.25, ease: 'easeIn' },
            } }, rootProps),
        !!Icon && React.createElement(Icon, { role: "img", "aria-hidden": true, className: classes.icon }),
        children ? (children) : (React.createElement(Text, { className: classes.title }, title)),
        allowDismiss && (React.createElement(React.Fragment, null,
            React.createElement(IconButton, { className: classes.closeButton, "aria-label": "Close Notification", size: 0, paddingTop: 0, paddingBottom: 0, paddingRight: 0, icon: X, onClick: closeSnackbar }))))) : null));
});
//# sourceMappingURL=data:application/json;base64,