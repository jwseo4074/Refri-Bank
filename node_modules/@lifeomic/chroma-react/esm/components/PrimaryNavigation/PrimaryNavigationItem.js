var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { makeStyles } from '../../styles/index';
import { sideBarWidthCollapsed, useLayoutManager } from '../LayoutManager';
import { Pill } from '../Pill';
import { Text } from '../Text';
import { Tooltip } from '../Tooltip';
import { BETA_INITIAL_TRANSITION, BETA_ANIMATE_TRANSITION, BETA_EXIT_TRANSITION, } from './_private/common';
import { NavOrExternalLink } from './_private/NavOrExternalLink';
import { motion } from 'framer-motion';
export var PrimaryNavigationItemStylesKey = 'ChromaPrimaryNavigationItem';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        listStyle: 'none',
        padding: 0,
        margin: 0,
        position: 'relative',
    },
    link: {
        display: 'flex',
        alignItems: 'center',
        height: theme.pxToRem(47),
        color: 'inherit',
        textDecoration: 'none',
        transition: 'color 0.5s ease, opacity 0.5s ease',
        '&:hover': {
            color: 'var(--link-hover)',
            textDecoration: 'none',
            fallbacks: {
                color: 'inherit',
            },
        },
    },
    linkActive: {
        backgroundColor: 'var(--link-active-bg)',
        color: 'var(--link-active)',
        '&:hover': {
            color: 'var(--link-active)',
            opacity: 0.75,
        },
        fallbacks: {
            backgroundColor: theme.palette.action.active,
            color: theme.palette.primary[300],
        },
    },
    icon: {
        width: sideBarWidthCollapsed,
        flexShrink: 0,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        outline: 'none',
    },
    label: {
        alignSelf: 'center',
        color: 'inherit',
        flex: 1,
        letterSpacing: 0.15,
        lineHeight: 'unset',
        overflowX: 'hidden',
        paddingRight: theme.spacing(2.25),
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap',
    },
    labelBeta: {
        maxWidth: 120,
        paddingRight: 0,
    },
    beta: {
        margin: theme.spacing(0.125, 1, 0),
        position: 'absolute',
        right: theme.spacing(4),
        transform: 'scale(0.75)',
    },
}); }, { name: PrimaryNavigationItemStylesKey });
var text = {
    hide: { opacity: 0, x: 16, transition: { ease: 'easeIn' } },
    show: { opacity: 1, x: 0, transition: { ease: 'easeOut' } },
};
export var PrimaryNavigationItem = React.forwardRef(function (_a, ref) {
    var exact = _a.exact, icon = _a.icon, label = _a.label, to = _a.to, className = _a.className, additionalClasses = _a.classes, beta = _a.beta, betaLabelText = _a.betaLabelText, rootProps = __rest(_a, ["exact", "icon", "label", "to", "className", "classes", "beta", "betaLabelText"]);
    var classes = useStyles({ classes: additionalClasses });
    var isSidebarCollapsed = useLayoutManager().isSidebarCollapsed;
    return (React.createElement("li", __assign({ ref: ref, className: clsx(classes.root, className) }, rootProps),
        React.createElement(NavOrExternalLink, { exact: exact, className: classes.link, activeClassName: classes.linkActive, to: to },
            isSidebarCollapsed ? (React.createElement(Tooltip, { title: label, placement: "right", gutter: -4 },
                React.createElement("div", { className: classes.icon }, icon))) : (React.createElement("div", { className: classes.icon }, icon)),
            React.createElement(motion.div, { variants: text },
                React.createElement(Text, { size: "subbody", className: clsx(classes.label, beta && classes.labelBeta, className) }, label)),
            beta && !isSidebarCollapsed && (React.createElement(Pill, { variant: "highlight", label: betaLabelText, className: classes.beta, initial: BETA_INITIAL_TRANSITION, animate: BETA_ANIMATE_TRANSITION, exit: BETA_EXIT_TRANSITION })))));
});
//# sourceMappingURL=data:application/json;base64,