var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { makeStyles } from '../../styles/index';
import { sideBarWidthCollapsed, useLayoutManager } from '../LayoutManager';
import { Text } from '../Text';
import { inDuration, outDuration } from './_private/common';
import { NavOrExternalLink } from './_private/NavOrExternalLink';
import { motion } from 'framer-motion';
export var PrimaryNavigationSubItemStylesKey = 'ChromaPrimaryNavigationSubItem';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        listStyle: 'none',
        padding: 0,
        margin: 0,
    },
    link: {
        display: 'flex',
        alignItems: 'center',
        height: theme.pxToRem(32),
        color: 'inherit',
        textDecoration: 'none',
        transition: 'color 0.5s ease, opacity 0.5s ease',
        '&:hover': {
            color: 'var(--link-hover)',
            textDecoration: 'none',
            fallbacks: {
                color: 'inherit',
            },
        },
    },
    linkActive: {
        color: 'var(--link-active)',
        '&:hover': {
            color: 'var(--link-active)',
            opacity: 0.75,
        },
        fallbacks: {
            color: theme.palette.primary[300],
        },
    },
    spacer: {
        width: sideBarWidthCollapsed,
        flexShrink: 0,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
    },
    label: {
        alignSelf: 'center',
        color: 'inherit',
        flex: 1,
        letterSpacing: 0.15,
        lineHeight: 'unset',
        overflowX: 'hidden',
        paddingRight: theme.spacing(2.25),
        textOverflow: 'ellipsis',
    },
    tooltipPlacement: {
        marginLeft: theme.spacing(-2),
    },
}); }, { name: PrimaryNavigationSubItemStylesKey });
export var PrimaryNavigationSubItem = React.forwardRef(function (_a, ref) {
    var exact = _a.exact, label = _a.label, to = _a.to, className = _a.className, additionalClasses = _a.classes, rootProps = __rest(_a, ["exact", "label", "to", "className", "classes"]);
    var classes = useStyles({ classes: additionalClasses });
    var isSidebarCollapsed = useLayoutManager().isSidebarCollapsed;
    if (isSidebarCollapsed) {
        return null;
    }
    return (React.createElement(motion.li, __assign({ ref: ref, className: clsx(classes.root, className), initial: { opacity: 0 }, animate: { opacity: 1, transition: { duration: inDuration } }, exit: { opacity: 0, transition: { duration: outDuration } } }, rootProps),
        React.createElement(NavOrExternalLink, { exact: exact, className: classes.link, activeClassName: classes.linkActive, to: to },
            React.createElement("span", { role: "presentation", "aria-hidden": true, className: classes.spacer }),
            React.createElement(Text, { size: "subbody", className: classes.label }, label))));
});
//# sourceMappingURL=data:application/json;base64,