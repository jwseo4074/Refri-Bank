var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import 'focus-visible';
import { DotLoader } from '../DotLoader/index';
import { getTestProps } from '../../testUtils/getTestProps';
import { makeStyles } from '../../styles/index';
import { motion } from 'framer-motion';
import { TableHeaderCell } from './TableHeaderCell';
import { TableModuleRow } from './TableModuleRow';
import { warning } from '../../utils';
import * as React from 'react';
import clsx from 'clsx';
export var testIds = {
    bodyCell: 'tableModule-bodyCell',
    bodyRow: 'tableModule-bodyRow',
    headerCell: 'tableModule-headerCell',
    headerRow: 'tableModule-headerRow',
    isLoadingRow: 'tableModule-isLoadingRow',
    noResultsRow: 'tableModule-noResultsRow',
};
export var TableModuleStylesKey = 'ChromaTableModule';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        background: theme.palette.common.white,
        borderSpacing: 0,
        boxShadow: theme.boxShadows.table,
        display: 'table',
        overflowX: 'auto',
        width: '100%',
    },
    rounded: {
        borderRadius: theme.pxToRem(4),
    },
    tableHeader: {
        display: 'table-header-group',
    },
    tableRow: {
        background: theme.palette.common.white,
        color: 'inherit',
        display: 'table-row',
        outline: 'none',
        verticalAlign: 'middle',
        '&:hover': {
            '& $tableRowActionCell': {
                visibility: 'visible',
            },
        },
        '&:focus.focus-visible, &:focus-within': {
            '& $tableRowActionCell': {
                visibility: 'visible',
            },
        },
    },
    tableDataRow: {
        borderBottom: "1px solid ".concat(theme.palette.divider),
        '&:last-child': {
            borderBottom: 'none',
            // Hide table action cell bottom border
            // on the last table row to avoid 1px
            // vertical scroll
            '& $tableRowActionCell::after': {
                display: 'none',
            },
        },
        '&:hover': {
            background: "rgb(222, 244, 252, 0.25)",
            '& $tableModuleActions': {
                left: theme.pxToRem(8),
                opacity: 1,
                transition: '0.15s ease-out',
                transitionDelay: '0.15s',
            },
        },
        '&:focus.focus-visible, &:focus-within': {
            background: "rgb(222, 244, 252, 0.25)",
            '& $tableModuleActions': {
                left: theme.pxToRem(8),
                opacity: 1,
                transition: '0.15s ease-out',
                transitionDelay: '0.15s',
            },
        },
    },
    tableRowCell: {
        borderBottom: 'inherit',
        display: 'table-cell',
        fontSize: theme.typography.caption.fontSize,
        fontWeight: theme.typography.fontWeightRegular,
        paddingBottom: theme.spacing(1.75),
        paddingLeft: theme.spacing(2),
        paddingRight: theme.spacing(2),
        paddingTop: theme.spacing(1.75),
        textAlign: 'left',
        whiteSpace: 'nowrap',
        // First and last cells have default spacing
        // This matches the `TableHeaderCell`
        '&:first-of-type': {
            paddingLeft: theme.spacing(4),
        },
        '&:last-of-type': {
            paddingRight: theme.spacing(4),
        },
    },
    tableRowCellAlignRight: {
        textAlign: 'right',
    },
    tableRowCellTruncate: {
        textOverflow: 'ellipsis',
        overflow: 'hidden',
    },
    tableRowCellMaxWidth1: {
        maxWidth: '6.875rem',
    },
    tableRowCellMaxWidth2: {
        maxWidth: '10rem',
    },
    tableRowActionCell: {
        paddingTop: 0,
        paddingBottom: 0,
        paddingRight: 16,
        paddingLeft: 0,
        position: 'relative',
        textAlign: 'right',
        width: theme.pxToRem(1),
        // Add bottom border to table action row
        // when actions are hidden
        '&::after': {
            background: theme.palette.divider,
            content: "''",
            display: 'block',
            height: theme.pxToRem(1),
            left: 0,
            position: 'absolute',
            width: '100%',
            bottom: theme.pxToRem(-1),
        },
    },
    sticky: {
        position: 'sticky',
        right: 0,
    },
    tableModuleActions: {
        background: "linear-gradient(135deg,\n        ".concat(theme.palette.primary.light, " 0%,\n        ").concat(theme.palette.primary.main, " 22%,\n        ").concat(theme.palette.purple[700], " 92%)"),
        borderRadius: theme.pxToRem(16),
        boxShadow: theme.boxShadows.tooltip,
        display: 'inline-flex',
        minHeight: theme.pxToRem(32),
        left: 0,
        opacity: 0,
        paddingLeft: '0.75rem',
        paddingRight: '0.75rem',
        paddingTop: '0.2rem',
        paddingBottom: '0.2rem',
        position: 'relative',
        '& > button': {
            alignItems: 'center',
            justifyContent: 'center',
            minHeight: 0,
            // Add negative horizontal margins when there is
            // only one button so container appears as circle
            // instead of a pill shape
            '&:only-of-type': {
                marginLeft: theme.spacing(-0.375),
                marginRight: theme.spacing(-0.375),
            },
        },
    },
    tableLoadingCell: {
        borderBottom: 'inherit',
        display: 'table-cell',
        paddingBottom: theme.spacing(1),
        paddingLeft: theme.spacing(4),
        paddingTop: theme.spacing(1),
    },
    clickable: {
        '&:hover': {
            cursor: 'pointer',
        },
    },
}); }, { name: TableModuleStylesKey });
export var TableModule = React.memo(function (_a) {
    var _b = _a.config, config = _b === void 0 ? [] : _b, className = _a.className, data = _a.data, onRowClick = _a.onRowClick, _c = _a.isLoading, isLoading = _c === void 0 ? false : _c, rowRole = _a.rowRole, noResultsMessage = _a.noResultsMessage, _d = _a.sortState, sortState = _d === void 0 ? { sortKey: null, sortDirection: null } : _d, maxCellWidth = _a.maxCellWidth, rowActions = _a.rowActions, rowClickLabel = _a.rowClickLabel, rootProps = __rest(_a, ["config", "className", "data", "onRowClick", "isLoading", "rowRole", "noResultsMessage", "sortState", "maxCellWidth", "rowActions", "rowClickLabel"]);
    var classes = useStyles({});
    warning(Boolean(onRowClick) &&
        !rowClickLabel &&
        process.env.NODE_ENV === 'development', 'Chroma Warning: It is recommended you provide "rowClickLabel" if specifying a "onRowClick" for the <TableModule> component. This will be a required prop in a future major version.');
    var _e = React.useState(sortState), sort = _e[0], setSort = _e[1];
    var _f = React.useState((config === null || config === void 0 ? void 0 : config.map(function (c) { return c.header; })) || []), headings = _f[0], setHeadings = _f[1];
    var _g = React.useState((config === null || config === void 0 ? void 0 : config.map(function (c) { return c.cell; })) || []), cells = _g[0], setCells = _g[1];
    React.useEffect(function () {
        if (config.length > 0) {
            setHeadings(config.map(function (c) { return c.header; }));
            setCells(config.map(function (c) { return c.cell; }));
        }
    }, [config]);
    React.useEffect(function () {
        if (sortState.sortKey && headings) {
            var column = headings && headings[sortState.sortKey];
            column.onSort &&
                column.onSort({
                    index: sortState.sortKey,
                    sortDirection: sortState.sortDirection,
                    header: column,
                });
        }
    }, [headings, sortState.sortDirection, sortState.sortKey]);
    var handleSortColumnClick = function (_a) {
        var index = _a.index, sortDirection = _a.sortDirection, header = _a.header;
        // A column was clicked, and we either don't have a sort setup yet,
        // or we are moving from one column to another
        if (sort.sortKey !== index) {
            setSort({ sortKey: index, sortDirection: 'asc' });
            header.onSort && header.onSort({ index: index, sortDirection: 'asc', header: header });
            return;
        }
        // The same column was clicked, so we need to figure out
        // the sorting direction now
        if (!sortDirection) {
            setSort({ sortKey: index, sortDirection: 'asc' });
            header.onSort && header.onSort({ index: index, sortDirection: 'asc', header: header });
            return;
        }
        if (sortDirection === 'asc') {
            setSort({ sortKey: index, sortDirection: 'desc' });
            header.onSort &&
                header.onSort({ index: index, sortDirection: 'desc', header: header });
            return;
        }
        if (sortDirection === 'desc') {
            setSort({ sortKey: index, sortDirection: null });
            header.onSort && header.onSort({ index: index, sortDirection: null, header: header });
            return;
        }
    };
    return (React.createElement("table", __assign({ role: "table", className: clsx(classes.root, className) }, rootProps),
        React.createElement("thead", { className: classes.tableHeader },
            React.createElement("tr", __assign({ className: classes.tableRow, role: "row" }, getTestProps(testIds.headerRow)), headings === null || headings === void 0 ? void 0 :
                headings.map(function (header, i) { return (React.createElement(TableHeaderCell, __assign({ index: i, headingsCount: headings.length, key: i, header: header, isSorting: sort.sortKey === i, sortDirection: sort.sortDirection, onClick: handleSortColumnClick }, getTestProps(testIds.headerCell)))); }),
                (rowActions || onRowClick) && (React.createElement(TableHeaderCell, { header: {
                        label: '',
                    }, index: (headings === null || headings === void 0 ? void 0 : headings.length) + 1, headingsCount: headings.length, isSorting: false, sortDirection: sort.sortDirection })))),
        React.createElement("tbody", { role: "rowgroup" },
            !isLoading && data && data.length === 0 && (React.createElement("tr", __assign({ className: clsx(classes.tableRow, classes.tableDataRow), role: "row" }, getTestProps(testIds.noResultsRow)),
                React.createElement(motion.td, { className: classes.tableRowCell, colSpan: headings.length, role: "cell", initial: { opacity: 0 }, animate: { opacity: 1, transition: { duration: 1.5 } } }, noResultsMessage || 'No results'))), data === null || data === void 0 ? void 0 :
            data.map(function (row, rowIndex) {
                return (React.createElement(TableModuleRow, { key: "tableRow-".concat(rowIndex), data: row, onRowClick: onRowClick, rowRole: rowRole, maxCellWidth: maxCellWidth, row: row, headingsLength: headings === null || headings === void 0 ? void 0 : headings.length, cells: cells, rowActions: rowActions, rowClickLabel: rowClickLabel }));
            }),
            isLoading && (React.createElement("tr", __assign({ className: classes.tableRow }, getTestProps(testIds.isLoadingRow)),
                React.createElement("td", { className: classes.tableLoadingCell, colSpan: headings.length },
                    React.createElement(DotLoader, { size: 0 })))))));
});
//# sourceMappingURL=data:application/json;base64,