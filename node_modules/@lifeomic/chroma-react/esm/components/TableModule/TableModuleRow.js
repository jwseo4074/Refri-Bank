var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import clsx from 'clsx';
import * as React from 'react';
import { useStyles } from './TableModule';
import { getTestProps } from '../../testUtils/getTestProps';
import { testIds } from './TableModule';
import { TableModuleCell } from './TableModuleCell';
import { TableModuleActions } from './TableModuleActions';
import { IconButton } from '../IconButton';
import { ChevronRight } from '@lifeomic/chromicons';
import { Tooltip } from '../Tooltip';
var TableModuleRow = React.memo(function (_a) {
    var onRowClick = _a.onRowClick, rowRole = _a.rowRole, row = _a.row, maxCellWidth = _a.maxCellWidth, headingsLength = _a.headingsLength, cells = _a.cells, rowActions = _a.rowActions, rowClickLabel = _a.rowClickLabel;
    var classes = useStyles({});
    var handleRowClick = React.useCallback(function (e) {
        var _a, _b, _c, _d, _e, _f, _g;
        /*
          :'(

          It appears we have to add this ugly check due to the way our Checkbox works.
          It's likely a thing with framer-motion, as the native <input type="checkbox" does not
          run into this problem.

          Anyway, without this check, the order of events is:
          1) Row click handler
          2) Checkbox handler

          Whereas what we *need* is the checkbox handler to run *first*, and then we would
          stopPropagation() from within the checkbox onClick event.  Since we can't do that,
          for whatever reason with our Checkbox component, we are doing this check.
        */
        if (((_a = e.target) === null || _a === void 0 ? void 0 : _a.tagName) === 'path' &&
            ((_c = (_b = e.target) === null || _b === void 0 ? void 0 : _b.parentElement) === null || _c === void 0 ? void 0 : _c.tagName) === 'svg' &&
            ((_f = (_e = (_d = e.target) === null || _d === void 0 ? void 0 : _d.parentElement) === null || _e === void 0 ? void 0 : _e.parentElement) === null || _f === void 0 ? void 0 : _f.tagName) === 'LABEL') {
            return;
        }
        (_g = e === null || e === void 0 ? void 0 : e.currentTarget) === null || _g === void 0 ? void 0 : _g.blur();
        onRowClick === null || onRowClick === void 0 ? void 0 : onRowClick(row);
    }, [onRowClick, row]);
    var rowContents = React.useMemo(function () { return cells === null || cells === void 0 ? void 0 : cells.map(function (cell, colIndex) {
        var cellContent = cell.content
            ? cell.content(row)
            : cell.valuePath && row[cell.valuePath];
        return (React.createElement(TableModuleCell, { key: "column-" + colIndex, maxCellWidth: maxCellWidth, isLastCellInRow: headingsLength > 1 && colIndex === headingsLength - 1, cell: cell }, cellContent));
    }); }, [cells, headingsLength, maxCellWidth, row]);
    var maybeRowActions = React.useMemo(function () { return rowActions === null || rowActions === void 0 ? void 0 : rowActions(row); }, [
        row,
        rowActions,
    ]);
    return (React.createElement("tr", __assign({ className: clsx(classes.tableRow, classes.tableDataRow, onRowClick && classes.clickable), onClick: handleRowClick, role: rowRole || 'row', tabIndex: 0 }, getTestProps(testIds.bodyRow)),
        rowContents,
        (onRowClick || rowActions) && (React.createElement("td", { className: clsx(classes.tableRowCell, classes.tableRowActionCell, classes.sticky), role: "cell" }, (Boolean(maybeRowActions) || onRowClick) && (React.createElement(TableModuleActions, { className: classes.tableModuleActions, tabIndex: 0 },
            maybeRowActions,
            onRowClick && (React.createElement(Tooltip, { title: rowClickLabel || 'View Details' },
                React.createElement(IconButton, { "aria-label": rowClickLabel || 'View Details', icon: ChevronRight, color: "inverse", onClick: function (e) {
                        e.stopPropagation();
                        e.currentTarget.blur();
                        onRowClick === null || onRowClick === void 0 ? void 0 : onRowClick(row);
                    } })))))))));
});
TableModuleRow.displayName = 'TableModuleRow';
export { TableModuleRow };
//# sourceMappingURL=data:application/json;base64,