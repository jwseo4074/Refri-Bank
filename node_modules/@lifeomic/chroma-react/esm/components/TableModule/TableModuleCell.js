var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { getTestProps } from '../../testUtils/getTestProps';
import { useStyles, testIds } from './TableModule';
import * as React from 'react';
import clsx from 'clsx';
export var TableModuleCell = React.memo(function (_a) {
    var _b;
    var maxCellWidth = _a.maxCellWidth, isLastCellInRow = _a.isLastCellInRow, cell = _a.cell, children = _a.children;
    var classes = useStyles({});
    return (React.createElement("td", __assign({ 
        // Rules of alignment:
        // - `cell.align` wins over default behavior
        // - If this is the first cell and there is only one column for the table
        //   then it is left-aligned
        // - If this is the last cell and there is more than one column, then
        //   it is right-aligned
        // - Allow for left alignment override on last cell
        // - Fallback behavior is left aligned (specified by tableRowCell class)
        className: clsx(classes.tableRowCell, ((isLastCellInRow && (cell === null || cell === void 0 ? void 0 : cell.align) !== 'left') ||
            (cell === null || cell === void 0 ? void 0 : cell.align) === 'right') &&
            classes.tableRowCellAlignRight, maxCellWidth && classes.tableRowCellTruncate, (_b = {},
            _b[classes.tableRowCellMaxWidth1] = maxCellWidth === 1,
            _b[classes.tableRowCellMaxWidth2] = maxCellWidth === 2,
            _b), cell.className), role: "cell" }, getTestProps(testIds.bodyCell)), children));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFibGVNb2R1bGVDZWxsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVGFibGVNb2R1bGUvVGFibGVNb2R1bGVDZWxsLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUU1RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFheEIsTUFBTSxDQUFDLElBQU0sZUFBZSxHQUE4QixLQUFLLENBQUMsSUFBSSxDQUNsRSxVQUFDLEVBQWlEOztRQUEvQyw4QkFBWSxFQUFFLG9DQUFlLEVBQUUsY0FBSSxFQUFFLHNCQUFRO0lBQzlDLElBQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUU5QixPQUFPLENBQ0w7UUFDRSxzQkFBc0I7UUFDdEIsNENBQTRDO1FBQzVDLHlFQUF5RTtRQUN6RSw0QkFBNEI7UUFDNUIscUVBQXFFO1FBQ3JFLHdCQUF3QjtRQUN4QixtREFBbUQ7UUFDbkQsd0VBQXdFO1FBQ3hFLFNBQVMsRUFBRSxJQUFJLENBQ2IsT0FBTyxDQUFDLFlBQVksRUFDcEIsQ0FBQyxDQUFDLGVBQWUsSUFBSSxDQUFBLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxLQUFLLE1BQUssTUFBTSxDQUFDO1lBQzFDLENBQUEsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLEtBQUssTUFBSyxPQUFPLENBQUM7WUFDeEIsT0FBTyxDQUFDLHNCQUFzQixFQUNoQyxZQUFZLElBQUksT0FBTyxDQUFDLG9CQUFvQjtZQUUxQyxHQUFDLE9BQU8sQ0FBQyxxQkFBcUIsSUFBRyxZQUFZLEtBQUssQ0FBQztZQUNuRCxHQUFDLE9BQU8sQ0FBQyxxQkFBcUIsSUFBRyxZQUFZLEtBQUssQ0FBQztpQkFFckQsSUFBSSxDQUFDLFNBQVMsQ0FDZixFQUNELElBQUksRUFBQyxNQUFNLElBQ1AsWUFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FFakMsUUFBUSxDQUNOLENBQ04sQ0FBQztBQUNKLENBQUMsQ0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0VGVzdFByb3BzIH0gZnJvbSAnLi4vLi4vdGVzdFV0aWxzL2dldFRlc3RQcm9wcyc7XG5pbXBvcnQgeyBUYWJsZUNlbGwgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IHVzZVN0eWxlcywgdGVzdElkcyB9IGZyb20gJy4vVGFibGVNb2R1bGUnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFibGVNb2R1bGVDZWxsXG4gIGV4dGVuZHMgUmVhY3QuRGV0YWlsZWRIVE1MUHJvcHM8XG4gICAgUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTFRhYmxlRWxlbWVudD4sXG4gICAgSFRNTFRhYmxlRWxlbWVudFxuICA+IHtcbiAgY2hpbGRyZW46IGFueTtcbiAgbWF4Q2VsbFdpZHRoPzogMSB8IDI7XG4gIGlzTGFzdENlbGxJblJvdzogYm9vbGVhbjtcbiAgY2VsbDogVGFibGVDZWxsO1xufVxuXG5leHBvcnQgY29uc3QgVGFibGVNb2R1bGVDZWxsOiBSZWFjdC5GQzxUYWJsZU1vZHVsZUNlbGw+ID0gUmVhY3QubWVtbyhcbiAgKHsgbWF4Q2VsbFdpZHRoLCBpc0xhc3RDZWxsSW5Sb3csIGNlbGwsIGNoaWxkcmVuIH0pID0+IHtcbiAgICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKHt9KTtcblxuICAgIHJldHVybiAoXG4gICAgICA8dGRcbiAgICAgICAgLy8gUnVsZXMgb2YgYWxpZ25tZW50OlxuICAgICAgICAvLyAtIGBjZWxsLmFsaWduYCB3aW5zIG92ZXIgZGVmYXVsdCBiZWhhdmlvclxuICAgICAgICAvLyAtIElmIHRoaXMgaXMgdGhlIGZpcnN0IGNlbGwgYW5kIHRoZXJlIGlzIG9ubHkgb25lIGNvbHVtbiBmb3IgdGhlIHRhYmxlXG4gICAgICAgIC8vICAgdGhlbiBpdCBpcyBsZWZ0LWFsaWduZWRcbiAgICAgICAgLy8gLSBJZiB0aGlzIGlzIHRoZSBsYXN0IGNlbGwgYW5kIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgY29sdW1uLCB0aGVuXG4gICAgICAgIC8vICAgaXQgaXMgcmlnaHQtYWxpZ25lZFxuICAgICAgICAvLyAtIEFsbG93IGZvciBsZWZ0IGFsaWdubWVudCBvdmVycmlkZSBvbiBsYXN0IGNlbGxcbiAgICAgICAgLy8gLSBGYWxsYmFjayBiZWhhdmlvciBpcyBsZWZ0IGFsaWduZWQgKHNwZWNpZmllZCBieSB0YWJsZVJvd0NlbGwgY2xhc3MpXG4gICAgICAgIGNsYXNzTmFtZT17Y2xzeChcbiAgICAgICAgICBjbGFzc2VzLnRhYmxlUm93Q2VsbCxcbiAgICAgICAgICAoKGlzTGFzdENlbGxJblJvdyAmJiBjZWxsPy5hbGlnbiAhPT0gJ2xlZnQnKSB8fFxuICAgICAgICAgICAgY2VsbD8uYWxpZ24gPT09ICdyaWdodCcpICYmXG4gICAgICAgICAgICBjbGFzc2VzLnRhYmxlUm93Q2VsbEFsaWduUmlnaHQsXG4gICAgICAgICAgbWF4Q2VsbFdpZHRoICYmIGNsYXNzZXMudGFibGVSb3dDZWxsVHJ1bmNhdGUsXG4gICAgICAgICAge1xuICAgICAgICAgICAgW2NsYXNzZXMudGFibGVSb3dDZWxsTWF4V2lkdGgxXTogbWF4Q2VsbFdpZHRoID09PSAxLFxuICAgICAgICAgICAgW2NsYXNzZXMudGFibGVSb3dDZWxsTWF4V2lkdGgyXTogbWF4Q2VsbFdpZHRoID09PSAyLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2VsbC5jbGFzc05hbWVcbiAgICAgICAgKX1cbiAgICAgICAgcm9sZT1cImNlbGxcIlxuICAgICAgICB7Li4uZ2V0VGVzdFByb3BzKHRlc3RJZHMuYm9keUNlbGwpfVxuICAgICAgPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L3RkPlxuICAgICk7XG4gIH1cbik7XG4iXX0=