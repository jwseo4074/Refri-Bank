var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Divider } from '../Divider';
import { makeStyles } from '../../styles';
import * as React from 'react';
import clsx from 'clsx';
export var TableActionDividerStylesKey = 'ChromaTableActionDivider';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        height: theme.pxToRem(19),
        margin: "0 ".concat(theme.pxToRem(16), " 0 0"),
        top: theme.pxToRem(4),
        position: 'relative',
    },
}); }, { name: TableActionDividerStylesKey });
export var TableActionDivider = function (_a) {
    var className = _a.className, rootProps = __rest(_a, ["className"]);
    var classes = useStyles({});
    return (React.createElement(Divider, __assign({ className: clsx(classes.root, className), color: "inverse", direction: "row" }, rootProps)));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFibGVBY3Rpb25EaXZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVGFibGVNb2R1bGUvVGFibGVBY3Rpb25EaXZpZGVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUVyQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzFDLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUV4QixNQUFNLENBQUMsSUFBTSwyQkFBMkIsR0FBRywwQkFBMEIsQ0FBQztBQUV0RSxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsVUFBVSxDQUNqQyxVQUFDLEtBQUssSUFBSyxPQUFBLENBQUM7SUFDVixJQUFJLEVBQUU7UUFDSixNQUFNLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDekIsTUFBTSxFQUFFLFlBQUssS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsU0FBTTtRQUNwQyxHQUFHLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDckIsUUFBUSxFQUFFLFVBQVU7S0FDckI7Q0FDRixDQUFDLEVBUFMsQ0FPVCxFQUNGLEVBQUUsSUFBSSxFQUFFLDJCQUEyQixFQUFFLENBQ3RDLENBQUM7QUFRRixNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBc0MsVUFBQyxFQUdyRTtJQUZDLElBQUEsU0FBUyxlQUFBLEVBQ04sU0FBUyxjQUZ3RCxhQUdyRSxDQURhO0lBRVosSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLE9BQU8sQ0FDTCxvQkFBQyxPQUFPLGFBQ04sU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUN4QyxLQUFLLEVBQUMsU0FBUyxFQUNmLFNBQVMsRUFBQyxLQUFLLElBQ1gsU0FBUyxFQUNiLENBQ0gsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpdmlkZXIgfSBmcm9tICcuLi9EaXZpZGVyJztcbmltcG9ydCB7IEdldENsYXNzZXMgfSBmcm9tICcuLi8uLi90eXBlVXRpbHMnO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJy4uLy4uL3N0eWxlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcblxuZXhwb3J0IGNvbnN0IFRhYmxlQWN0aW9uRGl2aWRlclN0eWxlc0tleSA9ICdDaHJvbWFUYWJsZUFjdGlvbkRpdmlkZXInO1xuXG5leHBvcnQgY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhcbiAgKHRoZW1lKSA9PiAoe1xuICAgIHJvb3Q6IHtcbiAgICAgIGhlaWdodDogdGhlbWUucHhUb1JlbSgxOSksXG4gICAgICBtYXJnaW46IGAwICR7dGhlbWUucHhUb1JlbSgxNil9IDAgMGAsXG4gICAgICB0b3A6IHRoZW1lLnB4VG9SZW0oNCksXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICB9LFxuICB9KSxcbiAgeyBuYW1lOiBUYWJsZUFjdGlvbkRpdmlkZXJTdHlsZXNLZXkgfVxuKTtcblxuZXhwb3J0IHR5cGUgVGFibGVBY3Rpb25EaXZpZGVyQ2xhc3NlcyA9IEdldENsYXNzZXM8dHlwZW9mIHVzZVN0eWxlcz47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFibGVBY3Rpb25EaXZpZGVyUHJvcHMge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBUYWJsZUFjdGlvbkRpdmlkZXI6IFJlYWN0LkZDPFRhYmxlQWN0aW9uRGl2aWRlclByb3BzPiA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgLi4ucm9vdFByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoe30pO1xuICByZXR1cm4gKFxuICAgIDxEaXZpZGVyXG4gICAgICBjbGFzc05hbWU9e2Nsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpfVxuICAgICAgY29sb3I9XCJpbnZlcnNlXCJcbiAgICAgIGRpcmVjdGlvbj1cInJvd1wiXG4gICAgICB7Li4ucm9vdFByb3BzfVxuICAgIC8+XG4gICk7XG59O1xuIl19