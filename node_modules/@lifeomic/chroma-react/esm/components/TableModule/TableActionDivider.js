var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Divider } from '../Divider';
import { makeStyles } from '../../styles';
import * as React from 'react';
import clsx from 'clsx';
export var TableActionDividerStylesKey = 'ChromaTableActionDivider';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        height: theme.pxToRem(19),
        margin: "0 " + theme.pxToRem(16) + " 0 0",
        top: theme.pxToRem(4),
        position: 'relative',
    },
}); }, { name: TableActionDividerStylesKey });
export var TableActionDivider = function (_a) {
    var className = _a.className, rootProps = __rest(_a, ["className"]);
    var classes = useStyles({});
    return (React.createElement(Divider, __assign({ className: clsx(classes.root, className), color: "inverse", direction: "row" }, rootProps)));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFibGVBY3Rpb25EaXZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVGFibGVNb2R1bGUvVGFibGVBY3Rpb25EaXZpZGVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUVyQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzFDLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUV4QixNQUFNLENBQUMsSUFBTSwyQkFBMkIsR0FBRywwQkFBMEIsQ0FBQztBQUV0RSxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsVUFBVSxDQUNqQyxVQUFDLEtBQUssSUFBSyxPQUFBLENBQUM7SUFDVixJQUFJLEVBQUU7UUFDSixNQUFNLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDekIsTUFBTSxFQUFFLE9BQUssS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsU0FBTTtRQUNwQyxHQUFHLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDckIsUUFBUSxFQUFFLFVBQVU7S0FDckI7Q0FDRixDQUFDLEVBUFMsQ0FPVCxFQUNGLEVBQUUsSUFBSSxFQUFFLDJCQUEyQixFQUFFLENBQ3RDLENBQUM7QUFRRixNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBc0MsVUFBQyxFQUdyRTtJQUZDLElBQUEsd0JBQVMsRUFDVCxxQ0FBWTtJQUVaLElBQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM5QixPQUFPLENBQ0wsb0JBQUMsT0FBTyxhQUNOLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsRUFDeEMsS0FBSyxFQUFDLFNBQVMsRUFDZixTQUFTLEVBQUMsS0FBSyxJQUNYLFNBQVMsRUFDYixDQUNILENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXZpZGVyIH0gZnJvbSAnLi4vRGl2aWRlcic7XG5pbXBvcnQgeyBHZXRDbGFzc2VzIH0gZnJvbSAnLi4vLi4vdHlwZVV0aWxzJztcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICcuLi8uLi9zdHlsZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5cbmV4cG9ydCBjb25zdCBUYWJsZUFjdGlvbkRpdmlkZXJTdHlsZXNLZXkgPSAnQ2hyb21hVGFibGVBY3Rpb25EaXZpZGVyJztcblxuZXhwb3J0IGNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoXG4gICh0aGVtZSkgPT4gKHtcbiAgICByb290OiB7XG4gICAgICBoZWlnaHQ6IHRoZW1lLnB4VG9SZW0oMTkpLFxuICAgICAgbWFyZ2luOiBgMCAke3RoZW1lLnB4VG9SZW0oMTYpfSAwIDBgLFxuICAgICAgdG9wOiB0aGVtZS5weFRvUmVtKDQpLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgfSxcbiAgfSksXG4gIHsgbmFtZTogVGFibGVBY3Rpb25EaXZpZGVyU3R5bGVzS2V5IH1cbik7XG5cbmV4cG9ydCB0eXBlIFRhYmxlQWN0aW9uRGl2aWRlckNsYXNzZXMgPSBHZXRDbGFzc2VzPHR5cGVvZiB1c2VTdHlsZXM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlQWN0aW9uRGl2aWRlclByb3BzIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgVGFibGVBY3Rpb25EaXZpZGVyOiBSZWFjdC5GQzxUYWJsZUFjdGlvbkRpdmlkZXJQcm9wcz4gPSAoe1xuICBjbGFzc05hbWUsXG4gIC4uLnJvb3RQcm9wc1xufSkgPT4ge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKHt9KTtcbiAgcmV0dXJuIChcbiAgICA8RGl2aWRlclxuICAgICAgY2xhc3NOYW1lPXtjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKX1cbiAgICAgIGNvbG9yPVwiaW52ZXJzZVwiXG4gICAgICBkaXJlY3Rpb249XCJyb3dcIlxuICAgICAgey4uLnJvb3RQcm9wc31cbiAgICAvPlxuICApO1xufTtcbiJdfQ==