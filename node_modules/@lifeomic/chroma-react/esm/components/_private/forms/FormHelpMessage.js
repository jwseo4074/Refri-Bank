var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { makeStyles } from '../../../styles';
import { Text } from '../../Text';
export var FormHelpMessageStylesKey = 'ChromaFormHelpMessage';
var useStyles = makeStyles(function (theme) { return ({
    root: {
        color: theme.palette.text.hint,
        lineHeight: 1.25,
        marginTop: theme.spacing(0.375),
    },
    inverse: {
        color: theme.palette.common.white,
        opacity: 0.9,
    },
}); }, { name: FormHelpMessageStylesKey });
export var FormHelpMessage = function (_a) {
    var className = _a.className, color = _a.color, children = _a.children, rootElementId = _a.rootElementId, describedById = _a.describedById, rootProps = __rest(_a, ["className", "color", "children", "rootElementId", "describedById"]);
    var classes = useStyles({});
    return (React.createElement(Text, __assign({ size: "caption", "help-for": rootElementId, id: describedById, className: clsx(classes.root, color === 'inverse' && classes.inverse, className) }, rootProps), children));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9ybUhlbHBNZXNzYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvX3ByaXZhdGUvZm9ybXMvRm9ybUhlbHBNZXNzYWdlLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUU3QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBR2xDLE1BQU0sQ0FBQyxJQUFNLHdCQUF3QixHQUFHLHVCQUF1QixDQUFDO0FBRWhFLElBQU0sU0FBUyxHQUFHLFVBQVUsQ0FDMUIsVUFBQyxLQUFLLElBQUssT0FBQSxDQUFDO0lBQ1YsSUFBSSxFQUFFO1FBQ0osS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUk7UUFDOUIsVUFBVSxFQUFFLElBQUk7UUFDaEIsU0FBUyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0tBQ2hDO0lBQ0QsT0FBTyxFQUFFO1FBQ1AsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUs7UUFDakMsT0FBTyxFQUFFLEdBQUc7S0FDYjtDQUNGLENBQUMsRUFWUyxDQVVULEVBQ0YsRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsQ0FDbkMsQ0FBQztBQU1GLE1BQU0sQ0FBQyxJQUFNLGVBQWUsR0FBbUMsVUFBQyxFQU8vRDtJQU5DLElBQUEsd0JBQVMsRUFDVCxnQkFBSyxFQUNMLHNCQUFRLEVBQ1IsZ0NBQWEsRUFDYixnQ0FBYSxFQUNiLDRGQUFZO0lBRVosSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLE9BQU8sQ0FDTCxvQkFBQyxJQUFJLGFBQ0gsSUFBSSxFQUFDLFNBQVMsY0FDSixhQUFhLEVBQ3ZCLEVBQUUsRUFBRSxhQUFhLEVBQ2pCLFNBQVMsRUFBRSxJQUFJLENBQ2IsT0FBTyxDQUFDLElBQUksRUFDWixLQUFLLEtBQUssU0FBUyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQ3RDLFNBQVMsQ0FDVixJQUNHLFNBQVMsR0FFWixRQUFRLENBQ0osQ0FDUixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnLi4vLi4vLi4vc3R5bGVzJztcbmltcG9ydCB7IEdldENsYXNzZXMgfSBmcm9tICcuLi8uLi8uLi90eXBlVXRpbHMnO1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uL1RleHQnO1xuaW1wb3J0IHsgQmFzZUZvcm1NZXNzYWdlIH0gZnJvbSAnLi9Gb3JtRWxlbWVudFV0aWxzJztcblxuZXhwb3J0IGNvbnN0IEZvcm1IZWxwTWVzc2FnZVN0eWxlc0tleSA9ICdDaHJvbWFGb3JtSGVscE1lc3NhZ2UnO1xuXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAodGhlbWUpID0+ICh7XG4gICAgcm9vdDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5oaW50LFxuICAgICAgbGluZUhlaWdodDogMS4yNSxcbiAgICAgIG1hcmdpblRvcDogdGhlbWUuc3BhY2luZygwLjM3NSksXG4gICAgfSxcbiAgICBpbnZlcnNlOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICBvcGFjaXR5OiAwLjksXG4gICAgfSxcbiAgfSksXG4gIHsgbmFtZTogRm9ybUhlbHBNZXNzYWdlU3R5bGVzS2V5IH1cbik7XG5cbmV4cG9ydCB0eXBlIEZvcm1IZWxwTWVzc2FnZUNsYXNzZXMgPSBHZXRDbGFzc2VzPHR5cGVvZiB1c2VTdHlsZXM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEZvcm1IZWxwTWVzc2FnZVByb3BzIGV4dGVuZHMgQmFzZUZvcm1NZXNzYWdlIHt9XG5cbmV4cG9ydCBjb25zdCBGb3JtSGVscE1lc3NhZ2U6IFJlYWN0LkZDPEZvcm1IZWxwTWVzc2FnZVByb3BzPiA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgY29sb3IsXG4gIGNoaWxkcmVuLFxuICByb290RWxlbWVudElkLFxuICBkZXNjcmliZWRCeUlkLFxuICAuLi5yb290UHJvcHNcbn0pID0+IHtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcyh7fSk7XG4gIHJldHVybiAoXG4gICAgPFRleHRcbiAgICAgIHNpemU9XCJjYXB0aW9uXCJcbiAgICAgIGhlbHAtZm9yPXtyb290RWxlbWVudElkfVxuICAgICAgaWQ9e2Rlc2NyaWJlZEJ5SWR9XG4gICAgICBjbGFzc05hbWU9e2Nsc3goXG4gICAgICAgIGNsYXNzZXMucm9vdCxcbiAgICAgICAgY29sb3IgPT09ICdpbnZlcnNlJyAmJiBjbGFzc2VzLmludmVyc2UsXG4gICAgICAgIGNsYXNzTmFtZVxuICAgICAgKX1cbiAgICAgIHsuLi5yb290UHJvcHN9XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvVGV4dD5cbiAgKTtcbn07XG4iXX0=