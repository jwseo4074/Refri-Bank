/**
 * A utility function to build the `aria-describedby` attribute.
 *
 * @param hasError - Boolean to define if component has an error
 * @param hasHelpMessage - Boolean to define if component has a help message
 * @param uniqueId - Unique identifier for the element.
 */
export var buildDescribedBy = function (_a) {
    var hasError = _a.hasError, hasHelpMessage = _a.hasHelpMessage, uniqueId = _a.uniqueId;
    if (!buildDescribedBy || (!hasHelpMessage && !hasError)) {
        // Type requires either string | undefined
        return undefined;
    }
    if (hasError && hasHelpMessage) {
        return errorFor(uniqueId) + " " + helpFor(uniqueId);
    }
    if (hasError) {
        return errorFor(uniqueId);
    }
    if (hasHelpMessage) {
        return helpFor(uniqueId);
    }
};
export var errorFor = function (uniqueId) { return "error-for-" + uniqueId; };
export var helpFor = function (uniqueId) { return "help-for-" + uniqueId; };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9ybUVsZW1lbnRVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL19wcml2YXRlL2Zvcm1zL0Zvcm1FbGVtZW50VXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0RBOzs7Ozs7R0FNRztBQUNILE1BQU0sQ0FBQyxJQUFNLGdCQUFnQixHQUFHLFVBQUMsRUFJVDtRQUh0QixzQkFBUSxFQUNSLGtDQUFjLEVBQ2Qsc0JBQVE7SUFFUixJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxDQUFDLGNBQWMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ3ZELDBDQUEwQztRQUMxQyxPQUFPLFNBQVMsQ0FBQztLQUNsQjtJQUVELElBQUksUUFBUSxJQUFJLGNBQWMsRUFBRTtRQUM5QixPQUFVLFFBQVEsQ0FBQyxRQUFRLENBQUMsU0FBSSxPQUFPLENBQUMsUUFBUSxDQUFHLENBQUM7S0FDckQ7SUFFRCxJQUFJLFFBQVEsRUFBRTtRQUNaLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQzNCO0lBRUQsSUFBSSxjQUFjLEVBQUU7UUFDbEIsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDMUI7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSxRQUFRLEdBQUcsVUFBQyxRQUFnQixJQUFLLE9BQUEsZUFBYSxRQUFVLEVBQXZCLENBQXVCLENBQUM7QUFDdEUsTUFBTSxDQUFDLElBQU0sT0FBTyxHQUFHLFVBQUMsUUFBZ0IsSUFBSyxPQUFBLGNBQVksUUFBVSxFQUF0QixDQUFzQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZGVzY3JpcHRpb24gQmFzZSBpbnRlcmZhY2UgZm9yIGFsbCBmb3JtIGNvbXBvbmVudHMuICBFeHRlbmRzIHRoZSA8aW5wdXQgLz5cbiAqIGVsZW1lbnQgcHJvcHMuICBBbGxvd3MgZm9yIFJlYWN0Tm9kZSBvbiBsYWJlbCBwcm9wLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VGb3JtRWxlbWVudFdpdGhOb2RlTGFiZWxcbiAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8J2lucHV0Jz4ge1xuICBjb2xvcj86ICdkZWZhdWx0JyB8ICdpbnZlcnNlJztcbiAgaGFzRXJyb3I/OiBib29sZWFuO1xuICBlcnJvck1lc3NhZ2U/OiBzdHJpbmc7XG4gIGhlbHBNZXNzYWdlPzogc3RyaW5nO1xuICBsYWJlbDogc3RyaW5nIHwgUmVhY3QuUmVhY3ROb2RlO1xufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBCYXNlIGludGVyZmFjZSBmb3IgYWxsIGZvcm0gY29tcG9uZW50cy4gIEV4dGVuZHMgdGhlIDxpbnB1dCAvPlxuICogZWxlbWVudCBwcm9wcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYXNlRm9ybUVsZW1lbnQgZXh0ZW5kcyBCYXNlRm9ybUVsZW1lbnRXaXRoTm9kZUxhYmVsIHtcbiAgbGFiZWw6IHN0cmluZztcbn1cblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gQmFzZSBpbnRlcmZhY2UgZm9yIGZvcm0gbWVzc2FnZXMuICBUaGVzZSBhcmUgdHlwaWNhbGx5IGhlbHBcbiAqIG9yIGVycm9yIG1lc3NhZ2VzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VGb3JtTWVzc2FnZSB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgY29sb3I/OiAnZGVmYXVsdCcgfCAnaW52ZXJzZSc7XG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gVGhlIHJvb3QgZm9ybSBlbGVtZW50IFwiaWRcIi4gIFRoaXMgaXMgbm9ybWFsbHkgdGhlIGlkXG4gICAqIGFwcGxpZWQgdG8gYW4gPGlucHV0IC8+IGVsZW1lbnQuICBXZSB1c2UgdGhpcyBwcm9wIHRvIHNldCB0aGVcbiAgICogXCJlcnJvci1mb3JcIiBhbmQgXCJoZWxwLWZvclwiIGF0dHJpYnV0ZXMuXG4gICAqL1xuICByb290RWxlbWVudElkPzogc3RyaW5nO1xuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIEEgdW5pcXVlIGluZGVudGlmaWVyIHVzZWQgdG8gc2V0IHRoZSBcImlkXCIgb2YgdGhpcyBlbGVtZW50LFxuICAgKiB3aGljaCBjb25uZWN0cyBpdCB3aXRoIHRoZSByb290IGVsZW1lbnQuICBUaGlzIGVuc3VyZXMgc2NyZWVuIHJlYWRlcnNcbiAgICogY2FuIHJlYWQgdGhlIGVycm9yIGFuZCBoZWxwIG1lc3NhZ2VzIHdoZW4gb25lIGFwcGVhcnMuXG4gICAqIFRoaXMgSUQgc2hvdWxkIGJlIHNvbWV0aGluZyBsaWtlIFwiZXJyb3ItZm9yLTxpZC1vZi1pbnB1dC1lbGVtZW50PlwiIG9yXG4gICAqIFwiaGVscC1mb3ItPGlkLW9mLWlucHV0LWVsZW1lbnQ+XCIuXG4gICAqL1xuICBkZXNjcmliZWRCeUlkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIGJ1aWxkRGVzY3JpYmVkQnlQcm9wcyB7XG4gIGhhc0Vycm9yPzogYm9vbGVhbjtcbiAgaGFzSGVscE1lc3NhZ2U/OiBib29sZWFuO1xuICB1bmlxdWVJZDogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgdXRpbGl0eSBmdW5jdGlvbiB0byBidWlsZCB0aGUgYGFyaWEtZGVzY3JpYmVkYnlgIGF0dHJpYnV0ZS5cbiAqXG4gKiBAcGFyYW0gaGFzRXJyb3IgLSBCb29sZWFuIHRvIGRlZmluZSBpZiBjb21wb25lbnQgaGFzIGFuIGVycm9yXG4gKiBAcGFyYW0gaGFzSGVscE1lc3NhZ2UgLSBCb29sZWFuIHRvIGRlZmluZSBpZiBjb21wb25lbnQgaGFzIGEgaGVscCBtZXNzYWdlXG4gKiBAcGFyYW0gdW5pcXVlSWQgLSBVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGVsZW1lbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBidWlsZERlc2NyaWJlZEJ5ID0gKHtcbiAgaGFzRXJyb3IsXG4gIGhhc0hlbHBNZXNzYWdlLFxuICB1bmlxdWVJZCxcbn06IGJ1aWxkRGVzY3JpYmVkQnlQcm9wcykgPT4ge1xuICBpZiAoIWJ1aWxkRGVzY3JpYmVkQnkgfHwgKCFoYXNIZWxwTWVzc2FnZSAmJiAhaGFzRXJyb3IpKSB7XG4gICAgLy8gVHlwZSByZXF1aXJlcyBlaXRoZXIgc3RyaW5nIHwgdW5kZWZpbmVkXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmIChoYXNFcnJvciAmJiBoYXNIZWxwTWVzc2FnZSkge1xuICAgIHJldHVybiBgJHtlcnJvckZvcih1bmlxdWVJZCl9ICR7aGVscEZvcih1bmlxdWVJZCl9YDtcbiAgfVxuXG4gIGlmIChoYXNFcnJvcikge1xuICAgIHJldHVybiBlcnJvckZvcih1bmlxdWVJZCk7XG4gIH1cblxuICBpZiAoaGFzSGVscE1lc3NhZ2UpIHtcbiAgICByZXR1cm4gaGVscEZvcih1bmlxdWVJZCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBlcnJvckZvciA9ICh1bmlxdWVJZDogc3RyaW5nKSA9PiBgZXJyb3ItZm9yLSR7dW5pcXVlSWR9YDtcbmV4cG9ydCBjb25zdCBoZWxwRm9yID0gKHVuaXF1ZUlkOiBzdHJpbmcpID0+IGBoZWxwLWZvci0ke3VuaXF1ZUlkfWA7XG4iXX0=