var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { Link } from 'react-router-dom';
/**
 * A private component to Chroma, used to generate an `<a>` tag, either the
 * semantic, out of the box version, or a react-router-dom `<Link>`.
 */
export var LinkOrExternalLink = function (_a) {
    var to = _a.to, children = _a.children, className = _a.className, disabled = _a.disabled, innerRef = _a.innerRef, rel = _a.rel, target = _a.target, rootProps = __rest(_a, ["to", "children", "className", "disabled", "innerRef", "rel", "target"]);
    var disabledProps = disabled
        ? { 'aria-disabled': true, role: 'button' }
        : {};
    if (to.toString().match(/^https?:/) || disabled) {
        var externalTarget = target || '_blank';
        return (React.createElement("a", __assign({ href: disabled ? null : to, className: className, ref: innerRef }, rootProps, disabledProps, { target: externalTarget, rel: externalTarget === '_blank' ? 'noopener noreferrer' : rel }), children));
    }
    return (React.createElement(Link, __assign({ to: to, className: className, innerRef: innerRef, target: target, rel: rel }, rootProps), children));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlua09yRXh0ZXJuYWxMaW5rLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvX3ByaXZhdGUvTGlua09yRXh0ZXJuYWxMaW5rLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRXhDOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxJQUFNLGtCQUFrQixHQUFrQixVQUFDLEVBU2pEO0lBUkMsSUFBQSxFQUFFLFFBQUEsRUFDRixRQUFRLGNBQUEsRUFDUixTQUFTLGVBQUEsRUFDVCxRQUFRLGNBQUEsRUFDUixRQUFRLGNBQUEsRUFDUixHQUFHLFNBQUEsRUFDSCxNQUFNLFlBQUEsRUFDSCxTQUFTLGNBUm9DLHdFQVNqRCxDQURhO0lBRVosSUFBTSxhQUFhLEdBQW9DLFFBQVE7UUFDN0QsQ0FBQyxDQUFDLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFO1FBQzNDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFUCxJQUFJLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksUUFBUSxFQUFFO1FBQy9DLElBQU0sY0FBYyxHQUFHLE1BQU0sSUFBSSxRQUFRLENBQUM7UUFDMUMsT0FBTyxDQUNMLG9DQUNFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUMxQixTQUFTLEVBQUUsU0FBUyxFQUNwQixHQUFHLEVBQUUsUUFBUSxJQUNULFNBQVMsRUFDVCxhQUFhLElBQ2pCLE1BQU0sRUFBRSxjQUFjLEVBQ3RCLEdBQUcsRUFBRSxjQUFjLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUU3RCxRQUFRLENBQ1AsQ0FDTCxDQUFDO0tBQ0g7SUFDRCxPQUFPLENBQ0wsb0JBQUMsSUFBSSxhQUNILEVBQUUsRUFBRSxFQUFFLEVBQ04sU0FBUyxFQUFFLFNBQVMsRUFDcEIsUUFBUSxFQUFFLFFBQVEsRUFDbEIsTUFBTSxFQUFFLE1BQU0sRUFDZCxHQUFHLEVBQUUsR0FBRyxJQUNKLFNBQVMsR0FFWixRQUFRLENBQ0osQ0FDUixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG4vKipcbiAqIEEgcHJpdmF0ZSBjb21wb25lbnQgdG8gQ2hyb21hLCB1c2VkIHRvIGdlbmVyYXRlIGFuIGA8YT5gIHRhZywgZWl0aGVyIHRoZVxuICogc2VtYW50aWMsIG91dCBvZiB0aGUgYm94IHZlcnNpb24sIG9yIGEgcmVhY3Qtcm91dGVyLWRvbSBgPExpbms+YC5cbiAqL1xuZXhwb3J0IGNvbnN0IExpbmtPckV4dGVybmFsTGluazogUmVhY3QuRkM8YW55PiA9ICh7XG4gIHRvLFxuICBjaGlsZHJlbixcbiAgY2xhc3NOYW1lLFxuICBkaXNhYmxlZCxcbiAgaW5uZXJSZWYsXG4gIHJlbCxcbiAgdGFyZ2V0LFxuICAuLi5yb290UHJvcHNcbn0pID0+IHtcbiAgY29uc3QgZGlzYWJsZWRQcm9wczogUmVhY3QuQW5jaG9ySFRNTEF0dHJpYnV0ZXM8YW55PiA9IGRpc2FibGVkXG4gICAgPyB7ICdhcmlhLWRpc2FibGVkJzogdHJ1ZSwgcm9sZTogJ2J1dHRvbicgfVxuICAgIDoge307XG5cbiAgaWYgKHRvLnRvU3RyaW5nKCkubWF0Y2goL15odHRwcz86LykgfHwgZGlzYWJsZWQpIHtcbiAgICBjb25zdCBleHRlcm5hbFRhcmdldCA9IHRhcmdldCB8fCAnX2JsYW5rJztcbiAgICByZXR1cm4gKFxuICAgICAgPGFcbiAgICAgICAgaHJlZj17ZGlzYWJsZWQgPyBudWxsIDogdG99XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICByZWY9e2lubmVyUmVmfVxuICAgICAgICB7Li4ucm9vdFByb3BzfVxuICAgICAgICB7Li4uZGlzYWJsZWRQcm9wc31cbiAgICAgICAgdGFyZ2V0PXtleHRlcm5hbFRhcmdldH1cbiAgICAgICAgcmVsPXtleHRlcm5hbFRhcmdldCA9PT0gJ19ibGFuaycgPyAnbm9vcGVuZXIgbm9yZWZlcnJlcicgOiByZWx9XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvYT5cbiAgICApO1xuICB9XG4gIHJldHVybiAoXG4gICAgPExpbmtcbiAgICAgIHRvPXt0b31cbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgaW5uZXJSZWY9e2lubmVyUmVmfVxuICAgICAgdGFyZ2V0PXt0YXJnZXR9XG4gICAgICByZWw9e3JlbH1cbiAgICAgIHsuLi5yb290UHJvcHN9XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvTGluaz5cbiAgKTtcbn07XG4iXX0=