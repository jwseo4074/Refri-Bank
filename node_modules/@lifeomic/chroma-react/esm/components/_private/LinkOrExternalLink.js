var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { Link } from 'react-router-dom';
/**
 * A private component to Chroma, used to generate an `<a>` tag, either the
 * semantic, out of the box version, or a react-router-dom `<Link>`.
 */
export var LinkOrExternalLink = function (_a) {
    var to = _a.to, children = _a.children, className = _a.className, disabled = _a.disabled, innerRef = _a.innerRef, rel = _a.rel, target = _a.target, rootProps = __rest(_a, ["to", "children", "className", "disabled", "innerRef", "rel", "target"]);
    var disabledProps = disabled
        ? { 'aria-disabled': true, role: 'button' }
        : {};
    if (to.toString().match(/^https?:/) || disabled) {
        var externalTarget = target || '_blank';
        return (React.createElement("a", __assign({ href: disabled ? null : to, className: className, ref: innerRef }, rootProps, disabledProps, { target: externalTarget, rel: externalTarget === '_blank' ? 'noopener noreferrer' : rel }), children));
    }
    return (React.createElement(Link, __assign({ to: to, className: className, innerRef: innerRef, target: target, rel: rel }, rootProps), children));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlua09yRXh0ZXJuYWxMaW5rLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvX3ByaXZhdGUvTGlua09yRXh0ZXJuYWxMaW5rLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRXhDOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxJQUFNLGtCQUFrQixHQUFrQixVQUFDLEVBU2pEO0lBUkMsSUFBQSxVQUFFLEVBQ0Ysc0JBQVEsRUFDUix3QkFBUyxFQUNULHNCQUFRLEVBQ1Isc0JBQVEsRUFDUixZQUFHLEVBQ0gsa0JBQU0sRUFDTixnR0FBWTtJQUVaLElBQU0sYUFBYSxHQUFvQyxRQUFRO1FBQzdELENBQUMsQ0FBQyxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRTtRQUMzQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRVAsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLFFBQVEsRUFBRTtRQUMvQyxJQUFNLGNBQWMsR0FBRyxNQUFNLElBQUksUUFBUSxDQUFDO1FBQzFDLE9BQU8sQ0FDTCxvQ0FDRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFDMUIsU0FBUyxFQUFFLFNBQVMsRUFDcEIsR0FBRyxFQUFFLFFBQVEsSUFDVCxTQUFTLEVBQ1QsYUFBYSxJQUNqQixNQUFNLEVBQUUsY0FBYyxFQUN0QixHQUFHLEVBQUUsY0FBYyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FFN0QsUUFBUSxDQUNQLENBQ0wsQ0FBQztLQUNIO0lBQ0QsT0FBTyxDQUNMLG9CQUFDLElBQUksYUFDSCxFQUFFLEVBQUUsRUFBRSxFQUNOLFNBQVMsRUFBRSxTQUFTLEVBQ3BCLFFBQVEsRUFBRSxRQUFRLEVBQ2xCLE1BQU0sRUFBRSxNQUFNLEVBQ2QsR0FBRyxFQUFFLEdBQUcsSUFDSixTQUFTLEdBRVosUUFBUSxDQUNKLENBQ1IsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuLyoqXG4gKiBBIHByaXZhdGUgY29tcG9uZW50IHRvIENocm9tYSwgdXNlZCB0byBnZW5lcmF0ZSBhbiBgPGE+YCB0YWcsIGVpdGhlciB0aGVcbiAqIHNlbWFudGljLCBvdXQgb2YgdGhlIGJveCB2ZXJzaW9uLCBvciBhIHJlYWN0LXJvdXRlci1kb20gYDxMaW5rPmAuXG4gKi9cbmV4cG9ydCBjb25zdCBMaW5rT3JFeHRlcm5hbExpbms6IFJlYWN0LkZDPGFueT4gPSAoe1xuICB0byxcbiAgY2hpbGRyZW4sXG4gIGNsYXNzTmFtZSxcbiAgZGlzYWJsZWQsXG4gIGlubmVyUmVmLFxuICByZWwsXG4gIHRhcmdldCxcbiAgLi4ucm9vdFByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGRpc2FibGVkUHJvcHM6IFJlYWN0LkFuY2hvckhUTUxBdHRyaWJ1dGVzPGFueT4gPSBkaXNhYmxlZFxuICAgID8geyAnYXJpYS1kaXNhYmxlZCc6IHRydWUsIHJvbGU6ICdidXR0b24nIH1cbiAgICA6IHt9O1xuXG4gIGlmICh0by50b1N0cmluZygpLm1hdGNoKC9eaHR0cHM/Oi8pIHx8IGRpc2FibGVkKSB7XG4gICAgY29uc3QgZXh0ZXJuYWxUYXJnZXQgPSB0YXJnZXQgfHwgJ19ibGFuayc7XG4gICAgcmV0dXJuIChcbiAgICAgIDxhXG4gICAgICAgIGhyZWY9e2Rpc2FibGVkID8gbnVsbCA6IHRvfVxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgICAgcmVmPXtpbm5lclJlZn1cbiAgICAgICAgey4uLnJvb3RQcm9wc31cbiAgICAgICAgey4uLmRpc2FibGVkUHJvcHN9XG4gICAgICAgIHRhcmdldD17ZXh0ZXJuYWxUYXJnZXR9XG4gICAgICAgIHJlbD17ZXh0ZXJuYWxUYXJnZXQgPT09ICdfYmxhbmsnID8gJ25vb3BlbmVyIG5vcmVmZXJyZXInIDogcmVsfVxuICAgICAgPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L2E+XG4gICAgKTtcbiAgfVxuICByZXR1cm4gKFxuICAgIDxMaW5rXG4gICAgICB0bz17dG99XG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgIGlubmVyUmVmPXtpbm5lclJlZn1cbiAgICAgIHRhcmdldD17dGFyZ2V0fVxuICAgICAgcmVsPXtyZWx9XG4gICAgICB7Li4ucm9vdFByb3BzfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0xpbms+XG4gICk7XG59O1xuIl19