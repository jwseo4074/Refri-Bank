var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { makeStyles } from '../../styles';
import clsx from 'clsx';
export var AlertBodyStylesKey = 'ChromaAlertBody';
export var useStyles = makeStyles(function () { return ({
    root: {
        color: 'inherit',
        flex: '1 1 0%',
        '& > *': {
            color: 'inherit',
        },
        '& button': {
            color: 'inherit',
        },
        '& a': {
            color: 'inherit',
        },
        '& > p': {
            color: 'inherit',
        },
        '& > ul': {
            marginTop: '0.25rem',
            marginBottom: '0.25rem',
            paddingLeft: '1.25rem',
            paddingRight: '1.25rem',
        },
        '& p + a, & p + button, & ul + a, & ul + button': {
            marginLeft: '0.75rem',
        },
    },
    spaceBetween: {
        justifyContent: 'space-between',
        display: 'flex',
        '& a, & button': {
            minHeight: 'unset',
            padding: 0,
        },
        '@media screen and (max-width: 480px)': {
            alignItems: 'flex-start',
            '& button': {
                textAlign: 'left',
                justifyContent: 'flex-start',
                marginTop: '0.125rem',
            },
        },
    },
}); }, { name: AlertBodyStylesKey });
export var AlertBody = function (_a) {
    var className = _a.className, children = _a.children, spaceBetween = _a.spaceBetween, rootProps = __rest(_a, ["className", "children", "spaceBetween"]);
    var classes = useStyles({});
    return (React.createElement("div", __assign({ className: clsx(classes.root, spaceBetween && classes.spaceBetween, className) }, rootProps), children));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWxlcnRCb2R5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvQWxlcnQvQWxlcnRCb2R5LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUxQyxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFFeEIsTUFBTSxDQUFDLElBQU0sa0JBQWtCLEdBQUcsaUJBQWlCLENBQUM7QUFFcEQsTUFBTSxDQUFDLElBQU0sU0FBUyxHQUFHLFVBQVUsQ0FDakMsY0FBTSxPQUFBLENBQUM7SUFDTCxJQUFJLEVBQUU7UUFDSixLQUFLLEVBQUUsU0FBUztRQUNoQixJQUFJLEVBQUUsUUFBUTtRQUNkLE9BQU8sRUFBRTtZQUNQLEtBQUssRUFBRSxTQUFTO1NBQ2pCO1FBQ0QsVUFBVSxFQUFFO1lBQ1YsS0FBSyxFQUFFLFNBQVM7U0FDakI7UUFDRCxLQUFLLEVBQUU7WUFDTCxLQUFLLEVBQUUsU0FBUztTQUNqQjtRQUNELE9BQU8sRUFBRTtZQUNQLEtBQUssRUFBRSxTQUFTO1NBQ2pCO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsU0FBUyxFQUFFLFNBQVM7WUFDcEIsWUFBWSxFQUFFLFNBQVM7WUFDdkIsV0FBVyxFQUFFLFNBQVM7WUFDdEIsWUFBWSxFQUFFLFNBQVM7U0FDeEI7UUFDRCxnREFBZ0QsRUFBRTtZQUNoRCxVQUFVLEVBQUUsU0FBUztTQUN0QjtLQUNGO0lBQ0QsWUFBWSxFQUFFO1FBQ1osY0FBYyxFQUFFLGVBQWU7UUFDL0IsT0FBTyxFQUFFLE1BQU07UUFDZixlQUFlLEVBQUU7WUFDZixTQUFTLEVBQUUsT0FBTztZQUNsQixPQUFPLEVBQUUsQ0FBQztTQUNYO1FBQ0Qsc0NBQXNDLEVBQUU7WUFDdEMsVUFBVSxFQUFFLFlBQVk7WUFDeEIsVUFBVSxFQUFFO2dCQUNWLFNBQVMsRUFBRSxNQUFNO2dCQUNqQixjQUFjLEVBQUUsWUFBWTtnQkFDNUIsU0FBUyxFQUFFLFVBQVU7YUFDdEI7U0FDRjtLQUNGO0NBQ0YsQ0FBQyxFQTFDSSxDQTBDSixFQUNGLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFLENBQzdCLENBQUM7QUFVRixNQUFNLENBQUMsSUFBTSxTQUFTLEdBQTZCLFVBQUMsRUFLbkQ7SUFKQyxJQUFBLFNBQVMsZUFBQSxFQUNULFFBQVEsY0FBQSxFQUNSLFlBQVksa0JBQUEsRUFDVCxTQUFTLGNBSnNDLHlDQUtuRCxDQURhO0lBRVosSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLE9BQU8sQ0FDTCxzQ0FDRSxTQUFTLEVBQUUsSUFBSSxDQUNiLE9BQU8sQ0FBQyxJQUFJLEVBQ1osWUFBWSxJQUFJLE9BQU8sQ0FBQyxZQUFZLEVBQ3BDLFNBQVMsQ0FDVixJQUNHLFNBQVMsR0FFWixRQUFRLENBQ0wsQ0FDUCxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJy4uLy4uL3N0eWxlcyc7XG5pbXBvcnQgeyBHZXRDbGFzc2VzIH0gZnJvbSAnLi4vLi4vdHlwZVV0aWxzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuXG5leHBvcnQgY29uc3QgQWxlcnRCb2R5U3R5bGVzS2V5ID0gJ0Nocm9tYUFsZXJ0Qm9keSc7XG5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAoKSA9PiAoe1xuICAgIHJvb3Q6IHtcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgICBmbGV4OiAnMSAxIDAlJyxcbiAgICAgICcmID4gKic6IHtcbiAgICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgIH0sXG4gICAgICAnJiBidXR0b24nOiB7XG4gICAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgICB9LFxuICAgICAgJyYgYSc6IHtcbiAgICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgIH0sXG4gICAgICAnJiA+IHAnOiB7XG4gICAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgICB9LFxuICAgICAgJyYgPiB1bCc6IHtcbiAgICAgICAgbWFyZ2luVG9wOiAnMC4yNXJlbScsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogJzAuMjVyZW0nLFxuICAgICAgICBwYWRkaW5nTGVmdDogJzEuMjVyZW0nLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6ICcxLjI1cmVtJyxcbiAgICAgIH0sXG4gICAgICAnJiBwICsgYSwgJiBwICsgYnV0dG9uLCAmIHVsICsgYSwgJiB1bCArIGJ1dHRvbic6IHtcbiAgICAgICAgbWFyZ2luTGVmdDogJzAuNzVyZW0nLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHNwYWNlQmV0d2Vlbjoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICcmIGEsICYgYnV0dG9uJzoge1xuICAgICAgICBtaW5IZWlnaHQ6ICd1bnNldCcsXG4gICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICB9LFxuICAgICAgJ0BtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQ4MHB4KSc6IHtcbiAgICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAnJiBidXR0b24nOiB7XG4gICAgICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICBtYXJnaW5Ub3A6ICcwLjEyNXJlbScsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gIH0pLFxuICB7IG5hbWU6IEFsZXJ0Qm9keVN0eWxlc0tleSB9XG4pO1xuXG5leHBvcnQgdHlwZSBBbGVydEJvZHlDbGFzc2VzID0gR2V0Q2xhc3Nlczx0eXBlb2YgdXNlU3R5bGVzPjtcblxuZXhwb3J0IGludGVyZmFjZSBBbGVydEJvZHlQcm9wcyB7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHNwYWNlQmV0d2Vlbj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBBbGVydEJvZHk6IFJlYWN0LkZDPEFsZXJ0Qm9keVByb3BzPiA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgY2hpbGRyZW4sXG4gIHNwYWNlQmV0d2VlbixcbiAgLi4ucm9vdFByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoe30pO1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17Y2xzeChcbiAgICAgICAgY2xhc3Nlcy5yb290LFxuICAgICAgICBzcGFjZUJldHdlZW4gJiYgY2xhc3Nlcy5zcGFjZUJldHdlZW4sXG4gICAgICAgIGNsYXNzTmFtZVxuICAgICAgKX1cbiAgICAgIHsuLi5yb290UHJvcHN9XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdfQ==