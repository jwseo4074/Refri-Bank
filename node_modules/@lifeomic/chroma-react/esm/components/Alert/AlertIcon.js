var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { makeStyles } from '../../styles';
import clsx from 'clsx';
export var AlertIconStylesKey = 'ChromaAlertIcon';
export var useStyles = makeStyles(function () { return ({
    root: {
        color: 'inherit',
        display: 'flex',
        flexShrink: 0,
        marginTop: '-0.0625rem',
        marginRight: '0.75rem',
        height: '1.5rem',
        width: '1.5rem',
    },
}); }, { name: AlertIconStylesKey });
export var AlertIcon = function (_a) {
    var className = _a.className, children = _a.children, Icon = _a.icon, rootProps = __rest(_a, ["className", "children", "icon"]);
    var classes = useStyles({});
    return (React.createElement("div", __assign({ className: clsx(classes.root, className) }, rootProps),
        Icon && React.createElement(Icon, { role: "img", "aria-hidden": true }),
        children));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWxlcnRJY29uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvQWxlcnQvQWxlcnRJY29uLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUxQyxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFFeEIsTUFBTSxDQUFDLElBQU0sa0JBQWtCLEdBQUcsaUJBQWlCLENBQUM7QUFFcEQsTUFBTSxDQUFDLElBQU0sU0FBUyxHQUFHLFVBQVUsQ0FDakMsY0FBTSxPQUFBLENBQUM7SUFDTCxJQUFJLEVBQUU7UUFDSixLQUFLLEVBQUUsU0FBUztRQUNoQixPQUFPLEVBQUUsTUFBTTtRQUNmLFVBQVUsRUFBRSxDQUFDO1FBQ2IsU0FBUyxFQUFFLFlBQVk7UUFDdkIsV0FBVyxFQUFFLFNBQVM7UUFDdEIsTUFBTSxFQUFFLFFBQVE7UUFDaEIsS0FBSyxFQUFFLFFBQVE7S0FDaEI7Q0FDRixDQUFDLEVBVkksQ0FVSixFQUNGLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFLENBQzdCLENBQUM7QUFVRixNQUFNLENBQUMsSUFBTSxTQUFTLEdBQTZCLFVBQUMsRUFLbkQ7SUFKQyxJQUFBLFNBQVMsZUFBQSxFQUNULFFBQVEsY0FBQSxFQUNGLElBQUksVUFBQSxFQUNQLFNBQVMsY0FKc0MsaUNBS25ELENBRGE7SUFFWixJQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUIsT0FBTyxDQUNMLHNDQUFLLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsSUFBTSxTQUFTO1FBQ3pELElBQUksSUFBSSxvQkFBQyxJQUFJLElBQUMsSUFBSSxFQUFDLEtBQUssd0JBQWU7UUFDdkMsUUFBUSxDQUNMLENBQ1AsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICcuLi8uLi9zdHlsZXMnO1xuaW1wb3J0IHsgR2V0Q2xhc3NlcyB9IGZyb20gJy4uLy4uL3R5cGVVdGlscyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcblxuZXhwb3J0IGNvbnN0IEFsZXJ0SWNvblN0eWxlc0tleSA9ICdDaHJvbWFBbGVydEljb24nO1xuXG5leHBvcnQgY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhcbiAgKCkgPT4gKHtcbiAgICByb290OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleFNocmluazogMCxcbiAgICAgIG1hcmdpblRvcDogJy0wLjA2MjVyZW0nLFxuICAgICAgbWFyZ2luUmlnaHQ6ICcwLjc1cmVtJyxcbiAgICAgIGhlaWdodDogJzEuNXJlbScsXG4gICAgICB3aWR0aDogJzEuNXJlbScsXG4gICAgfSxcbiAgfSksXG4gIHsgbmFtZTogQWxlcnRJY29uU3R5bGVzS2V5IH1cbik7XG5cbmV4cG9ydCB0eXBlIEFsZXJ0SWNvbkNsYXNzZXMgPSBHZXRDbGFzc2VzPHR5cGVvZiB1c2VTdHlsZXM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEFsZXJ0SWNvblByb3BzIHtcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgaWNvbj86IFJlYWN0LkNvbXBvbmVudFR5cGU8UmVhY3QuU1ZHUHJvcHM8U1ZHU1ZHRWxlbWVudD4+O1xufVxuXG5leHBvcnQgY29uc3QgQWxlcnRJY29uOiBSZWFjdC5GQzxBbGVydEljb25Qcm9wcz4gPSAoe1xuICBjbGFzc05hbWUsXG4gIGNoaWxkcmVuLFxuICBpY29uOiBJY29uLFxuICAuLi5yb290UHJvcHNcbn0pID0+IHtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcyh7fSk7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2Nsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpfSB7Li4ucm9vdFByb3BzfT5cbiAgICAgIHtJY29uICYmIDxJY29uIHJvbGU9XCJpbWdcIiBhcmlhLWhpZGRlbiAvPn1cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iXX0=