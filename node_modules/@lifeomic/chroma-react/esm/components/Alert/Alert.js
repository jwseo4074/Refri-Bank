var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { makeStyles } from '../../styles';
import clsx from 'clsx';
export var AlertStylesKey = 'ChromaAlert';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        alignItems: 'flex-start',
        borderRadius: '0.375rem',
        display: 'flex',
        justifyContent: 'center',
        padding: theme.spacing(2, 3),
    },
    fullWidth: {
        width: '100%',
    },
    info: {
        backgroundColor: theme.palette.blue[50],
        color: theme.palette.primary[800],
    },
    warning: {
        backgroundColor: theme.palette.yellow[100],
        color: theme.palette.yellow[900],
    },
    error: {
        backgroundColor: theme.palette.red[50],
        color: theme.palette.red[900],
    },
    success: {
        backgroundColor: theme.palette.green[100],
        color: theme.palette.green[900],
    },
}); }, { name: AlertStylesKey });
export var Alert = function (_a) {
    var className = _a.className, children = _a.children, fullWidth = _a.fullWidth, _b = _a.statusType, statusType = _b === void 0 ? 'info' : _b, rootProps = __rest(_a, ["className", "children", "fullWidth", "statusType"]);
    var classes = useStyles({});
    return (React.createElement("div", __assign({ className: clsx(classes.root, classes[statusType], fullWidth && classes.fullWidth, className), role: "alert" }, rootProps), children));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWxlcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BbGVydC9BbGVydC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBR3hCLE1BQU0sQ0FBQyxJQUFNLGNBQWMsR0FBRyxhQUFhLENBQUM7QUFFNUMsTUFBTSxDQUFDLElBQU0sU0FBUyxHQUFHLFVBQVUsQ0FDakMsVUFBQyxLQUFLLElBQUssT0FBQSxDQUFDO0lBQ1YsSUFBSSxFQUFFO1FBQ0osVUFBVSxFQUFFLFlBQVk7UUFDeEIsWUFBWSxFQUFFLFVBQVU7UUFDeEIsT0FBTyxFQUFFLE1BQU07UUFDZixjQUFjLEVBQUUsUUFBUTtRQUN4QixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzdCO0lBQ0QsU0FBUyxFQUFFO1FBQ1QsS0FBSyxFQUFFLE1BQU07S0FDZDtJQUNELElBQUksRUFBRTtRQUNKLGVBQWUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDdkMsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztLQUNsQztJQUNELE9BQU8sRUFBRTtRQUNQLGVBQWUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDMUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztLQUNqQztJQUNELEtBQUssRUFBRTtRQUNMLGVBQWUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDdEMsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztLQUM5QjtJQUNELE9BQU8sRUFBRTtRQUNQLGVBQWUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDekMsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztLQUNoQztDQUNGLENBQUMsRUEzQlMsQ0EyQlQsRUFDRixFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsQ0FDekIsQ0FBQztBQVdGLE1BQU0sQ0FBQyxJQUFNLEtBQUssR0FBeUIsVUFBQyxFQU0zQztJQUxDLElBQUEsU0FBUyxlQUFBLEVBQ1QsUUFBUSxjQUFBLEVBQ1IsU0FBUyxlQUFBLEVBQ1Qsa0JBQW1CLEVBQW5CLFVBQVUsbUJBQUcsTUFBTSxLQUFBLEVBQ2hCLFNBQVMsY0FMOEIsb0RBTTNDLENBRGE7SUFFWixJQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUIsT0FBTyxDQUNMLHNDQUNFLFNBQVMsRUFBRSxJQUFJLENBQ2IsT0FBTyxDQUFDLElBQUksRUFDWixPQUFPLENBQUMsVUFBVSxDQUFDLEVBQ25CLFNBQVMsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUM5QixTQUFTLENBQ1YsRUFDRCxJQUFJLEVBQUMsT0FBTyxJQUNSLFNBQVMsR0FFWixRQUFRLENBQ0wsQ0FDUCxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJy4uLy4uL3N0eWxlcyc7XG5pbXBvcnQgeyBHZXRDbGFzc2VzIH0gZnJvbSAnLi4vLi4vdHlwZVV0aWxzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uU3RhdHVzVHlwZSB9IGZyb20gJy4uL19wcml2YXRlL25vdGlmaWNhdGlvblR5cGVzJztcblxuZXhwb3J0IGNvbnN0IEFsZXJ0U3R5bGVzS2V5ID0gJ0Nocm9tYUFsZXJ0JztcblxuZXhwb3J0IGNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoXG4gICh0aGVtZSkgPT4gKHtcbiAgICByb290OiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnZmxleC1zdGFydCcsXG4gICAgICBib3JkZXJSYWRpdXM6ICcwLjM3NXJlbScsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDIsIDMpLFxuICAgIH0sXG4gICAgZnVsbFdpZHRoOiB7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgIH0sXG4gICAgaW5mbzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmJsdWVbNTBdLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeVs4MDBdLFxuICAgIH0sXG4gICAgd2FybmluZzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnllbGxvd1sxMDBdLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUueWVsbG93WzkwMF0sXG4gICAgfSxcbiAgICBlcnJvcjoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnJlZFs1MF0sXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5yZWRbOTAwXSxcbiAgICB9LFxuICAgIHN1Y2Nlc3M6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmVlblsxMDBdLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JlZW5bOTAwXSxcbiAgICB9LFxuICB9KSxcbiAgeyBuYW1lOiBBbGVydFN0eWxlc0tleSB9XG4pO1xuXG5leHBvcnQgdHlwZSBBbGVydENsYXNzZXMgPSBHZXRDbGFzc2VzPHR5cGVvZiB1c2VTdHlsZXM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEFsZXJ0UHJvcHMge1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBzdGF0dXNUeXBlPzogTm90aWZpY2F0aW9uU3RhdHVzVHlwZTtcbiAgZnVsbFdpZHRoPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IEFsZXJ0OiBSZWFjdC5GQzxBbGVydFByb3BzPiA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgY2hpbGRyZW4sXG4gIGZ1bGxXaWR0aCxcbiAgc3RhdHVzVHlwZSA9ICdpbmZvJyxcbiAgLi4ucm9vdFByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoe30pO1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17Y2xzeChcbiAgICAgICAgY2xhc3Nlcy5yb290LFxuICAgICAgICBjbGFzc2VzW3N0YXR1c1R5cGVdLFxuICAgICAgICBmdWxsV2lkdGggJiYgY2xhc3Nlcy5mdWxsV2lkdGgsXG4gICAgICAgIGNsYXNzTmFtZVxuICAgICAgKX1cbiAgICAgIHJvbGU9XCJhbGVydFwiXG4gICAgICB7Li4ucm9vdFByb3BzfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iXX0=