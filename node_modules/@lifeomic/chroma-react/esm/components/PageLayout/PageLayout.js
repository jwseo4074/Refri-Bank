var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import PageLayoutDefaultHero from '../../assets/PageLayoutDefaultHero.svg';
import { makeStyles } from '../../styles';
import { PageHeader } from '../PageHeader';
export var PageLayoutStylesKey = 'ChromaPageLayout';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        display: 'flex',
        flexDirection: 'column',
        flex: 1,
        minHeight: '100%',
        marginRight: 'auto',
        marginLeft: 'auto',
        paddingLeft: theme.spacing(4),
        paddingRight: theme.spacing(4),
    },
    maxWidth: {
        maxWidth: theme.pxToRem(1344),
    },
    backgroundCover: {
        position: 'relative',
        // Negative margin so that it can stretch
        // outside of the default padding specified by `root`.
        marginLeft: -theme.spacing(4),
        marginRight: -theme.spacing(4),
        background: "url(" + PageLayoutDefaultHero + ") " + theme.palette.primary.main,
        backgroundSize: 'cover',
        marginBottom: theme.spacing(2),
    },
    headerBackgroundPadding: {
        paddingTop: theme.spacing(3),
        paddingLeft: theme.spacing(4),
        paddingRight: theme.spacing(4),
        paddingBottom: theme.spacing(3),
    },
    disclaimer: {
        paddingBottom: theme.spacing(2),
    },
    tabs: {
        padding: theme.spacing(0),
    },
    sidebar: {
        width: theme.pxToRem(192),
        marginRight: theme.spacing(3),
        flexGrow: 0,
        flexShrink: 0,
    },
    layoutContainer: {
        display: 'flex',
        height: '100%',
        marginBottom: theme.spacing(4),
    },
    content: {
        flex: 1,
        width: '100%',
        // Fix for firefox so the content doesn't overflow
        maxWidth: '100%',
    },
}); }, { name: PageLayoutStylesKey });
var ConditionalWrapper = function (_a) {
    var condition = _a.condition, wrapper = _a.wrapper, children = _a.children;
    return (condition ? wrapper(children) : children);
};
export var PageLayout = React.forwardRef(function (_a, ref) {
    var backgroundImage = _a.backgroundImage, _b = _a.headerAlign, headerAlign = _b === void 0 ? 'center' : _b, headerCenter = _a.headerCenter, headerCenterClassName = _a.headerCenterClassName, headerActionsClassName = _a.headerActionsClassName, children = _a.children, additionalClasses = _a.classes, className = _a.className, disclaimer = _a.disclaimer, headerActions = _a.headerActions, sidebar = _a.sidebar, title = _a.title, tabs = _a.tabs, _c = _a.maxWidth, maxWidth = _c === void 0 ? true : _c, _d = _a.applyBackgroundCover, applyBackgroundCover = _d === void 0 ? false : _d, left = _a.left, leftClassName = _a.leftClassName, rootProps = __rest(_a, ["backgroundImage", "headerAlign", "headerCenter", "headerCenterClassName", "headerActionsClassName", "children", "classes", "className", "disclaimer", "headerActions", "sidebar", "title", "tabs", "maxWidth", "applyBackgroundCover", "left", "leftClassName"]);
    var classes = useStyles({ classes: additionalClasses });
    return (React.createElement("div", __assign({ ref: ref, className: clsx(classes.root, maxWidth && !applyBackgroundCover && classes.maxWidth, className) }, rootProps),
        React.createElement(ConditionalWrapper, { condition: applyBackgroundCover, wrapper: function (children) { return (React.createElement("div", { className: classes.backgroundCover, style: backgroundImage
                    ? {
                        backgroundImage: "url(" + backgroundImage + ")",
                    }
                    : undefined }, children)); } },
            React.createElement(PageHeader, { align: headerAlign, className: applyBackgroundCover ? classes.headerBackgroundPadding : '', title: title, center: headerCenter, centerClassName: headerCenterClassName, margin: "none", actions: headerActions, actionsClassName: headerActionsClassName, color: applyBackgroundCover ? 'inverse' : 'default', left: left, leftClassName: leftClassName })),
        !!disclaimer && React.createElement("div", { className: classes.disclaimer }, disclaimer),
        !!tabs && React.createElement("div", { className: classes.tabs }, tabs),
        React.createElement("div", { className: classes.layoutContainer },
            !!sidebar && React.createElement("div", { className: classes.sidebar }, sidebar),
            React.createElement("div", { className: classes.content }, children))));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFnZUxheW91dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1BhZ2VMYXlvdXQvUGFnZUxheW91dC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLHFCQUFxQixNQUFNLHdDQUF3QyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMsT0FBTyxFQUFFLFVBQVUsRUFBbUIsTUFBTSxlQUFlLENBQUM7QUFFNUQsTUFBTSxDQUFDLElBQU0sbUJBQW1CLEdBQUcsa0JBQWtCLENBQUM7QUFFdEQsTUFBTSxDQUFDLElBQU0sU0FBUyxHQUFHLFVBQVUsQ0FDakMsVUFBQyxLQUFLLElBQUssT0FBQSxDQUFDO0lBQ1YsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLE1BQU07UUFDZixhQUFhLEVBQUUsUUFBUTtRQUN2QixJQUFJLEVBQUUsQ0FBQztRQUNQLFNBQVMsRUFBRSxNQUFNO1FBQ2pCLFdBQVcsRUFBRSxNQUFNO1FBQ25CLFVBQVUsRUFBRSxNQUFNO1FBQ2xCLFdBQVcsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUM3QixZQUFZLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7S0FDL0I7SUFDRCxRQUFRLEVBQUU7UUFDUixRQUFRLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7S0FDOUI7SUFDRCxlQUFlLEVBQUU7UUFDZixRQUFRLEVBQUUsVUFBVTtRQUNwQix5Q0FBeUM7UUFDekMsc0RBQXNEO1FBQ3RELFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzdCLFdBQVcsRUFBRSxDQUFDLEtBQUss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QUFlLE1BQUc7cUJBQzNDO29CQUNILENBQUMsQ0FBQyxTQUFTLElBR2QsUUFBUSxDQUNMLENBQ1AsRUFidUMsQ0FhdkM7WUFFRCxvQkFBQyxVQUFVLElBQ1QsS0FBSyxFQUFFLFdBQVcsRUFDbEIsU0FBUyxFQUNQLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFFN0QsS0FBSyxFQUFFLEtBQUssRUFDWixNQUFNLEVBQUUsWUFBWSxFQUNwQixlQUFlLEVBQUUscUJBQXFCLEVBQ3RDLE1BQU0sRUFBQyxNQUFNLEVBQ2IsT0FBTyxFQUFFLGFBQWEsRUFDdEIsZ0JBQWdCLEVBQUUsc0JBQXNCLEVBQ3hDLEtBQUssRUFBRSxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQ25ELElBQUksRUFBRSxJQUFJLEVBQ1YsYUFBYSxFQUFFLGFBQWEsR0FDNUIsQ0FDaUI7UUFFcEIsQ0FBQyxDQUFDLFVBQVUsSUFBSSw2QkFBSyxTQUFTLEVBQUUsT0FBTyxDQUFDLFVBQVUsSUFBRyxVQUFVLENBQU87UUFDdEUsQ0FBQyxDQUFDLElBQUksSUFBSSw2QkFBSyxTQUFTLEVBQUUsT0FBTyxDQUFDLElBQUksSUFBRyxJQUFJLENBQU87UUFFckQsNkJBQUssU0FBUyxFQUFFLE9BQU8sQ0FBQyxlQUFlO1lBQ3BDLENBQUMsQ0FBQyxPQUFPLElBQUksNkJBQUssU0FBUyxFQUFFLE9BQU8sQ0FBQyxPQUFPLElBQUcsT0FBTyxDQUFPO1lBQzlELDZCQUFLLFNBQVMsRUFBRSxPQUFPLENBQUMsT0FBTyxJQUFHLFFBQVEsQ0FBTyxDQUM3QyxDQUNGLENBQ1AsQ0FBQztBQUNKLENBQUMsQ0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUGFnZUxheW91dERlZmF1bHRIZXJvIGZyb20gJy4uLy4uL2Fzc2V0cy9QYWdlTGF5b3V0RGVmYXVsdEhlcm8uc3ZnJztcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICcuLi8uLi9zdHlsZXMnO1xuaW1wb3J0IHsgR2V0Q2xhc3NlcywgU3RhbmRhcmRQcm9wcyB9IGZyb20gJy4uLy4uL3R5cGVVdGlscyc7XG5pbXBvcnQgeyBQYWdlSGVhZGVyLCBQYWdlSGVhZGVyUHJvcHMgfSBmcm9tICcuLi9QYWdlSGVhZGVyJztcblxuZXhwb3J0IGNvbnN0IFBhZ2VMYXlvdXRTdHlsZXNLZXkgPSAnQ2hyb21hUGFnZUxheW91dCc7XG5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAodGhlbWUpID0+ICh7XG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICBmbGV4OiAxLFxuICAgICAgbWluSGVpZ2h0OiAnMTAwJScsXG4gICAgICBtYXJnaW5SaWdodDogJ2F1dG8nLFxuICAgICAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoNCksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoNCksXG4gICAgfSxcbiAgICBtYXhXaWR0aDoge1xuICAgICAgbWF4V2lkdGg6IHRoZW1lLnB4VG9SZW0oMTM0NCksXG4gICAgfSxcbiAgICBiYWNrZ3JvdW5kQ292ZXI6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgLy8gTmVnYXRpdmUgbWFyZ2luIHNvIHRoYXQgaXQgY2FuIHN0cmV0Y2hcbiAgICAgIC8vIG91dHNpZGUgb2YgdGhlIGRlZmF1bHQgcGFkZGluZyBzcGVjaWZpZWQgYnkgYHJvb3RgLlxuICAgICAgbWFyZ2luTGVmdDogLXRoZW1lLnNwYWNpbmcoNCksXG4gICAgICBtYXJnaW5SaWdodDogLXRoZW1lLnNwYWNpbmcoNCksXG4gICAgICBiYWNrZ3JvdW5kOiBgdXJsKCR7UGFnZUxheW91dERlZmF1bHRIZXJvfSkgJHt0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbn1gLFxuICAgICAgYmFja2dyb3VuZFNpemU6ICdjb3ZlcicsXG4gICAgICBtYXJnaW5Cb3R0b206IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgfSxcbiAgICBoZWFkZXJCYWNrZ3JvdW5kUGFkZGluZzoge1xuICAgICAgcGFkZGluZ1RvcDogdGhlbWUuc3BhY2luZygzKSxcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDQpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDQpLFxuICAgICAgcGFkZGluZ0JvdHRvbTogdGhlbWUuc3BhY2luZygzKSxcbiAgICB9LFxuICAgIGRpc2NsYWltZXI6IHtcbiAgICAgIHBhZGRpbmdCb3R0b206IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgfSxcbiAgICB0YWJzOiB7XG4gICAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDApLFxuICAgIH0sXG4gICAgc2lkZWJhcjoge1xuICAgICAgd2lkdGg6IHRoZW1lLnB4VG9SZW0oMTkyKSxcbiAgICAgIG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nKDMpLFxuICAgICAgZmxleEdyb3c6IDAsXG4gICAgICBmbGV4U2hyaW5rOiAwLFxuICAgIH0sXG4gICAgbGF5b3V0Q29udGFpbmVyOiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIG1hcmdpbkJvdHRvbTogdGhlbWUuc3BhY2luZyg0KSxcbiAgICB9LFxuICAgIGNvbnRlbnQ6IHtcbiAgICAgIGZsZXg6IDEsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgLy8gRml4IGZvciBmaXJlZm94IHNvIHRoZSBjb250ZW50IGRvZXNuJ3Qgb3ZlcmZsb3dcbiAgICAgIG1heFdpZHRoOiAnMTAwJScsXG4gICAgfSxcbiAgfSksXG4gIHsgbmFtZTogUGFnZUxheW91dFN0eWxlc0tleSB9XG4pO1xuXG5leHBvcnQgdHlwZSBQYWdlTGF5b3V0Q2xhc3NlcyA9IEdldENsYXNzZXM8dHlwZW9mIHVzZVN0eWxlcz47XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFnZUxheW91dFByb3BzXG4gIGV4dGVuZHMgU3RhbmRhcmRQcm9wczxIVE1MRGl2RWxlbWVudCwgUGFnZUxheW91dENsYXNzZXM+IHtcbiAgYmFja2dyb3VuZEltYWdlPzogc3RyaW5nO1xuICBkaXNjbGFpbWVyPzogUmVhY3QuUmVhY3ROb2RlO1xuICBoZWFkZXJBY3Rpb25zPzogUGFnZUhlYWRlclByb3BzWydhY3Rpb25zJ107XG4gIGhlYWRlckFsaWduPzogUGFnZUhlYWRlclByb3BzWydhbGlnbiddO1xuICBoZWFkZXJDZW50ZXI/OiBQYWdlSGVhZGVyUHJvcHNbJ2NlbnRlciddO1xuICBoZWFkZXJDZW50ZXJDbGFzc05hbWU/OiBQYWdlSGVhZGVyUHJvcHNbJ2NlbnRlckNsYXNzTmFtZSddO1xuICBoZWFkZXJBY3Rpb25zQ2xhc3NOYW1lPzogUGFnZUhlYWRlclByb3BzWydhY3Rpb25zQ2xhc3NOYW1lJ107XG4gIHNpZGViYXI/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIHRpdGxlPzogUGFnZUhlYWRlclByb3BzWyd0aXRsZSddO1xuICB0YWJzPzogUmVhY3QuUmVhY3ROb2RlO1xuICBtYXhXaWR0aD86IGJvb2xlYW47XG4gIGFwcGx5QmFja2dyb3VuZENvdmVyPzogYm9vbGVhbjtcbiAgbGVmdD86IFBhZ2VIZWFkZXJQcm9wc1snbGVmdCddO1xuICBsZWZ0Q2xhc3NOYW1lPzogUGFnZUhlYWRlclByb3BzWydsZWZ0Q2xhc3NOYW1lJ107XG59XG5cbmludGVyZmFjZSBDb25kaXRpb25hbFdyYXBwZXJQcm9wcyB7XG4gIGNvbmRpdGlvbjogYm9vbGVhbjtcbiAgd3JhcHBlcjogYW55O1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xufVxuXG5jb25zdCBDb25kaXRpb25hbFdyYXBwZXI6IFJlYWN0LkZDPENvbmRpdGlvbmFsV3JhcHBlclByb3BzPiA9ICh7XG4gIGNvbmRpdGlvbixcbiAgd3JhcHBlcixcbiAgY2hpbGRyZW4sXG59KSA9PiAoY29uZGl0aW9uID8gd3JhcHBlcihjaGlsZHJlbikgOiBjaGlsZHJlbik7XG5cbmV4cG9ydCBjb25zdCBQYWdlTGF5b3V0ID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MRGl2RWxlbWVudCwgUGFnZUxheW91dFByb3BzPihcbiAgKFxuICAgIHtcbiAgICAgIGJhY2tncm91bmRJbWFnZSxcbiAgICAgIGhlYWRlckFsaWduID0gJ2NlbnRlcicsXG4gICAgICBoZWFkZXJDZW50ZXIsXG4gICAgICBoZWFkZXJDZW50ZXJDbGFzc05hbWUsXG4gICAgICBoZWFkZXJBY3Rpb25zQ2xhc3NOYW1lLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzOiBhZGRpdGlvbmFsQ2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGRpc2NsYWltZXIsXG4gICAgICBoZWFkZXJBY3Rpb25zLFxuICAgICAgc2lkZWJhcixcbiAgICAgIHRpdGxlLFxuICAgICAgdGFicyxcbiAgICAgIG1heFdpZHRoID0gdHJ1ZSxcbiAgICAgIGFwcGx5QmFja2dyb3VuZENvdmVyID0gZmFsc2UsXG4gICAgICBsZWZ0LFxuICAgICAgbGVmdENsYXNzTmFtZSxcbiAgICAgIC4uLnJvb3RQcm9wc1xuICAgIH0sXG4gICAgcmVmXG4gICkgPT4ge1xuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoeyBjbGFzc2VzOiBhZGRpdGlvbmFsQ2xhc3NlcyB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICBjbGFzc05hbWU9e2Nsc3goXG4gICAgICAgICAgY2xhc3Nlcy5yb290LFxuICAgICAgICAgIG1heFdpZHRoICYmICFhcHBseUJhY2tncm91bmRDb3ZlciAmJiBjbGFzc2VzLm1heFdpZHRoLFxuICAgICAgICAgIGNsYXNzTmFtZVxuICAgICAgICApfVxuICAgICAgICB7Li4ucm9vdFByb3BzfVxuICAgICAgPlxuICAgICAgICA8Q29uZGl0aW9uYWxXcmFwcGVyXG4gICAgICAgICAgY29uZGl0aW9uPXthcHBseUJhY2tncm91bmRDb3Zlcn1cbiAgICAgICAgICB3cmFwcGVyPXsoY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSkgPT4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMuYmFja2dyb3VuZENvdmVyfVxuICAgICAgICAgICAgICBzdHlsZT17XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlXG4gICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtiYWNrZ3JvdW5kSW1hZ2V9KWAsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgPlxuICAgICAgICAgIDxQYWdlSGVhZGVyXG4gICAgICAgICAgICBhbGlnbj17aGVhZGVyQWxpZ259XG4gICAgICAgICAgICBjbGFzc05hbWU9e1xuICAgICAgICAgICAgICBhcHBseUJhY2tncm91bmRDb3ZlciA/IGNsYXNzZXMuaGVhZGVyQmFja2dyb3VuZFBhZGRpbmcgOiAnJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGl0bGU9e3RpdGxlfVxuICAgICAgICAgICAgY2VudGVyPXtoZWFkZXJDZW50ZXJ9XG4gICAgICAgICAgICBjZW50ZXJDbGFzc05hbWU9e2hlYWRlckNlbnRlckNsYXNzTmFtZX1cbiAgICAgICAgICAgIG1hcmdpbj1cIm5vbmVcIlxuICAgICAgICAgICAgYWN0aW9ucz17aGVhZGVyQWN0aW9uc31cbiAgICAgICAgICAgIGFjdGlvbnNDbGFzc05hbWU9e2hlYWRlckFjdGlvbnNDbGFzc05hbWV9XG4gICAgICAgICAgICBjb2xvcj17YXBwbHlCYWNrZ3JvdW5kQ292ZXIgPyAnaW52ZXJzZScgOiAnZGVmYXVsdCd9XG4gICAgICAgICAgICBsZWZ0PXtsZWZ0fVxuICAgICAgICAgICAgbGVmdENsYXNzTmFtZT17bGVmdENsYXNzTmFtZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0NvbmRpdGlvbmFsV3JhcHBlcj5cblxuICAgICAgICB7ISFkaXNjbGFpbWVyICYmIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmRpc2NsYWltZXJ9PntkaXNjbGFpbWVyfTwvZGl2Pn1cbiAgICAgICAgeyEhdGFicyAmJiA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy50YWJzfT57dGFic308L2Rpdj59XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMubGF5b3V0Q29udGFpbmVyfT5cbiAgICAgICAgICB7ISFzaWRlYmFyICYmIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnNpZGViYXJ9PntzaWRlYmFyfTwvZGl2Pn1cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb250ZW50fT57Y2hpbGRyZW59PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuKTtcbiJdfQ==