var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { TabList as BaseTabList } from 'reakit/Tab';
import { makeStyles } from '../../styles';
import { TabsContext } from './TabsContext';
export var TabListStylesKey = 'ChromaTabList';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        display: 'flex',
        flexDirection: 'row',
        borderBottom: "1px solid ".concat(theme.palette.divider),
        width: '100%',
        overflow: 'hidden',
    },
    pill: {
        background: 'rgba(132, 137, 166, 0.15)',
        borderRadius: theme.pxToRem(20),
        border: 'solid 1px transparent',
        display: 'inline-flex',
        flexDirection: 'row',
        margin: 0,
        maxHeight: theme.pxToRem(35),
        overflow: 'hidden',
        padding: theme.spacing(0.25),
        width: 'auto',
    },
    fullWidth: {
        width: '100%',
    },
}); }, { name: TabListStylesKey });
export var TabList = function (_a) {
    var _b;
    var ariaLabel = _a["aria-label"], className = _a.className, rootProps = __rest(_a, ['aria-label', "className"]);
    var classes = useStyles({});
    var _c = React.useContext(TabsContext), variant = _c.variant, fullWidth = _c.fullWidth, tabState = _c.tabState;
    return (React.createElement(BaseTabList, __assign({}, tabState, { "aria-label": ariaLabel, className: clsx(classes.root, className, (_b = {},
            _b[classes.pill] = variant === 'pill',
            _b[classes.fullWidth] = fullWidth,
            _b)) }, rootProps)));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFiTGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RhYnMvVGFiTGlzdC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUUsT0FBTyxJQUFJLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNwRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRTFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUMsTUFBTSxDQUFDLElBQU0sZ0JBQWdCLEdBQUcsZUFBZSxDQUFDO0FBRWhELE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQ2pDLFVBQUMsS0FBSyxJQUFLLE9BQUEsQ0FBQztJQUNWLElBQUksRUFBRTtRQUNKLE9BQU8sRUFBRSxNQUFNO1FBQ2YsYUFBYSxFQUFFLEtBQUs7UUFDcEIsWUFBWSxFQUFFLG9CQUFhLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFFO1FBQ2xELEtBQUssRUFBRSxNQUFNO1FBQ2IsUUFBUSxFQUFFLFFBQVE7S0FDbkI7SUFDRCxJQUFJLEVBQUU7UUFDSixVQUFVLEVBQUUsMkJBQTJCO1FBQ3ZDLFlBQVksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUMvQixNQUFNLEVBQUUsdUJBQXVCO1FBQy9CLE9BQU8sRUFBRSxhQUFhO1FBQ3RCLGFBQWEsRUFBRSxLQUFLO1FBQ3BCLE1BQU0sRUFBRSxDQUFDO1FBQ1QsU0FBUyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQzVCLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztRQUM1QixLQUFLLEVBQUUsTUFBTTtLQUNkO0lBQ0QsU0FBUyxFQUFFO1FBQ1QsS0FBSyxFQUFFLE1BQU07S0FDZDtDQUNGLENBQUMsRUF2QlMsQ0F1QlQsRUFDRixFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxDQUMzQixDQUFDO0FBU0YsTUFBTSxDQUFDLElBQU0sT0FBTyxHQUEyQixVQUFDLEVBSS9DOztJQUhDLElBQWMsU0FBUyxtQkFBQSxFQUN2QixTQUFTLGVBQUEsRUFDTixTQUFTLGNBSGtDLDJCQUkvQyxDQURhO0lBRVosSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3hCLElBQUEsS0FBbUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFBOUQsT0FBTyxhQUFBLEVBQUUsU0FBUyxlQUFBLEVBQUUsUUFBUSxjQUFrQyxDQUFDO0lBQ3ZFLE9BQU8sQ0FDTCxvQkFBQyxXQUFXLGVBQ04sUUFBUSxrQkFDQSxTQUFTLEVBQ3JCLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxTQUFTO1lBQ3JDLEdBQUMsT0FBTyxDQUFDLElBQUksSUFBRyxPQUFPLEtBQUssTUFBTTtZQUNsQyxHQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUcsU0FBUztnQkFDOUIsSUFDRSxTQUFTLEVBQ2IsQ0FDSCxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUYWJMaXN0IGFzIEJhc2VUYWJMaXN0IH0gZnJvbSAncmVha2l0L1RhYic7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnLi4vLi4vc3R5bGVzJztcbmltcG9ydCB7IEdldENsYXNzZXMgfSBmcm9tICcuLi8uLi90eXBlVXRpbHMnO1xuaW1wb3J0IHsgVGFic0NvbnRleHQgfSBmcm9tICcuL1RhYnNDb250ZXh0JztcblxuZXhwb3J0IGNvbnN0IFRhYkxpc3RTdHlsZXNLZXkgPSAnQ2hyb21hVGFiTGlzdCc7XG5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAodGhlbWUpID0+ICh7XG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHt0aGVtZS5wYWxldHRlLmRpdmlkZXJ9YCxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgfSxcbiAgICBwaWxsOiB7XG4gICAgICBiYWNrZ3JvdW5kOiAncmdiYSgxMzIsIDEzNywgMTY2LCAwLjE1KScsXG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnB4VG9SZW0oMjApLFxuICAgICAgYm9yZGVyOiAnc29saWQgMXB4IHRyYW5zcGFyZW50JyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIG1heEhlaWdodDogdGhlbWUucHhUb1JlbSgzNSksXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDAuMjUpLFxuICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICB9LFxuICAgIGZ1bGxXaWR0aDoge1xuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICB9LFxuICB9KSxcbiAgeyBuYW1lOiBUYWJMaXN0U3R5bGVzS2V5IH1cbik7XG5cbmV4cG9ydCB0eXBlIFRhYkxpc3RDbGFzc2VzID0gR2V0Q2xhc3Nlczx0eXBlb2YgdXNlU3R5bGVzPjtcblxuZXhwb3J0IGludGVyZmFjZSBUYWJMaXN0UHJvcHMge1xuICBbJ2FyaWEtbGFiZWwnXTogc3RyaW5nO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBUYWJMaXN0OiBSZWFjdC5GQzxUYWJMaXN0UHJvcHM+ID0gKHtcbiAgJ2FyaWEtbGFiZWwnOiBhcmlhTGFiZWwsXG4gIGNsYXNzTmFtZSxcbiAgLi4ucm9vdFByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoe30pO1xuICBjb25zdCB7IHZhcmlhbnQsIGZ1bGxXaWR0aCwgdGFiU3RhdGUgfSA9IFJlYWN0LnVzZUNvbnRleHQoVGFic0NvbnRleHQpO1xuICByZXR1cm4gKFxuICAgIDxCYXNlVGFiTGlzdFxuICAgICAgey4uLnRhYlN0YXRlfVxuICAgICAgYXJpYS1sYWJlbD17YXJpYUxhYmVsfVxuICAgICAgY2xhc3NOYW1lPXtjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCB7XG4gICAgICAgIFtjbGFzc2VzLnBpbGxdOiB2YXJpYW50ID09PSAncGlsbCcsXG4gICAgICAgIFtjbGFzc2VzLmZ1bGxXaWR0aF06IGZ1bGxXaWR0aCxcbiAgICAgIH0pfVxuICAgICAgey4uLnJvb3RQcm9wc31cbiAgICAvPlxuICApO1xufTtcbiJdfQ==