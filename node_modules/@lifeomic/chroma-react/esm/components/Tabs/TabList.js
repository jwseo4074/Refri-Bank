var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { TabList as BaseTabList } from 'reakit/Tab';
import { makeStyles } from '../../styles';
import { TabsContext } from './TabsContext';
export var TabListStylesKey = 'ChromaTabList';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        display: 'flex',
        flexDirection: 'row',
        borderBottom: "1px solid " + theme.palette.divider,
        width: '100%',
        overflow: 'hidden',
    },
}); }, { name: TabListStylesKey });
export var TabList = function (_a) {
    var ariaLabel = _a["aria-label"], className = _a.className, rootProps = __rest(_a, ['aria-label', "className"]);
    var classes = useStyles({});
    var tab = React.useContext(TabsContext);
    return (React.createElement(BaseTabList, __assign({}, tab, { "aria-label": ariaLabel, className: clsx(classes.root, className) }, rootProps)));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFiTGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RhYnMvVGFiTGlzdC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUUsT0FBTyxJQUFJLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNwRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRTFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUMsTUFBTSxDQUFDLElBQU0sZ0JBQWdCLEdBQUcsZUFBZSxDQUFDO0FBRWhELE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQ2pDLFVBQUMsS0FBSyxJQUFLLE9BQUEsQ0FBQztJQUNWLElBQUksRUFBRTtRQUNKLE9BQU8sRUFBRSxNQUFNO1FBQ2YsYUFBYSxFQUFFLEtBQUs7UUFDcEIsWUFBWSxFQUFFLGVBQWEsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFTO1FBQ2xELEtBQUssRUFBRSxNQUFNO1FBQ2IsUUFBUSxFQUFFLFFBQVE7S0FDbkI7Q0FDRixDQUFDLEVBUlMsQ0FRVCxFQUNGLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLENBQzNCLENBQUM7QUFTRixNQUFNLENBQUMsSUFBTSxPQUFPLEdBQTJCLFVBQUMsRUFJL0M7SUFIQyxJQUFBLDRCQUF1QixFQUN2Qix3QkFBUyxFQUNULG1EQUFZO0lBRVosSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLElBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDMUMsT0FBTyxDQUNMLG9CQUFDLFdBQVcsZUFDTixHQUFHLGtCQUNLLFNBQVMsRUFDckIsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUNwQyxTQUFTLEVBQ2IsQ0FDSCxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUYWJMaXN0IGFzIEJhc2VUYWJMaXN0IH0gZnJvbSAncmVha2l0L1RhYic7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnLi4vLi4vc3R5bGVzJztcbmltcG9ydCB7IEdldENsYXNzZXMgfSBmcm9tICcuLi8uLi90eXBlVXRpbHMnO1xuaW1wb3J0IHsgVGFic0NvbnRleHQgfSBmcm9tICcuL1RhYnNDb250ZXh0JztcblxuZXhwb3J0IGNvbnN0IFRhYkxpc3RTdHlsZXNLZXkgPSAnQ2hyb21hVGFiTGlzdCc7XG5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAodGhlbWUpID0+ICh7XG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHt0aGVtZS5wYWxldHRlLmRpdmlkZXJ9YCxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgfSxcbiAgfSksXG4gIHsgbmFtZTogVGFiTGlzdFN0eWxlc0tleSB9XG4pO1xuXG5leHBvcnQgdHlwZSBUYWJMaXN0Q2xhc3NlcyA9IEdldENsYXNzZXM8dHlwZW9mIHVzZVN0eWxlcz47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFiTGlzdFByb3BzIHtcbiAgWydhcmlhLWxhYmVsJ106IHN0cmluZztcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgVGFiTGlzdDogUmVhY3QuRkM8VGFiTGlzdFByb3BzPiA9ICh7XG4gICdhcmlhLWxhYmVsJzogYXJpYUxhYmVsLFxuICBjbGFzc05hbWUsXG4gIC4uLnJvb3RQcm9wc1xufSkgPT4ge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKHt9KTtcbiAgY29uc3QgdGFiID0gUmVhY3QudXNlQ29udGV4dChUYWJzQ29udGV4dCk7XG4gIHJldHVybiAoXG4gICAgPEJhc2VUYWJMaXN0XG4gICAgICB7Li4udGFifVxuICAgICAgYXJpYS1sYWJlbD17YXJpYUxhYmVsfVxuICAgICAgY2xhc3NOYW1lPXtjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKX1cbiAgICAgIHsuLi5yb290UHJvcHN9XG4gICAgLz5cbiAgKTtcbn07XG4iXX0=