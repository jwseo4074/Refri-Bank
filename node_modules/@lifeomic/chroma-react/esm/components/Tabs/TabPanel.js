var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { TabPanel as BaseTabPanel } from 'reakit/Tab';
import { makeStyles } from '../../styles';
import { TabsContext } from './TabsContext';
export var TabPanelStylesKey = 'ChromaTabPanel';
export var useStyles = makeStyles(function (_theme) { return ({
    root: {
        outline: 'none',
    },
}); }, { name: TabPanelStylesKey });
export var TabPanel = function (_a) {
    var className = _a.className, 
    // Reakit's TabPanel no longer requires a "stopId"
    // (in fact, it breaks things), so we destructure it out
    // for now
    stopId = _a.stopId, rootProps = __rest(_a, ["className", "stopId"]);
    var classes = useStyles({});
    var tab = React.useContext(TabsContext);
    return (React.createElement(BaseTabPanel, __assign({}, tab, { className: clsx(classes.root, className) }, rootProps)));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFiUGFuZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9UYWJzL1RhYlBhbmVsLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxRQUFRLElBQUksWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUc1QyxNQUFNLENBQUMsSUFBTSxpQkFBaUIsR0FBRyxnQkFBZ0IsQ0FBQztBQUVsRCxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsVUFBVSxDQUNqQyxVQUFDLE1BQU0sSUFBSyxPQUFBLENBQUM7SUFDWCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsTUFBTTtLQUNoQjtDQUNGLENBQUMsRUFKVSxDQUlWLEVBQ0YsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsQ0FDNUIsQ0FBQztBQVFGLE1BQU0sQ0FBQyxJQUFNLFFBQVEsR0FBNEIsVUFBQyxFQU9qRDtJQU5DLElBQUEsd0JBQVM7SUFDVCxrREFBa0Q7SUFDbEQsd0RBQXdEO0lBQ3hELFVBQVU7SUFDVixrQkFBTSxFQUNOLCtDQUFZO0lBRVosSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLElBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDMUMsT0FBTyxDQUNMLG9CQUFDLFlBQVksZUFDUCxHQUFHLElBQ1AsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUNwQyxTQUFTLEVBQ2IsQ0FDSCxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUYWJQYW5lbCBhcyBCYXNlVGFiUGFuZWwgfSBmcm9tICdyZWFraXQvVGFiJztcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICcuLi8uLi9zdHlsZXMnO1xuaW1wb3J0IHsgR2V0Q2xhc3NlcyB9IGZyb20gJy4uLy4uL3R5cGVVdGlscyc7XG5pbXBvcnQgeyBUYWJzQ29udGV4dCB9IGZyb20gJy4vVGFic0NvbnRleHQnO1xuaW1wb3J0IHsgVGFiU3RvcCB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgVGFiUGFuZWxTdHlsZXNLZXkgPSAnQ2hyb21hVGFiUGFuZWwnO1xuXG5leHBvcnQgY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhcbiAgKF90aGVtZSkgPT4gKHtcbiAgICByb290OiB7XG4gICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgfSxcbiAgfSksXG4gIHsgbmFtZTogVGFiUGFuZWxTdHlsZXNLZXkgfVxuKTtcblxuZXhwb3J0IHR5cGUgVGFiUGFuZWxDbGFzc2VzID0gR2V0Q2xhc3Nlczx0eXBlb2YgdXNlU3R5bGVzPjtcblxuZXhwb3J0IGludGVyZmFjZSBUYWJQYW5lbFByb3BzIGV4dGVuZHMgVGFiU3RvcCB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IFRhYlBhbmVsOiBSZWFjdC5GQzxUYWJQYW5lbFByb3BzPiA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgLy8gUmVha2l0J3MgVGFiUGFuZWwgbm8gbG9uZ2VyIHJlcXVpcmVzIGEgXCJzdG9wSWRcIlxuICAvLyAoaW4gZmFjdCwgaXQgYnJlYWtzIHRoaW5ncyksIHNvIHdlIGRlc3RydWN0dXJlIGl0IG91dFxuICAvLyBmb3Igbm93XG4gIHN0b3BJZCxcbiAgLi4ucm9vdFByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoe30pO1xuICBjb25zdCB0YWIgPSBSZWFjdC51c2VDb250ZXh0KFRhYnNDb250ZXh0KTtcbiAgcmV0dXJuIChcbiAgICA8QmFzZVRhYlBhbmVsXG4gICAgICB7Li4udGFifVxuICAgICAgY2xhc3NOYW1lPXtjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKX1cbiAgICAgIHsuLi5yb290UHJvcHN9XG4gICAgLz5cbiAgKTtcbn07XG4iXX0=