var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { TabPanel as BaseTabPanel } from 'reakit/Tab';
import { makeStyles } from '../../styles';
import { TabsContext } from './TabsContext';
export var TabPanelStylesKey = 'ChromaTabPanel';
export var useStyles = makeStyles(function (_theme) { return ({
    root: {
        outline: 'none',
    },
}); }, { name: TabPanelStylesKey });
export var TabPanel = function (_a) {
    var className = _a.className, 
    // Reakit's TabPanel no longer requires a "stopId"
    // (in fact, it breaks things), so we destructure it out
    // for now
    stopId = _a.stopId, rootProps = __rest(_a, ["className", "stopId"]);
    var classes = useStyles({});
    var tabState = React.useContext(TabsContext).tabState;
    return (React.createElement(BaseTabPanel, __assign({}, tabState, { className: clsx(classes.root, className) }, rootProps)));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFiUGFuZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9UYWJzL1RhYlBhbmVsLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxRQUFRLElBQUksWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUc1QyxNQUFNLENBQUMsSUFBTSxpQkFBaUIsR0FBRyxnQkFBZ0IsQ0FBQztBQUVsRCxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsVUFBVSxDQUNqQyxVQUFDLE1BQU0sSUFBSyxPQUFBLENBQUM7SUFDWCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsTUFBTTtLQUNoQjtDQUNGLENBQUMsRUFKVSxDQUlWLEVBQ0YsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsQ0FDNUIsQ0FBQztBQVFGLE1BQU0sQ0FBQyxJQUFNLFFBQVEsR0FBNEIsVUFBQyxFQU9qRDtJQU5DLElBQUEsU0FBUyxlQUFBO0lBQ1Qsa0RBQWtEO0lBQ2xELHdEQUF3RDtJQUN4RCxVQUFVO0lBQ1YsTUFBTSxZQUFBLEVBQ0gsU0FBUyxjQU5vQyx1QkFPakQsQ0FEYTtJQUVaLElBQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0QixJQUFBLFFBQVEsR0FBSyxLQUFLLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxTQUFsQyxDQUFtQztJQUNuRCxPQUFPLENBQ0wsb0JBQUMsWUFBWSxlQUNQLFFBQVEsSUFDWixTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQ3BDLFNBQVMsRUFDYixDQUNILENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRhYlBhbmVsIGFzIEJhc2VUYWJQYW5lbCB9IGZyb20gJ3JlYWtpdC9UYWInO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJy4uLy4uL3N0eWxlcyc7XG5pbXBvcnQgeyBHZXRDbGFzc2VzIH0gZnJvbSAnLi4vLi4vdHlwZVV0aWxzJztcbmltcG9ydCB7IFRhYnNDb250ZXh0IH0gZnJvbSAnLi9UYWJzQ29udGV4dCc7XG5pbXBvcnQgeyBUYWJTdG9wIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBUYWJQYW5lbFN0eWxlc0tleSA9ICdDaHJvbWFUYWJQYW5lbCc7XG5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAoX3RoZW1lKSA9PiAoe1xuICAgIHJvb3Q6IHtcbiAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICB9LFxuICB9KSxcbiAgeyBuYW1lOiBUYWJQYW5lbFN0eWxlc0tleSB9XG4pO1xuXG5leHBvcnQgdHlwZSBUYWJQYW5lbENsYXNzZXMgPSBHZXRDbGFzc2VzPHR5cGVvZiB1c2VTdHlsZXM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFRhYlBhbmVsUHJvcHMgZXh0ZW5kcyBUYWJTdG9wIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgVGFiUGFuZWw6IFJlYWN0LkZDPFRhYlBhbmVsUHJvcHM+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICAvLyBSZWFraXQncyBUYWJQYW5lbCBubyBsb25nZXIgcmVxdWlyZXMgYSBcInN0b3BJZFwiXG4gIC8vIChpbiBmYWN0LCBpdCBicmVha3MgdGhpbmdzKSwgc28gd2UgZGVzdHJ1Y3R1cmUgaXQgb3V0XG4gIC8vIGZvciBub3dcbiAgc3RvcElkLFxuICAuLi5yb290UHJvcHNcbn0pID0+IHtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcyh7fSk7XG4gIGNvbnN0IHsgdGFiU3RhdGUgfSA9IFJlYWN0LnVzZUNvbnRleHQoVGFic0NvbnRleHQpO1xuICByZXR1cm4gKFxuICAgIDxCYXNlVGFiUGFuZWxcbiAgICAgIHsuLi50YWJTdGF0ZX1cbiAgICAgIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSl9XG4gICAgICB7Li4ucm9vdFByb3BzfVxuICAgIC8+XG4gICk7XG59O1xuIl19