var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import * as React from 'react';
import { GlobalHotKeys } from 'react-hotkeys';
import { makeStyles } from '../../styles';
import { Button } from '../Button';
import { Chip } from '../Chip';
import { Modal } from '../Modal';
var KEY_MAP = {
    SHOW_KEYMAP_HELP: 'shift+?',
};
var BASE_KEY_MAP_DOCS = [
    {
        sequences: ['shift+?'],
        description: 'Show keyboard shortcuts',
    },
    {
        sequences: ['['],
        description: 'Toggle sidebar',
    },
];
export var KeymapHelpStylesKey = 'ChromaKeymapHelp';
export var useStyles = makeStyles(function (theme) { return ({
    root: {},
    sequence: {
        paddingLeft: theme.spacing(3.75),
    },
}); }, { name: KeymapHelpStylesKey });
export var KeymapHelp = function (_a) {
    var closeButtonText = _a.closeButtonText, keyMapDocs = _a.keyMapDocs;
    var classes = useStyles({});
    var _b = React.useState(false), isOpen = _b[0], setIsOpen = _b[1];
    var onClose = function () {
        setIsOpen(false);
    };
    var HANDLERS = {
        SHOW_KEYMAP_HELP: function () { return setIsOpen(true); },
    };
    var docs = __spreadArrays(BASE_KEY_MAP_DOCS);
    if (keyMapDocs) {
        keyMapDocs.forEach(function (x) { return docs.push(x); });
    }
    return (React.createElement(React.Fragment, null,
        React.createElement(GlobalHotKeys, { keyMap: KEY_MAP, handlers: HANDLERS },
            React.createElement("span", null)),
        React.createElement(Modal, { isOpen: isOpen, title: "Keyboard shortcuts", onDismiss: onClose, actions: React.createElement(Button, { variant: "contained", onClick: onClose }, closeButtonText || 'Close') },
            React.createElement(React.Fragment, null,
                React.createElement("table", null,
                    React.createElement("tbody", null, docs.map(function (_a) {
                        var sequences = _a.sequences, description = _a.description;
                        var name = sequences.join('|');
                        return (React.createElement("tr", { key: name },
                            React.createElement("td", null, description),
                            React.createElement("td", { className: classes.sequence }, sequences.map(function (sequence) { return (React.createElement(Chip, { key: sequence, label: sequence })); }))));
                    })))))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2V5bWFwSGVscC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0tleW1hcEhlbHAvS2V5bWFwSGVscC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUxQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDL0IsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVqQyxJQUFNLE9BQU8sR0FBRztJQUNkLGdCQUFnQixFQUFFLFNBQVM7Q0FDNUIsQ0FBQztBQUVGLElBQU0saUJBQWlCLEdBQW9CO0lBQ3pDO1FBQ0UsU0FBUyxFQUFFLENBQUMsU0FBUyxDQUFDO1FBQ3RCLFdBQVcsRUFBRSx5QkFBeUI7S0FDdkM7SUFDRDtRQUNFLFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUNoQixXQUFXLEVBQUUsZ0JBQWdCO0tBQzlCO0NBQ0YsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLG1CQUFtQixHQUFHLGtCQUFrQixDQUFDO0FBRXRELE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQ2pDLFVBQUMsS0FBSyxJQUFLLE9BQUEsQ0FBQztJQUNWLElBQUksRUFBRSxFQUFFO0lBQ1IsUUFBUSxFQUFFO1FBQ1IsV0FBVyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0tBQ2pDO0NBQ0YsQ0FBQyxFQUxTLENBS1QsRUFDRixFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRSxDQUM5QixDQUFDO0FBa0JGLE1BQU0sQ0FBQyxJQUFNLFVBQVUsR0FBOEIsVUFBQyxFQUdyRDtRQUZDLG9DQUFlLEVBQ2YsMEJBQVU7SUFFVixJQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEIsSUFBQSwwQkFBMkMsRUFBMUMsY0FBTSxFQUFFLGlCQUFrQyxDQUFDO0lBQ2xELElBQU0sT0FBTyxHQUFHO1FBQ2QsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25CLENBQUMsQ0FBQztJQUVGLElBQU0sUUFBUSxHQUFHO1FBQ2YsZ0JBQWdCLEVBQUUsY0FBTSxPQUFBLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBZixDQUFlO0tBQ3hDLENBQUM7SUFFRixJQUFNLElBQUksa0JBQU8saUJBQWlCLENBQUMsQ0FBQztJQUNwQyxJQUFJLFVBQVUsRUFBRTtRQUNkLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFaLENBQVksQ0FBQyxDQUFDO0tBQ3pDO0lBRUQsT0FBTyxDQUNMO1FBQ0Usb0JBQUMsYUFBYSxJQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVE7WUFDaEQsaUNBQVEsQ0FDTTtRQUNoQixvQkFBQyxLQUFLLElBQ0osTUFBTSxFQUFFLE1BQU0sRUFDZCxLQUFLLEVBQUMsb0JBQW9CLEVBQzFCLFNBQVMsRUFBRSxPQUFPLEVBQ2xCLE9BQU8sRUFDTCxvQkFBQyxNQUFNLElBQUMsT0FBTyxFQUFDLFdBQVcsRUFBQyxPQUFPLEVBQUUsT0FBTyxJQUN6QyxlQUFlLElBQUksT0FBTyxDQUNwQjtZQUdYO2dCQUNFO29CQUNFLG1DQUNHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxFQUEwQjs0QkFBeEIsd0JBQVMsRUFBRSw0QkFBVzt3QkFDakMsSUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFDakMsT0FBTyxDQUNMLDRCQUFJLEdBQUcsRUFBRSxJQUFJOzRCQUNYLGdDQUFLLFdBQVcsQ0FBTTs0QkFDdEIsNEJBQUksU0FBUyxFQUFFLE9BQU8sQ0FBQyxRQUFRLElBQzVCLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBQyxRQUFRLElBQUssT0FBQSxDQUMzQixvQkFBQyxJQUFJLElBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsUUFBUSxHQUFJLENBQ3pDLEVBRjRCLENBRTVCLENBQUMsQ0FDQyxDQUNGLENBQ04sQ0FBQztvQkFDSixDQUFDLENBQUMsQ0FDSSxDQUNGLENBQ1AsQ0FDRyxDQUNQLENBQ0osQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEdsb2JhbEhvdEtleXMgfSBmcm9tICdyZWFjdC1ob3RrZXlzJztcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICcuLi8uLi9zdHlsZXMnO1xuaW1wb3J0IHsgR2V0Q2xhc3NlcyB9IGZyb20gJy4uLy4uL3R5cGVVdGlscyc7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICcuLi9CdXR0b24nO1xuaW1wb3J0IHsgQ2hpcCB9IGZyb20gJy4uL0NoaXAnO1xuaW1wb3J0IHsgTW9kYWwgfSBmcm9tICcuLi9Nb2RhbCc7XG5cbmNvbnN0IEtFWV9NQVAgPSB7XG4gIFNIT1dfS0VZTUFQX0hFTFA6ICdzaGlmdCs/Jyxcbn07XG5cbmNvbnN0IEJBU0VfS0VZX01BUF9ET0NTOiBLZXlCaW5kaW5nRG9jW10gPSBbXG4gIHtcbiAgICBzZXF1ZW5jZXM6IFsnc2hpZnQrPyddLFxuICAgIGRlc2NyaXB0aW9uOiAnU2hvdyBrZXlib2FyZCBzaG9ydGN1dHMnLFxuICB9LFxuICB7XG4gICAgc2VxdWVuY2VzOiBbJ1snXSxcbiAgICBkZXNjcmlwdGlvbjogJ1RvZ2dsZSBzaWRlYmFyJyxcbiAgfSxcbl07XG5cbmV4cG9ydCBjb25zdCBLZXltYXBIZWxwU3R5bGVzS2V5ID0gJ0Nocm9tYUtleW1hcEhlbHAnO1xuXG5leHBvcnQgY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhcbiAgKHRoZW1lKSA9PiAoe1xuICAgIHJvb3Q6IHt9LFxuICAgIHNlcXVlbmNlOiB7XG4gICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygzLjc1KSxcbiAgICB9LFxuICB9KSxcbiAgeyBuYW1lOiBLZXltYXBIZWxwU3R5bGVzS2V5IH1cbik7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2V5QmluZGluZ0RvYyB7XG4gIHNlcXVlbmNlczogc3RyaW5nW107XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIEtleW1hcEhlbHBDbGFzc2VzID0gR2V0Q2xhc3Nlczx0eXBlb2YgdXNlU3R5bGVzPjtcblxuZXhwb3J0IGludGVyZmFjZSBLZXltYXBIZWxwUHJvcHMge1xuICAvKipcbiAgICogQWRkaXRpb25hbCBrZXkgbWFwIGRvY3MgdG8gZGlzcGxheS4gV2UgY2FuJ3QgdXNlIGdldEFwcGxpY2F0aW9uS2V5TWFwKClcbiAgICogYmVjYXVzZSBvZiBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5hMTMvcmVhY3QtaG90a2V5cy9pc3N1ZXMvMjI4XG4gICAqL1xuICBrZXlNYXBEb2NzPzogS2V5QmluZGluZ0RvY1tdO1xuICBjbG9zZUJ1dHRvblRleHQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBLZXltYXBIZWxwOiBSZWFjdC5GQzxLZXltYXBIZWxwUHJvcHM+ID0gKHtcbiAgY2xvc2VCdXR0b25UZXh0LFxuICBrZXlNYXBEb2NzLFxufSkgPT4ge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKHt9KTtcbiAgY29uc3QgW2lzT3Blbiwgc2V0SXNPcGVuXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3Qgb25DbG9zZSA9ICgpID0+IHtcbiAgICBzZXRJc09wZW4oZmFsc2UpO1xuICB9O1xuXG4gIGNvbnN0IEhBTkRMRVJTID0ge1xuICAgIFNIT1dfS0VZTUFQX0hFTFA6ICgpID0+IHNldElzT3Blbih0cnVlKSxcbiAgfTtcblxuICBjb25zdCBkb2NzID0gWy4uLkJBU0VfS0VZX01BUF9ET0NTXTtcbiAgaWYgKGtleU1hcERvY3MpIHtcbiAgICBrZXlNYXBEb2NzLmZvckVhY2goKHgpID0+IGRvY3MucHVzaCh4KSk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8R2xvYmFsSG90S2V5cyBrZXlNYXA9e0tFWV9NQVB9IGhhbmRsZXJzPXtIQU5ETEVSU30+XG4gICAgICAgIDxzcGFuIC8+XG4gICAgICA8L0dsb2JhbEhvdEtleXM+XG4gICAgICA8TW9kYWxcbiAgICAgICAgaXNPcGVuPXtpc09wZW59XG4gICAgICAgIHRpdGxlPVwiS2V5Ym9hcmQgc2hvcnRjdXRzXCJcbiAgICAgICAgb25EaXNtaXNzPXtvbkNsb3NlfVxuICAgICAgICBhY3Rpb25zPXtcbiAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJjb250YWluZWRcIiBvbkNsaWNrPXtvbkNsb3NlfT5cbiAgICAgICAgICAgIHtjbG9zZUJ1dHRvblRleHQgfHwgJ0Nsb3NlJ31cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgfVxuICAgICAgPlxuICAgICAgICA8PlxuICAgICAgICAgIDx0YWJsZT5cbiAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAge2RvY3MubWFwKCh7IHNlcXVlbmNlcywgZGVzY3JpcHRpb24gfSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBzZXF1ZW5jZXMuam9pbignfCcpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICA8dHIga2V5PXtuYW1lfT5cbiAgICAgICAgICAgICAgICAgICAgPHRkPntkZXNjcmlwdGlvbn08L3RkPlxuICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPXtjbGFzc2VzLnNlcXVlbmNlfT5cbiAgICAgICAgICAgICAgICAgICAgICB7c2VxdWVuY2VzLm1hcCgoc2VxdWVuY2UpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDaGlwIGtleT17c2VxdWVuY2V9IGxhYmVsPXtzZXF1ZW5jZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgIDwvPlxuICAgICAgPC9Nb2RhbD5cbiAgICA8Lz5cbiAgKTtcbn07XG4iXX0=