var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import * as React from 'react';
import { GlobalHotKeys } from 'react-hotkeys';
import { makeStyles } from '../../styles';
import { Button } from '../Button';
import { Chip } from '../Chip';
import { Modal } from '../Modal';
var KEY_MAP = {
    SHOW_KEYMAP_HELP: 'shift+?',
};
var BASE_KEY_MAP_DOCS = [
    {
        sequences: ['shift+?'],
        description: 'Show keyboard shortcuts',
    },
    {
        sequences: ['['],
        description: 'Toggle sidebar',
    },
];
export var KeymapHelpStylesKey = 'ChromaKeymapHelp';
export var useStyles = makeStyles(function (theme) { return ({
    root: {},
    sequence: {
        paddingLeft: theme.spacing(3.75),
    },
}); }, { name: KeymapHelpStylesKey });
export var KeymapHelp = function (_a) {
    var closeButtonText = _a.closeButtonText, keyMapDocs = _a.keyMapDocs, keyListenerTestId = _a.keyListenerTestId;
    var classes = useStyles({});
    var _b = React.useState(false), isOpen = _b[0], setIsOpen = _b[1];
    var onClose = function () {
        setIsOpen(false);
    };
    var HANDLERS = {
        SHOW_KEYMAP_HELP: function () { return setIsOpen(true); },
    };
    var docs = __spreadArray([], BASE_KEY_MAP_DOCS, true);
    if (keyMapDocs) {
        keyMapDocs.forEach(function (x) { return docs.push(x); });
    }
    return (React.createElement(React.Fragment, null,
        React.createElement(GlobalHotKeys, { keyMap: KEY_MAP, handlers: HANDLERS },
            React.createElement("span", { "data-testid": keyListenerTestId })),
        React.createElement(Modal, { isOpen: isOpen, title: "Keyboard shortcuts", onDismiss: onClose, actions: React.createElement(Button, { variant: "contained", onClick: onClose }, closeButtonText || 'Close') },
            React.createElement(React.Fragment, null,
                React.createElement("table", null,
                    React.createElement("tbody", null, docs.map(function (_a) {
                        var sequences = _a.sequences, description = _a.description;
                        var name = sequences.join('|');
                        return (React.createElement("tr", { key: name },
                            React.createElement("td", null, description),
                            React.createElement("td", { className: classes.sequence }, sequences.map(function (sequence) { return (React.createElement(Chip, { key: sequence, label: sequence })); }))));
                    })))))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2V5bWFwSGVscC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0tleW1hcEhlbHAvS2V5bWFwSGVscC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDL0IsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRTFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUMvQixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRWpDLElBQU0sT0FBTyxHQUFHO0lBQ2QsZ0JBQWdCLEVBQUUsU0FBUztDQUM1QixDQUFDO0FBRUYsSUFBTSxpQkFBaUIsR0FBb0I7SUFDekM7UUFDRSxTQUFTLEVBQUUsQ0FBQyxTQUFTLENBQUM7UUFDdEIsV0FBVyxFQUFFLHlCQUF5QjtLQUN2QztJQUNEO1FBQ0UsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDO1FBQ2hCLFdBQVcsRUFBRSxnQkFBZ0I7S0FDOUI7Q0FDRixDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sbUJBQW1CLEdBQUcsa0JBQWtCLENBQUM7QUFFdEQsTUFBTSxDQUFDLElBQU0sU0FBUyxHQUFHLFVBQVUsQ0FDakMsVUFBQyxLQUFLLElBQUssT0FBQSxDQUFDO0lBQ1YsSUFBSSxFQUFFLEVBQUU7SUFDUixRQUFRLEVBQUU7UUFDUixXQUFXLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7S0FDakM7Q0FDRixDQUFDLEVBTFMsQ0FLVCxFQUNGLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLENBQzlCLENBQUM7QUFvQkYsTUFBTSxDQUFDLElBQU0sVUFBVSxHQUE4QixVQUFDLEVBSXJEO1FBSEMsZUFBZSxxQkFBQSxFQUNmLFVBQVUsZ0JBQUEsRUFDVixpQkFBaUIsdUJBQUE7SUFFakIsSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3hCLElBQUEsS0FBc0IsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBMUMsTUFBTSxRQUFBLEVBQUUsU0FBUyxRQUF5QixDQUFDO0lBQ2xELElBQU0sT0FBTyxHQUFHO1FBQ2QsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25CLENBQUMsQ0FBQztJQUVGLElBQU0sUUFBUSxHQUFHO1FBQ2YsZ0JBQWdCLEVBQUUsY0FBTSxPQUFBLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBZixDQUFlO0tBQ3hDLENBQUM7SUFFRixJQUFNLElBQUkscUJBQU8saUJBQWlCLE9BQUMsQ0FBQztJQUNwQyxJQUFJLFVBQVUsRUFBRTtRQUNkLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFaLENBQVksQ0FBQyxDQUFDO0tBQ3pDO0lBRUQsT0FBTyxDQUNMO1FBQ0Usb0JBQUMsYUFBYSxJQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVE7WUFDaEQsNkNBQW1CLGlCQUFpQixHQUFJLENBQzFCO1FBQ2hCLG9CQUFDLEtBQUssSUFDSixNQUFNLEVBQUUsTUFBTSxFQUNkLEtBQUssRUFBQyxvQkFBb0IsRUFDMUIsU0FBUyxFQUFFLE9BQU8sRUFDbEIsT0FBTyxFQUNMLG9CQUFDLE1BQU0sSUFBQyxPQUFPLEVBQUMsV0FBVyxFQUFDLE9BQU8sRUFBRSxPQUFPLElBQ3pDLGVBQWUsSUFBSSxPQUFPLENBQ3BCO1lBR1g7Z0JBQ0U7b0JBQ0UsbUNBQ0csSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEVBQTBCOzRCQUF4QixTQUFTLGVBQUEsRUFBRSxXQUFXLGlCQUFBO3dCQUNqQyxJQUFNLElBQUksR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUNqQyxPQUFPLENBQ0wsNEJBQUksR0FBRyxFQUFFLElBQUk7NEJBQ1gsZ0NBQUssV0FBVyxDQUFNOzRCQUN0Qiw0QkFBSSxTQUFTLEVBQUUsT0FBTyxDQUFDLFFBQVEsSUFDNUIsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFDLFFBQVEsSUFBSyxPQUFBLENBQzNCLG9CQUFDLElBQUksSUFBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxRQUFRLEdBQUksQ0FDekMsRUFGNEIsQ0FFNUIsQ0FBQyxDQUNDLENBQ0YsQ0FDTixDQUFDO29CQUNKLENBQUMsQ0FBQyxDQUNJLENBQ0YsQ0FDUCxDQUNHLENBQ1AsQ0FDSixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgR2xvYmFsSG90S2V5cyB9IGZyb20gJ3JlYWN0LWhvdGtleXMnO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJy4uLy4uL3N0eWxlcyc7XG5pbXBvcnQgeyBHZXRDbGFzc2VzIH0gZnJvbSAnLi4vLi4vdHlwZVV0aWxzJztcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4uL0J1dHRvbic7XG5pbXBvcnQgeyBDaGlwIH0gZnJvbSAnLi4vQ2hpcCc7XG5pbXBvcnQgeyBNb2RhbCB9IGZyb20gJy4uL01vZGFsJztcblxuY29uc3QgS0VZX01BUCA9IHtcbiAgU0hPV19LRVlNQVBfSEVMUDogJ3NoaWZ0Kz8nLFxufTtcblxuY29uc3QgQkFTRV9LRVlfTUFQX0RPQ1M6IEtleUJpbmRpbmdEb2NbXSA9IFtcbiAge1xuICAgIHNlcXVlbmNlczogWydzaGlmdCs/J10sXG4gICAgZGVzY3JpcHRpb246ICdTaG93IGtleWJvYXJkIHNob3J0Y3V0cycsXG4gIH0sXG4gIHtcbiAgICBzZXF1ZW5jZXM6IFsnWyddLFxuICAgIGRlc2NyaXB0aW9uOiAnVG9nZ2xlIHNpZGViYXInLFxuICB9LFxuXTtcblxuZXhwb3J0IGNvbnN0IEtleW1hcEhlbHBTdHlsZXNLZXkgPSAnQ2hyb21hS2V5bWFwSGVscCc7XG5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKFxuICAodGhlbWUpID0+ICh7XG4gICAgcm9vdDoge30sXG4gICAgc2VxdWVuY2U6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDMuNzUpLFxuICAgIH0sXG4gIH0pLFxuICB7IG5hbWU6IEtleW1hcEhlbHBTdHlsZXNLZXkgfVxuKTtcblxuZXhwb3J0IGludGVyZmFjZSBLZXlCaW5kaW5nRG9jIHtcbiAgc2VxdWVuY2VzOiBzdHJpbmdbXTtcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgS2V5bWFwSGVscENsYXNzZXMgPSBHZXRDbGFzc2VzPHR5cGVvZiB1c2VTdHlsZXM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEtleW1hcEhlbHBQcm9wcyB7XG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIGtleSBtYXAgZG9jcyB0byBkaXNwbGF5LiBXZSBjYW4ndCB1c2UgZ2V0QXBwbGljYXRpb25LZXlNYXAoKVxuICAgKiBiZWNhdXNlIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbmExMy9yZWFjdC1ob3RrZXlzL2lzc3Vlcy8yMjhcbiAgICovXG4gIGtleU1hcERvY3M/OiBLZXlCaW5kaW5nRG9jW107XG4gIGNsb3NlQnV0dG9uVGV4dD86IHN0cmluZztcblxuICBrZXlMaXN0ZW5lclRlc3RJZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IEtleW1hcEhlbHA6IFJlYWN0LkZDPEtleW1hcEhlbHBQcm9wcz4gPSAoe1xuICBjbG9zZUJ1dHRvblRleHQsXG4gIGtleU1hcERvY3MsXG4gIGtleUxpc3RlbmVyVGVzdElkLFxufSkgPT4ge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKHt9KTtcbiAgY29uc3QgW2lzT3Blbiwgc2V0SXNPcGVuXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3Qgb25DbG9zZSA9ICgpID0+IHtcbiAgICBzZXRJc09wZW4oZmFsc2UpO1xuICB9O1xuXG4gIGNvbnN0IEhBTkRMRVJTID0ge1xuICAgIFNIT1dfS0VZTUFQX0hFTFA6ICgpID0+IHNldElzT3Blbih0cnVlKSxcbiAgfTtcblxuICBjb25zdCBkb2NzID0gWy4uLkJBU0VfS0VZX01BUF9ET0NTXTtcbiAgaWYgKGtleU1hcERvY3MpIHtcbiAgICBrZXlNYXBEb2NzLmZvckVhY2goKHgpID0+IGRvY3MucHVzaCh4KSk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8R2xvYmFsSG90S2V5cyBrZXlNYXA9e0tFWV9NQVB9IGhhbmRsZXJzPXtIQU5ETEVSU30+XG4gICAgICAgIDxzcGFuIGRhdGEtdGVzdGlkPXtrZXlMaXN0ZW5lclRlc3RJZH0gLz5cbiAgICAgIDwvR2xvYmFsSG90S2V5cz5cbiAgICAgIDxNb2RhbFxuICAgICAgICBpc09wZW49e2lzT3Blbn1cbiAgICAgICAgdGl0bGU9XCJLZXlib2FyZCBzaG9ydGN1dHNcIlxuICAgICAgICBvbkRpc21pc3M9e29uQ2xvc2V9XG4gICAgICAgIGFjdGlvbnM9e1xuICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cImNvbnRhaW5lZFwiIG9uQ2xpY2s9e29uQ2xvc2V9PlxuICAgICAgICAgICAge2Nsb3NlQnV0dG9uVGV4dCB8fCAnQ2xvc2UnfVxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICB9XG4gICAgICA+XG4gICAgICAgIDw+XG4gICAgICAgICAgPHRhYmxlPlxuICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICB7ZG9jcy5tYXAoKHsgc2VxdWVuY2VzLCBkZXNjcmlwdGlvbiB9KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IHNlcXVlbmNlcy5qb2luKCd8Jyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIDx0ciBrZXk9e25hbWV9PlxuICAgICAgICAgICAgICAgICAgICA8dGQ+e2Rlc2NyaXB0aW9ufTwvdGQ+XG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9e2NsYXNzZXMuc2VxdWVuY2V9PlxuICAgICAgICAgICAgICAgICAgICAgIHtzZXF1ZW5jZXMubWFwKChzZXF1ZW5jZSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPENoaXAga2V5PXtzZXF1ZW5jZX0gbGFiZWw9e3NlcXVlbmNlfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgPC8+XG4gICAgICA8L01vZGFsPlxuICAgIDwvPlxuICApO1xufTtcbiJdfQ==