var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import clsx from 'clsx';
import * as React from 'react';
import { Plus } from '@lifeomic/chromicons';
import { makeStyles } from '../../styles';
import { generateUniqueId } from '../_private/UniqueId';
import { Text } from '../Text';
export var ExpansionPanelStylesKey = 'ChromaExpansionPanel';
export var useStyles = makeStyles(function (theme) { return ({
    root: {
        width: '100%',
        borderBottom: "1px solid ".concat(theme.palette.divider),
    },
    rootOpen: {
        maxHeight: 'inherit',
    },
    button: {
        width: '100%',
        background: theme.palette.common.white,
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        position: 'relative',
        textAlign: 'left',
        border: 'none',
        outline: 'none',
        paddingLeft: theme.spacing(2),
        paddingRight: theme.spacing(2),
        paddingTop: theme.spacing(1.25),
        paddingBottom: theme.spacing(1.25),
        cursor: 'pointer',
        '&:focus': {
            outline: 'none',
        },
        '&:hover > p, &:focus > p': {
            color: theme.palette.black.main,
            transform: 'translate3d(2px, 0, 0)',
        },
    },
    buttonShadow: {
        boxShadow: theme.boxShadows.table,
    },
    title: {
        color: theme.palette.text.secondary,
        letterSpacing: 'initial',
        transition: 'color 0.5s ease, transform 0.5s ease',
    },
    icon: {
        transition: 'transform 0.25s ease',
        color: theme.palette.primary.main,
    },
    rotate: {
        transform: 'rotate(45deg)',
    },
    content: {
        maxHeight: 0,
        overflow: 'hidden',
        transition: 'max-height 0.25s ease-in-out',
    },
    inner: {
        display: 'flex',
        flexDirection: 'column',
        background: theme.palette.common.white,
        padding: theme.spacing(2),
        width: '100%',
        height: '100%',
        visibility: 'visible',
    },
    directionRow: {
        flexDirection: 'row',
    },
    innerHidden: {
        visibility: 'hidden',
    },
}); }, { name: ExpansionPanelStylesKey });
export var ExpansionPanel = function (_a) {
    var _b;
    var _c;
    var ariaOwnsId = _a.ariaOwnsId, children = _a.children, className = _a.className, contentClassName = _a.contentClassName, innerContentClassName = _a.innerContentClassName, onToggle = _a.onToggle, _d = _a.isOpen, isOpen = _d === void 0 ? false : _d, _e = _a.contentDirection, contentDirection = _e === void 0 ? 'column' : _e, title = _a.title, rootProps = __rest(_a, ["ariaOwnsId", "children", "className", "contentClassName", "innerContentClassName", "onToggle", "isOpen", "contentDirection", "title"]);
    var classes = useStyles({});
    var _f = React.useState(isOpen), isExpanded = _f[0], setIsExpanded = _f[1];
    var ref = React.useRef(null);
    var _g = React.useState(0), contentHeight = _g[0], setContentHeight = _g[1];
    var ariaId = React.useState(function () { return ariaOwnsId || generateUniqueId('exppanel-'); })[0];
    // Watch for `isOpen` changes
    React.useEffect(function () {
        setIsExpanded(isOpen);
    }, [isOpen]);
    // TODO: Look into https://medium.com/@teh_builder/ref-objects-inside-useeffect-hooks-eb7c15198780
    //
    // Determine the size of our content so we can expand/collapse
    // accordingly.  If the children are dynamically generated, we should
    // re-evaluate our size in case additional content is added/removed
    React.useEffect(function () {
        if (ref && ref.current && children) {
            setContentHeight(ref.current.scrollHeight + 25);
        }
    }, [children, (_c = ref === null || ref === void 0 ? void 0 : ref.current) === null || _c === void 0 ? void 0 : _c.scrollHeight]);
    var handleClick = React.useCallback(function (e) {
        e.preventDefault();
        e.stopPropagation();
        var newState = !isExpanded;
        if (typeof onToggle === 'function') {
            onToggle(newState);
        }
        setIsExpanded(newState);
    }, [isExpanded, onToggle]);
    return (React.createElement("div", __assign({ className: clsx(classes.root, isExpanded && classes.rootOpen, className) }, rootProps),
        React.createElement("button", { "aria-expanded": isExpanded, "aria-owns": ariaId, className: clsx(classes.button, isExpanded && classes.buttonShadow), onClick: handleClick, tabIndex: 0 },
            React.createElement(Text, { className: classes.title, size: "subbody", weight: "bold" }, title),
            React.createElement(Plus, { className: clsx(classes.icon, isExpanded && classes.rotate), "aria-hidden": "true", width: 18, height: 18 })),
        React.createElement("div", { "aria-hidden": !isExpanded, id: ariaId, className: clsx(classes.content, contentClassName), style: { maxHeight: isExpanded ? contentHeight : 0 } },
            React.createElement("div", { ref: ref, className: clsx(classes.inner, innerContentClassName, (_b = {},
                    _b[classes.directionRow] = contentDirection === 'row',
                    _b), !isExpanded && classes.innerHidden) }, children))));
};
export default ExpansionPanel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhwYW5zaW9uUGFuZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9FeHBhbnNpb25QYW5lbC9FeHBhbnNpb25QYW5lbC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUxQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRS9CLE1BQU0sQ0FBQyxJQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDO0FBRTlELE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQ2pDLFVBQUMsS0FBSyxJQUFLLE9BQUEsQ0FBQztJQUNWLElBQUksRUFBRTtRQUNKLEtBQUssRUFBRSxNQUFNO1FBQ2IsWUFBWSxFQUFFLG9CQUFhLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFFO0tBQ25EO0lBQ0QsUUFBUSxFQUFFO1FBQ1IsU0FBUyxFQUFFLFNBQVM7S0FDckI7SUFDRCxNQUFNLEVBQUU7UUFDTixLQUFLLEVBQUUsTUFBTTtRQUNiLFVBQVUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLO1FBQ3RDLE9BQU8sRUFBRSxNQUFNO1FBQ2YsY0FBYyxFQUFFLGVBQWU7UUFDL0IsVUFBVSxFQUFFLFFBQVE7UUFDcEIsUUFBUSxFQUFFLFVBQVU7UUFDcEIsU0FBUyxFQUFFLE1BQU07UUFDakIsTUFBTSxFQUFFLE1BQU07UUFDZCxPQUFPLEVBQUUsTUFBTTtRQUNmLFdBQVcsRUFB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QUFXLEVBQ3BCLFFBQVEsRUFBRSxDQUFDO1lBRVgsb0JBQUMsSUFBSSxJQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksRUFBQyxTQUFTLEVBQUMsTUFBTSxFQUFDLE1BQU0sSUFDekQsS0FBSyxDQUNEO1lBQ1Asb0JBQUMsSUFBSSxJQUNILFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxVQUFVLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxpQkFDL0MsTUFBTSxFQUNsQixLQUFLLEVBQUUsRUFBRSxFQUNULE1BQU0sRUFBRSxFQUFFLEdBQ1YsQ0FDSztRQUNULDRDQUNlLENBQUMsVUFBVSxFQUN4QixFQUFFLEVBQUUsTUFBTSxFQUNWLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxFQUNsRCxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUVwRCw2QkFDRSxHQUFHLEVBQUUsR0FBRyxFQUNSLFNBQVMsRUFBRSxJQUFJLENBQ2IsT0FBTyxDQUFDLEtBQUssRUFDYixxQkFBcUI7b0JBRW5CLEdBQUMsT0FBTyxDQUFDLFlBQVksSUFBRyxnQkFBZ0IsS0FBSyxLQUFLO3lCQUVwRCxDQUFDLFVBQVUsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUNuQyxJQUVBLFFBQVEsQ0FDTCxDQUNGLENBQ0YsQ0FDUCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsZUFBZSxjQUFjLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFBsdXMgfSBmcm9tICdAbGlmZW9taWMvY2hyb21pY29ucyc7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnLi4vLi4vc3R5bGVzJztcbmltcG9ydCB7IEdldENsYXNzZXMgfSBmcm9tICcuLi8uLi90eXBlVXRpbHMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVVbmlxdWVJZCB9IGZyb20gJy4uL19wcml2YXRlL1VuaXF1ZUlkJztcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi9UZXh0JztcblxuZXhwb3J0IGNvbnN0IEV4cGFuc2lvblBhbmVsU3R5bGVzS2V5ID0gJ0Nocm9tYUV4cGFuc2lvblBhbmVsJztcblxuZXhwb3J0IGNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoXG4gICh0aGVtZSkgPT4gKHtcbiAgICByb290OiB7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5kaXZpZGVyfWAsXG4gICAgfSxcbiAgICByb290T3Blbjoge1xuICAgICAgbWF4SGVpZ2h0OiAnaW5oZXJpdCcsXG4gICAgfSxcbiAgICBidXR0b246IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBiYWNrZ3JvdW5kOiB0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgcGFkZGluZ1RvcDogdGhlbWUuc3BhY2luZygxLjI1KSxcbiAgICAgIHBhZGRpbmdCb3R0b206IHRoZW1lLnNwYWNpbmcoMS4yNSksXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICB9LFxuICAgICAgJyY6aG92ZXIgPiBwLCAmOmZvY3VzID4gcCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYmxhY2subWFpbixcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMnB4LCAwLCAwKScsXG4gICAgICB9LFxuICAgIH0sXG4gICAgYnV0dG9uU2hhZG93OiB7XG4gICAgICBib3hTaGFkb3c6IHRoZW1lLmJveFNoYWRvd3MudGFibGUsXG4gICAgfSxcbiAgICB0aXRsZToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gICAgICBsZXR0ZXJTcGFjaW5nOiAnaW5pdGlhbCcsXG4gICAgICB0cmFuc2l0aW9uOiAnY29sb3IgMC41cyBlYXNlLCB0cmFuc2Zvcm0gMC41cyBlYXNlJyxcbiAgICB9LFxuICAgIGljb246IHtcbiAgICAgIHRyYW5zaXRpb246ICd0cmFuc2Zvcm0gMC4yNXMgZWFzZScsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgfSxcbiAgICByb3RhdGU6IHtcbiAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSg0NWRlZyknLFxuICAgIH0sXG4gICAgY29udGVudDoge1xuICAgICAgbWF4SGVpZ2h0OiAwLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgdHJhbnNpdGlvbjogJ21heC1oZWlnaHQgMC4yNXMgZWFzZS1pbi1vdXQnLFxuICAgIH0sXG4gICAgaW5uZXI6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgYmFja2dyb3VuZDogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnLFxuICAgIH0sXG4gICAgZGlyZWN0aW9uUm93OiB7XG4gICAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICB9LFxuICAgIGlubmVySGlkZGVuOiB7XG4gICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICB9LFxuICB9KSxcbiAgeyBuYW1lOiBFeHBhbnNpb25QYW5lbFN0eWxlc0tleSB9XG4pO1xuXG5leHBvcnQgdHlwZSBFeHBhbnNpb25QYW5lbENsYXNzZXMgPSBHZXRDbGFzc2VzPHR5cGVvZiB1c2VTdHlsZXM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEV4cGFuc2lvblBhbmVsUHJvcHNcbiAgZXh0ZW5kcyBSZWFjdC5EZXRhaWxlZEhUTUxQcm9wczxcbiAgICBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD4sXG4gICAgSFRNTERpdkVsZW1lbnRcbiAgPiB7XG4gIGFyaWFPd25zSWQ/OiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBjb250ZW50Q2xhc3NOYW1lPzogc3RyaW5nO1xuICBpbm5lckNvbnRlbnRDbGFzc05hbWU/OiBzdHJpbmc7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIG9uVG9nZ2xlPzogKGlzRXhwYW5kZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XG4gIGlzT3Blbj86IGJvb2xlYW47XG4gIGNvbnRlbnREaXJlY3Rpb24/OiAncm93JyB8ICdjb2x1bW4nO1xufVxuXG5leHBvcnQgY29uc3QgRXhwYW5zaW9uUGFuZWw6IFJlYWN0LkZDPEV4cGFuc2lvblBhbmVsUHJvcHM+ID0gKHtcbiAgYXJpYU93bnNJZCxcbiAgY2hpbGRyZW4sXG4gIGNsYXNzTmFtZSxcbiAgY29udGVudENsYXNzTmFtZSxcbiAgaW5uZXJDb250ZW50Q2xhc3NOYW1lLFxuICBvblRvZ2dsZSxcbiAgaXNPcGVuID0gZmFsc2UsXG4gIGNvbnRlbnREaXJlY3Rpb24gPSAnY29sdW1uJyxcbiAgdGl0bGUsXG4gIC4uLnJvb3RQcm9wc1xufSkgPT4ge1xuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKHt9KTtcbiAgY29uc3QgW2lzRXhwYW5kZWQsIHNldElzRXhwYW5kZWRdID0gUmVhY3QudXNlU3RhdGUoaXNPcGVuKTtcblxuICBjb25zdCByZWYgPSBSZWFjdC51c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBbY29udGVudEhlaWdodCwgc2V0Q29udGVudEhlaWdodF0gPSBSZWFjdC51c2VTdGF0ZTxudW1iZXI+KDApO1xuXG4gIGNvbnN0IFthcmlhSWRdID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nPihcbiAgICAoKSA9PiBhcmlhT3duc0lkIHx8IGdlbmVyYXRlVW5pcXVlSWQoJ2V4cHBhbmVsLScpXG4gICk7XG5cbiAgLy8gV2F0Y2ggZm9yIGBpc09wZW5gIGNoYW5nZXNcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRJc0V4cGFuZGVkKGlzT3Blbik7XG4gIH0sIFtpc09wZW5dKTtcblxuICAvLyBUT0RPOiBMb29rIGludG8gaHR0cHM6Ly9tZWRpdW0uY29tL0B0ZWhfYnVpbGRlci9yZWYtb2JqZWN0cy1pbnNpZGUtdXNlZWZmZWN0LWhvb2tzLWViN2MxNTE5ODc4MFxuICAvL1xuICAvLyBEZXRlcm1pbmUgdGhlIHNpemUgb2Ygb3VyIGNvbnRlbnQgc28gd2UgY2FuIGV4cGFuZC9jb2xsYXBzZVxuICAvLyBhY2NvcmRpbmdseS4gIElmIHRoZSBjaGlsZHJlbiBhcmUgZHluYW1pY2FsbHkgZ2VuZXJhdGVkLCB3ZSBzaG91bGRcbiAgLy8gcmUtZXZhbHVhdGUgb3VyIHNpemUgaW4gY2FzZSBhZGRpdGlvbmFsIGNvbnRlbnQgaXMgYWRkZWQvcmVtb3ZlZFxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyZWYgJiYgcmVmLmN1cnJlbnQgJiYgY2hpbGRyZW4pIHtcbiAgICAgIHNldENvbnRlbnRIZWlnaHQocmVmLmN1cnJlbnQuc2Nyb2xsSGVpZ2h0ICsgMjUpO1xuICAgIH1cbiAgfSwgW2NoaWxkcmVuLCByZWY/LmN1cnJlbnQ/LnNjcm9sbEhlaWdodF0pO1xuXG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKGU6IFJlYWN0LlN5bnRoZXRpY0V2ZW50KSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICBjb25zdCBuZXdTdGF0ZSA9ICFpc0V4cGFuZGVkO1xuICAgICAgaWYgKHR5cGVvZiBvblRvZ2dsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvblRvZ2dsZShuZXdTdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHNldElzRXhwYW5kZWQobmV3U3RhdGUpO1xuICAgIH0sXG4gICAgW2lzRXhwYW5kZWQsIG9uVG9nZ2xlXVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtjbHN4KGNsYXNzZXMucm9vdCwgaXNFeHBhbmRlZCAmJiBjbGFzc2VzLnJvb3RPcGVuLCBjbGFzc05hbWUpfVxuICAgICAgey4uLnJvb3RQcm9wc31cbiAgICA+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGFyaWEtZXhwYW5kZWQ9e2lzRXhwYW5kZWR9XG4gICAgICAgIGFyaWEtb3ducz17YXJpYUlkfVxuICAgICAgICBjbGFzc05hbWU9e2Nsc3goY2xhc3Nlcy5idXR0b24sIGlzRXhwYW5kZWQgJiYgY2xhc3Nlcy5idXR0b25TaGFkb3cpfVxuICAgICAgICBvbkNsaWNrPXtoYW5kbGVDbGlja31cbiAgICAgICAgdGFiSW5kZXg9ezB9XG4gICAgICA+XG4gICAgICAgIDxUZXh0IGNsYXNzTmFtZT17Y2xhc3Nlcy50aXRsZX0gc2l6ZT1cInN1YmJvZHlcIiB3ZWlnaHQ9XCJib2xkXCI+XG4gICAgICAgICAge3RpdGxlfVxuICAgICAgICA8L1RleHQ+XG4gICAgICAgIDxQbHVzXG4gICAgICAgICAgY2xhc3NOYW1lPXtjbHN4KGNsYXNzZXMuaWNvbiwgaXNFeHBhbmRlZCAmJiBjbGFzc2VzLnJvdGF0ZSl9XG4gICAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgICAgICB3aWR0aD17MTh9XG4gICAgICAgICAgaGVpZ2h0PXsxOH1cbiAgICAgICAgLz5cbiAgICAgIDwvYnV0dG9uPlxuICAgICAgPGRpdlxuICAgICAgICBhcmlhLWhpZGRlbj17IWlzRXhwYW5kZWR9XG4gICAgICAgIGlkPXthcmlhSWR9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xzeChjbGFzc2VzLmNvbnRlbnQsIGNvbnRlbnRDbGFzc05hbWUpfVxuICAgICAgICBzdHlsZT17eyBtYXhIZWlnaHQ6IGlzRXhwYW5kZWQgPyBjb250ZW50SGVpZ2h0IDogMCB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgICAgY2xhc3NOYW1lPXtjbHN4KFxuICAgICAgICAgICAgY2xhc3Nlcy5pbm5lcixcbiAgICAgICAgICAgIGlubmVyQ29udGVudENsYXNzTmFtZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgW2NsYXNzZXMuZGlyZWN0aW9uUm93XTogY29udGVudERpcmVjdGlvbiA9PT0gJ3JvdycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgIWlzRXhwYW5kZWQgJiYgY2xhc3Nlcy5pbm5lckhpZGRlblxuICAgICAgICAgICl9XG4gICAgICAgID5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBFeHBhbnNpb25QYW5lbDtcbiJdfQ==