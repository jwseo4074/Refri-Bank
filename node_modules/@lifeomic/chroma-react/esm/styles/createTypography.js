import deepmerge from 'deepmerge';
export var fontFamilies = {
    sansSerif: '"Lato", Helvetica, Roboto, Arial, "Lucida Grande", sans-serif',
    monospace: '"Ubuntu Mono", Consolas, "Lucida Console", Monaco, Courier, monospace',
};
export var fontWeights = {
    lighter: 100,
    light: 300,
    regular: 400,
    bold: 700,
    bolder: 900,
};
export var fontSizes = {
    h1: '3rem',
    h2: '2.25rem',
    h3: '1.875rem',
    h4: '1.5rem',
    h5: '1.25rem',
    h6: '1.125rem',
    body: '1rem',
    button: '0.75rem',
    subtitle: '0.875rem',
    caption: '0.75rem',
    tooltip: '0.6875rem',
    code: '1rem',
};
var baseTypography = {
    fontFamily: fontFamilies.sansSerif,
    fontFamilyMonospace: fontFamilies.monospace,
    fontWeightLighter: fontWeights.lighter,
    fontWeightLight: fontWeights.light,
    fontWeightRegular: fontWeights.regular,
    fontWeightMedium: fontWeights.regular,
    fontWeightBold: fontWeights.bold,
    fontWeightBolder: fontWeights.bolder,
    h1: {
        fontSize: fontSizes.h1,
    },
    h2: {
        fontSize: fontSizes.h2,
    },
    h3: {
        fontSize: fontSizes.h3,
    },
    h4: {
        fontSize: fontSizes.h4,
    },
    h5: {
        fontSize: fontSizes.h5,
    },
    h6: {
        fontSize: fontSizes.h6,
    },
    body1: {
        fontSize: fontSizes.body,
    },
    body2: {
        fontSize: fontSizes.subtitle,
    },
    subtitle1: {
        fontSize: fontSizes.subtitle,
    },
    subtitle2: {
        fontSize: fontSizes.subtitle,
    },
    button: {
        textTransform: 'initial',
        fontSize: fontSizes.button,
        fontWeight: fontWeights.bold,
        letterSpacing: 0.5,
        lineHeight: 1.4,
    },
    caption: {
        fontSize: fontSizes.caption,
    },
};
export var createTypography = function (typography) {
    if (typography === void 0) { typography = {}; }
    return deepmerge(baseTypography, typography, { clone: false });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlVHlwb2dyYXBoeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZXMvY3JlYXRlVHlwb2dyYXBoeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxPQUFPLFNBQVMsTUFBTSxXQUFXLENBQUM7QUE4QmxDLE1BQU0sQ0FBQyxJQUFNLFlBQVksR0FBZTtJQUN0QyxTQUFTLEVBQUUsK0RBQStEO0lBQzFFLFNBQVMsRUFDUCx1RUFBdUU7Q0FDMUUsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLFdBQVcsR0FBZTtJQUNyQyxPQUFPLEVBQUUsR0FBRztJQUNaLEtBQUssRUFBRSxHQUFHO0lBQ1YsT0FBTyxFQUFFLEdBQUc7SUFDWixJQUFJLEVBQUUsR0FBRztJQUNULE1BQU0sRUFBRSxHQUFHO0NBQ1osQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBYTtJQUNqQyxFQUFFLEVBQUUsTUFBTTtJQUNWLEVBQUUsRUFBRSxTQUFTO0lBQ2IsRUFBRSxFQUFFLFVBQVU7SUFDZCxFQUFFLEVBQUUsUUFBUTtJQUNaLEVBQUUsRUFBRSxTQUFTO0lBQ2IsRUFBRSxFQUFFLFVBQVU7SUFDZCxJQUFJLEVBQUUsTUFBTTtJQUNaLE1BQU0sRUFBRSxTQUFTO0lBQ2pCLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLE9BQU8sRUFBRSxTQUFTO0lBQ2xCLE9BQU8sRUFBRSxXQUFXO0lBQ3BCLElBQUksRUFBRSxNQUFNO0NBQ2IsQ0FBQztBQWVGLElBQU0sY0FBYyxHQUFzQjtJQUN4QyxVQUFVLEVBQUUsWUFBWSxDQUFDLFNBQVM7SUFDbEMsbUJBQW1CLEVBQUUsWUFBWSxDQUFDLFNBQVM7SUFDM0MsaUJBQWlCLEVBQUUsV0FBVyxDQUFDLE9BQU87SUFDdEMsZUFBZSxFQUFFLFdBQVcsQ0FBQyxLQUFLO0lBQ2xDLGlCQUFpQixFQUFFLFdBQVcsQ0FBQyxPQUFPO0lBQ3RDLGdCQUFnQixFQUFFLFdBQVcsQ0FBQyxPQUFPO0lBQ3JDLGNBQWMsRUFBRSxXQUFXLENBQUMsSUFBSTtJQUNoQyxnQkFBZ0IsRUFBRSxXQUFXLENBQUMsTUFBTTtJQUNwQyxFQUFFLEVBQUU7UUFDRixRQUFRLEVBQUUsU0FBUyxDQUFDLEVBQUU7S0FDdkI7SUFDRCxFQUFFLEVBQUU7UUFDRixRQUFRLEVBQUUsU0FBUyxDQUFDLEVBQUU7S0FDdkI7SUFDRCxFQUFFLEVBQUU7UUFDRixRQUFRLEVBQUUsU0FBUyxDQUFDLEVBQUU7S0FDdkI7SUFDRCxFQUFFLEVBQUU7UUFDRixRQUFRLEVBQUUsU0FBUyxDQUFDLEVBQUU7S0FDdkI7SUFDRCxFQUFFLEVBQUU7UUFDRixRQUFRLEVBQUUsU0FBUyxDQUFDLEVBQUU7S0FDdkI7SUFDRCxFQUFFLEVBQUU7UUFDRixRQUFRLEVBQUUsU0FBUyxDQUFDLEVBQUU7S0FDdkI7SUFDRCxLQUFLLEVBQUU7UUFDTCxRQUFRLEVBQUUsU0FBUyxDQUFDLElBQUk7S0FDekI7SUFDRCxLQUFLLEVBQUU7UUFDTCxRQUFRLEVBQUUsU0FBUyxDQUFDLFFBQVE7S0FDN0I7SUFDRCxTQUFTLEVBQUU7UUFDVCxRQUFRLEVBQUUsU0FBUyxDQUFDLFFBQVE7S0FDN0I7SUFDRCxTQUFTLEVBQUU7UUFDVCxRQUFRLEVBQUUsU0FBUyxDQUFDLFFBQVE7S0FDN0I7SUFDRCxNQUFNLEVBQUU7UUFDTixhQUFhLEVBQUUsU0FBUztRQUN4QixRQUFRLEVBQUUsU0FBUyxDQUFDLE1BQU07UUFDMUIsVUFBVSxFQUFFLFdBQVcsQ0FBQyxJQUFJO1FBQzVCLGFBQWEsRUFBRSxHQUFHO1FBQ2xCLFVBQVUsRUFBRSxHQUFHO0tBQ2hCO0lBQ0QsT0FBTyxFQUFFO1FBQ1AsUUFBUSxFQUFFLFNBQVMsQ0FBQyxPQUFPO0tBQzVCO0NBQ0YsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLGdCQUFnQixHQUFHLFVBQzlCLFVBQWtDO0lBQWxDLDJCQUFBLEVBQUEsZUFBa0M7SUFFbEMsT0FBTyxTQUFTLENBQUMsY0FBYyxFQUFFLFVBQVUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQ2pFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFR5cG9ncmFwaHkgYXMgTVVJVHlwb2dyYXBoeSxcbiAgVHlwb2dyYXBoeU9wdGlvbnMgYXMgTVVJVHlwb2dyYXBoeU9wdGlvbnMsXG59IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5JztcbmltcG9ydCB7IENTU1Byb3BlcnRpZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ2RlZXBtZXJnZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRm9udEZhbWlseSB7XG4gIHNhbnNTZXJpZjogQ1NTUHJvcGVydGllc1snZm9udEZhbWlseSddO1xuICBtb25vc3BhY2U6IENTU1Byb3BlcnRpZXNbJ2ZvbnRGYW1pbHknXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGb250V2VpZ2h0IHtcbiAgbGlnaHRlcjogQ1NTUHJvcGVydGllc1snZm9udFdlaWdodCddO1xuICBsaWdodDogQ1NTUHJvcGVydGllc1snZm9udFdlaWdodCddO1xuICByZWd1bGFyOiBDU1NQcm9wZXJ0aWVzWydmb250V2VpZ2h0J107XG4gIGJvbGQ6IENTU1Byb3BlcnRpZXNbJ2ZvbnRXZWlnaHQnXTtcbiAgYm9sZGVyOiBDU1NQcm9wZXJ0aWVzWydmb250V2VpZ2h0J107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRm9udFNpemUge1xuICBoMTogc3RyaW5nO1xuICBoMjogc3RyaW5nO1xuICBoMzogc3RyaW5nO1xuICBoNDogc3RyaW5nO1xuICBoNTogc3RyaW5nO1xuICBoNjogc3RyaW5nO1xuICBib2R5OiBzdHJpbmc7XG4gIGJ1dHRvbjogc3RyaW5nO1xuICBzdWJ0aXRsZTogc3RyaW5nO1xuICBjYXB0aW9uOiBzdHJpbmc7XG4gIHRvb2x0aXA6IHN0cmluZztcbiAgY29kZTogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgZm9udEZhbWlsaWVzOiBGb250RmFtaWx5ID0ge1xuICBzYW5zU2VyaWY6ICdcIkxhdG9cIiwgSGVsdmV0aWNhLCBSb2JvdG8sIEFyaWFsLCBcIkx1Y2lkYSBHcmFuZGVcIiwgc2Fucy1zZXJpZicsXG4gIG1vbm9zcGFjZTpcbiAgICAnXCJVYnVudHUgTW9ub1wiLCBDb25zb2xhcywgXCJMdWNpZGEgQ29uc29sZVwiLCBNb25hY28sIENvdXJpZXIsIG1vbm9zcGFjZScsXG59O1xuXG5leHBvcnQgY29uc3QgZm9udFdlaWdodHM6IEZvbnRXZWlnaHQgPSB7XG4gIGxpZ2h0ZXI6IDEwMCxcbiAgbGlnaHQ6IDMwMCxcbiAgcmVndWxhcjogNDAwLFxuICBib2xkOiA3MDAsXG4gIGJvbGRlcjogOTAwLFxufTtcblxuZXhwb3J0IGNvbnN0IGZvbnRTaXplczogRm9udFNpemUgPSB7XG4gIGgxOiAnM3JlbScsXG4gIGgyOiAnMi4yNXJlbScsXG4gIGgzOiAnMS44NzVyZW0nLFxuICBoNDogJzEuNXJlbScsXG4gIGg1OiAnMS4yNXJlbScsXG4gIGg2OiAnMS4xMjVyZW0nLFxuICBib2R5OiAnMXJlbScsXG4gIGJ1dHRvbjogJzAuNzVyZW0nLFxuICBzdWJ0aXRsZTogJzAuODc1cmVtJyxcbiAgY2FwdGlvbjogJzAuNzVyZW0nLFxuICB0b29sdGlwOiAnMC42ODc1cmVtJyxcbiAgY29kZTogJzFyZW0nLFxufTtcblxuaW50ZXJmYWNlIEN1c3RvbVR5cG9ncmFwaHlQcm9wZXJ0aWVzIHtcbiAgZm9udEZhbWlseU1vbm9zcGFjZTogQ1NTUHJvcGVydGllc1snZm9udEZhbWlseSddO1xuICBmb250V2VpZ2h0Qm9sZDogQ1NTUHJvcGVydGllc1snZm9udFdlaWdodCddO1xuICBmb250V2VpZ2h0Qm9sZGVyOiBDU1NQcm9wZXJ0aWVzWydmb250V2VpZ2h0J107XG4gIGZvbnRXZWlnaHRMaWdodGVyOiBDU1NQcm9wZXJ0aWVzWydmb250V2VpZ2h0J107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHlwb2dyYXBoeSBleHRlbmRzIE1VSVR5cG9ncmFwaHksIEN1c3RvbVR5cG9ncmFwaHlQcm9wZXJ0aWVzIHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHlwb2dyYXBoeU9wdGlvbnNcbiAgZXh0ZW5kcyBQYXJ0aWFsPEN1c3RvbVR5cG9ncmFwaHlQcm9wZXJ0aWVzPixcbiAgICBNVUlUeXBvZ3JhcGh5T3B0aW9ucyB7fVxuXG5jb25zdCBiYXNlVHlwb2dyYXBoeTogVHlwb2dyYXBoeU9wdGlvbnMgPSB7XG4gIGZvbnRGYW1pbHk6IGZvbnRGYW1pbGllcy5zYW5zU2VyaWYsXG4gIGZvbnRGYW1pbHlNb25vc3BhY2U6IGZvbnRGYW1pbGllcy5tb25vc3BhY2UsXG4gIGZvbnRXZWlnaHRMaWdodGVyOiBmb250V2VpZ2h0cy5saWdodGVyLFxuICBmb250V2VpZ2h0TGlnaHQ6IGZvbnRXZWlnaHRzLmxpZ2h0LFxuICBmb250V2VpZ2h0UmVndWxhcjogZm9udFdlaWdodHMucmVndWxhcixcbiAgZm9udFdlaWdodE1lZGl1bTogZm9udFdlaWdodHMucmVndWxhcixcbiAgZm9udFdlaWdodEJvbGQ6IGZvbnRXZWlnaHRzLmJvbGQsXG4gIGZvbnRXZWlnaHRCb2xkZXI6IGZvbnRXZWlnaHRzLmJvbGRlcixcbiAgaDE6IHtcbiAgICBmb250U2l6ZTogZm9udFNpemVzLmgxLFxuICB9LFxuICBoMjoge1xuICAgIGZvbnRTaXplOiBmb250U2l6ZXMuaDIsXG4gIH0sXG4gIGgzOiB7XG4gICAgZm9udFNpemU6IGZvbnRTaXplcy5oMyxcbiAgfSxcbiAgaDQ6IHtcbiAgICBmb250U2l6ZTogZm9udFNpemVzLmg0LFxuICB9LFxuICBoNToge1xuICAgIGZvbnRTaXplOiBmb250U2l6ZXMuaDUsXG4gIH0sXG4gIGg2OiB7XG4gICAgZm9udFNpemU6IGZvbnRTaXplcy5oNixcbiAgfSxcbiAgYm9keTE6IHtcbiAgICBmb250U2l6ZTogZm9udFNpemVzLmJvZHksXG4gIH0sXG4gIGJvZHkyOiB7XG4gICAgZm9udFNpemU6IGZvbnRTaXplcy5zdWJ0aXRsZSxcbiAgfSxcbiAgc3VidGl0bGUxOiB7XG4gICAgZm9udFNpemU6IGZvbnRTaXplcy5zdWJ0aXRsZSxcbiAgfSxcbiAgc3VidGl0bGUyOiB7XG4gICAgZm9udFNpemU6IGZvbnRTaXplcy5zdWJ0aXRsZSxcbiAgfSxcbiAgYnV0dG9uOiB7XG4gICAgdGV4dFRyYW5zZm9ybTogJ2luaXRpYWwnLFxuICAgIGZvbnRTaXplOiBmb250U2l6ZXMuYnV0dG9uLFxuICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHRzLmJvbGQsXG4gICAgbGV0dGVyU3BhY2luZzogMC41LFxuICAgIGxpbmVIZWlnaHQ6IDEuNCwgLy8gSW1wcm92ZSByZWFkYWJpbGl0eSBmb3IgbXVsdGlsaW5lIGJ1dHRvbi5cbiAgfSxcbiAgY2FwdGlvbjoge1xuICAgIGZvbnRTaXplOiBmb250U2l6ZXMuY2FwdGlvbixcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVUeXBvZ3JhcGh5ID0gKFxuICB0eXBvZ3JhcGh5OiBUeXBvZ3JhcGh5T3B0aW9ucyA9IHt9XG4pOiBUeXBvZ3JhcGh5T3B0aW9ucyA9PiB7XG4gIHJldHVybiBkZWVwbWVyZ2UoYmFzZVR5cG9ncmFwaHksIHR5cG9ncmFwaHksIHsgY2xvbmU6IGZhbHNlIH0pO1xufTtcbiJdfQ==