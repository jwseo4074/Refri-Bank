var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import deepmerge from 'deepmerge';
import black from '../colors/black';
import blue from '../colors/blue';
import charcoal from '../colors/charcoal';
import darkGraphite from '../colors/darkGraphite';
import graphite from '../colors/graphite';
import green from '../colors/green';
import grey from '../colors/grey';
import navy from '../colors/navy';
import orange from '../colors/orange';
import purple from '../colors/purple';
import red from '../colors/red';
import text from '../colors/text';
import yellow from '../colors/yellow';
var baseMuiPalette = {
    primary: blue,
    secondary: green,
    error: red,
    type: 'light',
    common: {
        black: black.main,
        white: '#ffffff',
    },
    grey: grey,
    text: text,
    divider: grey[400],
    background: {
        paper: grey[50],
        default: '#f5f8fa',
    },
};
var basePalette = __assign({ black: black,
    blue: blue,
    charcoal: charcoal,
    darkGraphite: darkGraphite,
    graphite: graphite,
    green: green,
    navy: navy,
    orange: orange,
    purple: purple,
    red: red,
    yellow: yellow }, baseMuiPalette);
export var createPalette = function (palette) {
    if (palette === void 0) { palette = {}; }
    return deepmerge(basePalette, palette, { clone: false });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlUGFsZXR0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZXMvY3JlYXRlUGFsZXR0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUNBLE9BQU8sU0FBUyxNQUFNLFdBQVcsQ0FBQztBQUNsQyxPQUFPLEtBQUssTUFBTSxpQkFBaUIsQ0FBQztBQUNwQyxPQUFPLElBQUksTUFBTSxnQkFBZ0IsQ0FBQztBQUNsQyxPQUFPLFFBQVEsTUFBTSxvQkFBb0IsQ0FBQztBQUMxQyxPQUFPLFlBQVksTUFBTSx3QkFBd0IsQ0FBQztBQUNsRCxPQUFPLFFBQVEsTUFBTSxvQkFBb0IsQ0FBQztBQUMxQyxPQUFPLEtBQUssTUFBTSxpQkFBaUIsQ0FBQztBQUNwQyxPQUFPLElBQUksTUFBTSxnQkFBZ0IsQ0FBQztBQUNsQyxPQUFPLElBQUksTUFBTSxnQkFBZ0IsQ0FBQztBQUNsQyxPQUFPLE1BQU0sTUFBTSxrQkFBa0IsQ0FBQztBQUN0QyxPQUFPLE1BQU0sTUFBTSxrQkFBa0IsQ0FBQztBQUN0QyxPQUFPLEdBQUcsTUFBTSxlQUFlLENBQUM7QUFDaEMsT0FBTyxJQUFJLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEMsT0FBTyxNQUFNLE1BQU0sa0JBQWtCLENBQUM7QUFHdEMsSUFBTSxjQUFjLEdBQUc7SUFDckIsT0FBTyxFQUFFLElBQUk7SUFDYixTQUFTLEVBQUUsS0FBSztJQUNoQixLQUFLLEVBQUUsR0FBRztJQUNWLElBQUksRUFBRSxPQUFPO0lBQ2IsTUFBTSxFQUFFO1FBQ04sS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJO1FBQ2pCLEtBQUssRUFBRSxTQUFTO0tBQ2pCO0lBQ0QsSUFBSSxNQUFBO0lBQ0osSUFBSSxNQUFBO0lBQ0osT0FBTyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbEIsVUFBVSxFQUFFO1FBQ1YsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDZixPQUFPLEVBQUUsU0FBUztLQUNuQjtDQUNGLENBQUM7QUFFRixJQUFNLFdBQVcsY0FDZixLQUFLLE9BQUE7SUFDTCxJQUFJLE1BQUE7SUFDSixRQUFRLFVBQUE7SUFDUixZQUFZLGNBQUE7SUFDWixRQUFRLFVBQUE7SUFDUixLQUFLLE9BQUE7SUFDTCxJQUFJLE1BQUE7SUFDSixNQUFNLFFBQUE7SUFDTixNQUFNLFFBQUE7SUFDTixHQUFHLEtBQUE7SUFDSCxNQUFNLFFBQUEsSUFDSCxjQUFjLENBQ2xCLENBQUM7QUFNRixNQUFNLENBQUMsSUFBTSxhQUFhLEdBQUcsVUFBQyxPQUE0QjtJQUE1Qix3QkFBQSxFQUFBLFlBQTRCO0lBQ3hELE9BQU8sU0FBUyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQVEsQ0FBQztBQUNsRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWxldHRlIGFzIE1VSVBhbGV0dGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY3JlYXRlUGFsZXR0ZSc7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ2RlZXBtZXJnZSc7XG5pbXBvcnQgYmxhY2sgZnJvbSAnLi4vY29sb3JzL2JsYWNrJztcbmltcG9ydCBibHVlIGZyb20gJy4uL2NvbG9ycy9ibHVlJztcbmltcG9ydCBjaGFyY29hbCBmcm9tICcuLi9jb2xvcnMvY2hhcmNvYWwnO1xuaW1wb3J0IGRhcmtHcmFwaGl0ZSBmcm9tICcuLi9jb2xvcnMvZGFya0dyYXBoaXRlJztcbmltcG9ydCBncmFwaGl0ZSBmcm9tICcuLi9jb2xvcnMvZ3JhcGhpdGUnO1xuaW1wb3J0IGdyZWVuIGZyb20gJy4uL2NvbG9ycy9ncmVlbic7XG5pbXBvcnQgZ3JleSBmcm9tICcuLi9jb2xvcnMvZ3JleSc7XG5pbXBvcnQgbmF2eSBmcm9tICcuLi9jb2xvcnMvbmF2eSc7XG5pbXBvcnQgb3JhbmdlIGZyb20gJy4uL2NvbG9ycy9vcmFuZ2UnO1xuaW1wb3J0IHB1cnBsZSBmcm9tICcuLi9jb2xvcnMvcHVycGxlJztcbmltcG9ydCByZWQgZnJvbSAnLi4vY29sb3JzL3JlZCc7XG5pbXBvcnQgdGV4dCBmcm9tICcuLi9jb2xvcnMvdGV4dCc7XG5pbXBvcnQgeWVsbG93IGZyb20gJy4uL2NvbG9ycy95ZWxsb3cnO1xuaW1wb3J0IHsgRGVlcFBhcnRpYWwgfSBmcm9tICcuLi90eXBlVXRpbHMnO1xuXG5jb25zdCBiYXNlTXVpUGFsZXR0ZSA9IHtcbiAgcHJpbWFyeTogYmx1ZSxcbiAgc2Vjb25kYXJ5OiBncmVlbixcbiAgZXJyb3I6IHJlZCxcbiAgdHlwZTogJ2xpZ2h0JyxcbiAgY29tbW9uOiB7XG4gICAgYmxhY2s6IGJsYWNrLm1haW4sXG4gICAgd2hpdGU6ICcjZmZmZmZmJyxcbiAgfSxcbiAgZ3JleSxcbiAgdGV4dCxcbiAgZGl2aWRlcjogZ3JleVs0MDBdLFxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IGdyZXlbNTBdLFxuICAgIGRlZmF1bHQ6ICcjZjVmOGZhJyxcbiAgfSxcbn07XG5cbmNvbnN0IGJhc2VQYWxldHRlID0ge1xuICBibGFjayxcbiAgYmx1ZSxcbiAgY2hhcmNvYWwsXG4gIGRhcmtHcmFwaGl0ZSxcbiAgZ3JhcGhpdGUsXG4gIGdyZWVuLFxuICBuYXZ5LFxuICBvcmFuZ2UsXG4gIHB1cnBsZSxcbiAgcmVkLFxuICB5ZWxsb3csXG4gIC4uLmJhc2VNdWlQYWxldHRlLFxufTtcblxuZXhwb3J0IHR5cGUgUGFsZXR0ZSA9IHR5cGVvZiBiYXNlUGFsZXR0ZSAmIE1VSVBhbGV0dGU7XG5cbmV4cG9ydCB0eXBlIFBhbGV0dGVPcHRpb25zID0gRGVlcFBhcnRpYWw8UGFsZXR0ZT47XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVQYWxldHRlID0gKHBhbGV0dGU6IFBhbGV0dGVPcHRpb25zID0ge30pOiBQYWxldHRlID0+IHtcbiAgcmV0dXJuIGRlZXBtZXJnZShiYXNlUGFsZXR0ZSwgcGFsZXR0ZSwgeyBjbG9uZTogZmFsc2UgfSkgYXMgYW55O1xufTtcbiJdfQ==