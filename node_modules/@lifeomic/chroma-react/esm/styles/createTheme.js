var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import createMuiTheme from '@material-ui/core/styles/createMuiTheme';
import muiUseTheme from '@material-ui/styles/useTheme';
import { createBoxShadows, } from './createBoxShadows';
import { createPalette } from './createPalette';
import { createTypography, } from './createTypography';
import { createOverrides } from './overrides';
export var createTheme = function (_a) {
    if (_a === void 0) { _a = {}; }
    var palette = _a.palette, typography = _a.typography, overrides = _a.overrides, boxShadows = _a.boxShadows, pxToRem = _a.pxToRem, muiOptions = __rest(_a, ["palette", "typography", "overrides", "boxShadows", "pxToRem"]);
    var themeWithoutOverrides = createMuiTheme(__assign({ palette: createPalette(palette), typography: createTypography(typography), boxShadows: createBoxShadows(boxShadows), pxToRem: function (size) { return size / 16 + "rem"; } }, muiOptions));
    return createMuiTheme(__assign(__assign({}, themeWithoutOverrides), { overrides: createOverrides(themeWithoutOverrides, overrides) }));
};
export var useTheme = function () { return muiUseTheme(); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlVGhlbWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3R5bGVzL2NyZWF0ZVRoZW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLGNBR04sTUFBTSx5Q0FBeUMsQ0FBQztBQUNqRCxPQUFPLFdBQVcsTUFBTSw4QkFBOEIsQ0FBQztBQUV2RCxPQUFPLEVBR0wsZ0JBQWdCLEdBQ2pCLE1BQU0sb0JBQW9CLENBQUM7QUFDNUIsT0FBTyxFQUFFLGFBQWEsRUFBMkIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RSxPQUFPLEVBQ0wsZ0JBQWdCLEdBR2pCLE1BQU0sb0JBQW9CLENBQUM7QUFDNUIsT0FBTyxFQUFFLGVBQWUsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFrQmhFLE1BQU0sQ0FBQyxJQUFNLFdBQVcsR0FBRyxVQUFDLEVBT1I7SUFQUSxtQkFBQSxFQUFBLE9BT1I7SUFObEIsSUFBQSxvQkFBTyxFQUNQLDBCQUFVLEVBQ1Ysd0JBQVMsRUFDVCwwQkFBVSxFQUNWLG9CQUFPLEVBQ1Asd0ZBQWE7SUFFYixJQUFNLHFCQUFxQixHQUFJLGNBQWMsQ0FBQyxXQUM1QyxPQUFPLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUMvQixVQUFVLEVBQUUsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLEVBQ3hDLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsRUFDeEMsT0FBTyxFQUFFLFVBQUMsSUFBWSxJQUFLLE9BQUcsSUFBSSxHQUFHLEVBQUUsUUFBSyxFQUFqQixDQUFpQixJQUN6QyxVQUFVLENBQ1AsQ0FBa0IsQ0FBQztJQUUzQixPQUFPLGNBQWMsQ0FBQyxzQkFDakIscUJBQXFCLEtBQ3hCLFNBQVMsRUFBRSxlQUFlLENBQUMscUJBQXFCLEVBQUUsU0FBUyxDQUFDLEdBQ3RELENBQVEsQ0FBQztBQUNuQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSxRQUFRLEdBQUcsY0FBTSxPQUFBLFdBQVcsRUFBUyxFQUFwQixDQUFvQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZU11aVRoZW1lLCB7XG4gIFRoZW1lIGFzIE11aVRoZW1lLFxuICBUaGVtZU9wdGlvbnMgYXMgTXVpVGhlbWVPcHRpb25zLFxufSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY3JlYXRlTXVpVGhlbWUnO1xuaW1wb3J0IG11aVVzZVRoZW1lIGZyb20gJ0BtYXRlcmlhbC11aS9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsgT21pdCB9IGZyb20gJy4uL3R5cGVVdGlscyc7XG5pbXBvcnQge1xuICBCb3hTaGFkb3dzLFxuICBCb3hTaGFkb3dzT3B0aW9ucyxcbiAgY3JlYXRlQm94U2hhZG93cyxcbn0gZnJvbSAnLi9jcmVhdGVCb3hTaGFkb3dzJztcbmltcG9ydCB7IGNyZWF0ZVBhbGV0dGUsIFBhbGV0dGUsIFBhbGV0dGVPcHRpb25zIH0gZnJvbSAnLi9jcmVhdGVQYWxldHRlJztcbmltcG9ydCB7XG4gIGNyZWF0ZVR5cG9ncmFwaHksXG4gIFR5cG9ncmFwaHksXG4gIFR5cG9ncmFwaHlPcHRpb25zLFxufSBmcm9tICcuL2NyZWF0ZVR5cG9ncmFwaHknO1xuaW1wb3J0IHsgY3JlYXRlT3ZlcnJpZGVzLCBPdmVycmlkZXNDcmVhdG9yIH0gZnJvbSAnLi9vdmVycmlkZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRoZW1lIGV4dGVuZHMgT21pdDxNdWlUaGVtZSwgJ3BhbGV0dGUnPiB7XG4gIHBhbGV0dGU6IFBhbGV0dGU7XG4gIHR5cG9ncmFwaHk6IFR5cG9ncmFwaHk7XG4gIGJveFNoYWRvd3M6IEJveFNoYWRvd3M7XG4gIHB4VG9SZW06IChzaXplOiBudW1iZXIpID0+IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUaGVtZU9wdGlvbnNcbiAgZXh0ZW5kcyBPbWl0PE11aVRoZW1lT3B0aW9ucywgJ292ZXJyaWRlcycgfCAncGFsZXR0ZScgfCAndHlwb2dyYXBoeSc+IHtcbiAgcGFsZXR0ZT86IFBhbGV0dGVPcHRpb25zO1xuICB0eXBvZ3JhcGh5PzogVHlwb2dyYXBoeU9wdGlvbnM7XG4gIG92ZXJyaWRlcz86IE92ZXJyaWRlc0NyZWF0b3I7XG4gIGJveFNoYWRvd3M/OiBCb3hTaGFkb3dzT3B0aW9ucztcbiAgcHhUb1JlbT86IChzaXplOiBudW1iZXIpID0+IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVRoZW1lID0gKHtcbiAgcGFsZXR0ZSxcbiAgdHlwb2dyYXBoeSxcbiAgb3ZlcnJpZGVzLFxuICBib3hTaGFkb3dzLFxuICBweFRvUmVtLFxuICAuLi5tdWlPcHRpb25zXG59OiBUaGVtZU9wdGlvbnMgPSB7fSk6IFRoZW1lID0+IHtcbiAgY29uc3QgdGhlbWVXaXRob3V0T3ZlcnJpZGVzID0gKGNyZWF0ZU11aVRoZW1lKHtcbiAgICBwYWxldHRlOiBjcmVhdGVQYWxldHRlKHBhbGV0dGUpLFxuICAgIHR5cG9ncmFwaHk6IGNyZWF0ZVR5cG9ncmFwaHkodHlwb2dyYXBoeSksXG4gICAgYm94U2hhZG93czogY3JlYXRlQm94U2hhZG93cyhib3hTaGFkb3dzKSxcbiAgICBweFRvUmVtOiAoc2l6ZTogbnVtYmVyKSA9PiBgJHtzaXplIC8gMTZ9cmVtYCxcbiAgICAuLi5tdWlPcHRpb25zLFxuICB9IGFzIGFueSkgYXMgYW55KSBhcyBUaGVtZTtcblxuICByZXR1cm4gY3JlYXRlTXVpVGhlbWUoe1xuICAgIC4uLnRoZW1lV2l0aG91dE92ZXJyaWRlcyxcbiAgICBvdmVycmlkZXM6IGNyZWF0ZU92ZXJyaWRlcyh0aGVtZVdpdGhvdXRPdmVycmlkZXMsIG92ZXJyaWRlcyksXG4gIH0gYXMgYW55KSBhcyBhbnk7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlVGhlbWUgPSAoKSA9PiBtdWlVc2VUaGVtZTxUaGVtZT4oKTtcbiJdfQ==