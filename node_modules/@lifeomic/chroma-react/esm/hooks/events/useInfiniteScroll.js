var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { useEffect, useRef, useState } from 'react';
import useInterval from '../utils/useInterval';
import useWindowSize from './useWindowSize';
var WINDOW = 'window';
var PARENT = 'parent';
var getParentSize = function (ref) {
    return ref.current.parentNode.getBoundingClientRect();
};
var getMySize = function (ref) {
    return ref.current.getBoundingClientRect();
};
export var helpers = {
    getParentSize: getParentSize,
    getMySize: getMySize,
};
function useInfiniteScroll(_a) {
    var loading = _a.loading, hasNextPage = _a.hasNextPage, loadMore = _a.loadMore, _b = _a.scrollOffset, scrollOffset = _b === void 0 ? 250 : _b, _c = _a.debounceInterval, debounceInterval = _c === void 0 ? 250 : _c, _d = _a.scrollContainer, scrollContainer = _d === void 0 ? WINDOW : _d;
    var ref = useRef();
    var _e = useWindowSize(), windowHeight = _e.height, windowWidth = _e.width;
    var _f = useState(true), listen = _f[0], setListen = _f[1];
    useEffect(function () {
        if (!loading) {
            setListen(true);
        }
    }, [loading]);
    function getBottomOffset() {
        var bottom = helpers.getMySize(ref).bottom;
        var bottomOffset = windowHeight ? bottom - windowHeight : 0;
        if (scrollContainer === PARENT) {
            var parentBottom = helpers.getParentSize(ref).bottom;
            // Distance between bottom of list and its parent
            bottomOffset = bottom - parentBottom;
        }
        return bottomOffset;
    }
    function isParentInView() {
        var parent = ref.current ? ref.current.parentNode : null;
        if (parent) {
            var _a = helpers.getParentSize(ref), left = _a.left, right = _a.right, top_1 = _a.top, bottom = _a.bottom;
            if (windowWidth && left > windowWidth) {
                return false;
            }
            else if (right < 0) {
                return false;
            }
            else if (windowHeight && top_1 > windowHeight) {
                return false;
            }
            else if (bottom < 0) {
                return false;
            }
        }
        return true;
    }
    function listenBottomOffset() {
        return __awaiter(this, void 0, void 0, function () {
            var bottomOffset, validOffset;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(listen && !loading && hasNextPage)) return [3 /*break*/, 2];
                        if (!ref.current) return [3 /*break*/, 2];
                        if (scrollContainer === PARENT) {
                            if (!isParentInView()) {
                                // Do nothing if the parent is out of screen
                                return [2 /*return*/];
                            }
                        }
                        bottomOffset = getBottomOffset();
                        validOffset = bottomOffset < scrollOffset;
                        if (!validOffset) return [3 /*break*/, 2];
                        setListen(false);
                        return [4 /*yield*/, loadMore()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    }
    useInterval(function () { return listenBottomOffset(); }, 
    // Stop interval when there is no next page.
    hasNextPage ? debounceInterval : 0);
    return ref;
}
export default useInfiniteScroll;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlSW5maW5pdGVTY3JvbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaG9va3MvZXZlbnRzL3VzZUluZmluaXRlU2Nyb2xsLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDcEQsT0FBTyxXQUFXLE1BQU0sc0JBQXNCLENBQUM7QUFDL0MsT0FBTyxhQUFhLE1BQU0saUJBQWlCLENBQUM7QUFFNUMsSUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDO0FBQ3hCLElBQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQztBQUV4QixJQUFNLGFBQWEsR0FBRyxVQUFVLEdBQVE7SUFDdEMsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0FBQ3hELENBQUMsQ0FBQztBQUVGLElBQU0sU0FBUyxHQUFHLFVBQVUsR0FBUTtJQUNsQyxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMscUJBQXFCLEVBQUUsQ0FBQztBQUM3QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSxPQUFPLEdBQUc7SUFDckIsYUFBYSxlQUFBO0lBQ2IsU0FBUyxXQUFBO0NBQ1YsQ0FBQztBQVdGLFNBQVMsaUJBQWlCLENBQUMsRUFPTDtRQU5wQixPQUFPLGFBQUEsRUFDUCxXQUFXLGlCQUFBLEVBQ1gsUUFBUSxjQUFBLEVBQ1Isb0JBQWtCLEVBQWxCLFlBQVksbUJBQUcsR0FBRyxLQUFBLEVBQ2xCLHdCQUFzQixFQUF0QixnQkFBZ0IsbUJBQUcsR0FBRyxLQUFBLEVBQ3RCLHVCQUF3QixFQUF4QixlQUFlLG1CQUFHLE1BQU0sS0FBQTtJQUV4QixJQUFNLEdBQUcsR0FBRyxNQUFNLEVBQVMsQ0FBQztJQUN0QixJQUFBLEtBQStDLGFBQWEsRUFBRSxFQUFwRCxZQUFZLFlBQUEsRUFBUyxXQUFXLFdBQW9CLENBQUM7SUFDL0QsSUFBQSxLQUFzQixRQUFRLENBQUMsSUFBSSxDQUFDLEVBQW5DLE1BQU0sUUFBQSxFQUFFLFNBQVMsUUFBa0IsQ0FBQztJQUUzQyxTQUFTLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2pCO0lBQ0gsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUVkLFNBQVMsZUFBZTtRQUNkLElBQUEsTUFBTSxHQUFLLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQTNCLENBQTRCO1FBQzFDLElBQUksWUFBWSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTVELElBQUksZUFBZSxLQUFLLE1BQU0sRUFBRTtZQUN0QixJQUFRLFlBQVksR0FBSyxPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxPQUEvQixDQUFnQztZQUM1RCxpREFBaUQ7WUFDakQsWUFBWSxHQUFHLE1BQU0sR0FBRyxZQUFZLENBQUM7U0FDdEM7UUFFRCxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRUQsU0FBUyxjQUFjO1FBQ3JCLElBQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFFM0QsSUFBSSxNQUFNLEVBQUU7WUFDSixJQUFBLEtBQStCLE9BQU8sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQXZELElBQUksVUFBQSxFQUFFLEtBQUssV0FBQSxFQUFFLEtBQUcsU0FBQSxFQUFFLE1BQU0sWUFBK0IsQ0FBQztZQUNoRSxJQUFJLFdBQVcsSUFBSSxJQUFJLEdBQUcsV0FBVyxFQUFFO2dCQUNyQyxPQUFPLEtBQUssQ0FBQzthQUNkO2lCQUFNLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtnQkFDcEIsT0FBTyxLQUFLLENBQUM7YUFDZDtpQkFBTSxJQUFJLFlBQVksSUFBSSxLQUFHLEdBQUcsWUFBWSxFQUFFO2dCQUM3QyxPQUFPLEtBQUssQ0FBQzthQUNkO2lCQUFNLElBQUksTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDckIsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsU0FBZSxrQkFBa0I7Ozs7Ozs2QkFDM0IsQ0FBQSxNQUFNLElBQUksQ0FBQyxPQUFPLElBQUksV0FBVyxDQUFBLEVBQWpDLHdCQUFpQzs2QkFDL0IsR0FBRyxDQUFDLE9BQU8sRUFBWCx3QkFBVzt3QkFDYixJQUFJLGVBQWUsS0FBSyxNQUFNLEVBQUU7NEJBQzlCLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBRTtnQ0FDckIsNENBQTRDO2dDQUM1QyxzQkFBTzs2QkFDUjt5QkFDRjt3QkFJSyxZQUFZLEdBQUcsZUFBZSxFQUFFLENBQUM7d0JBQ2pDLFdBQVcsR0FBRyxZQUFZLEdBQUcsWUFBWSxDQUFDOzZCQUM1QyxXQUFXLEVBQVgsd0JBQVc7d0JBQ2IsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUNqQixxQkFBTSxRQUFRLEVBQUUsRUFBQTs7d0JBQWhCLFNBQWdCLENBQUM7Ozs7OztLQUl4QjtJQUVELFdBQVcsQ0FDVCxjQUFNLE9BQUEsa0JBQWtCLEVBQUUsRUFBcEIsQ0FBb0I7SUFDMUIsNENBQTRDO0lBQzVDLFdBQVcsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDbkMsQ0FBQztJQUVGLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELGVBQWUsaUJBQWlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlSW50ZXJ2YWwgZnJvbSAnLi4vdXRpbHMvdXNlSW50ZXJ2YWwnO1xuaW1wb3J0IHVzZVdpbmRvd1NpemUgZnJvbSAnLi91c2VXaW5kb3dTaXplJztcblxuY29uc3QgV0lORE9XID0gJ3dpbmRvdyc7XG5jb25zdCBQQVJFTlQgPSAncGFyZW50JztcblxuY29uc3QgZ2V0UGFyZW50U2l6ZSA9IGZ1bmN0aW9uIChyZWY6IGFueSkge1xuICByZXR1cm4gcmVmLmN1cnJlbnQucGFyZW50Tm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbn07XG5cbmNvbnN0IGdldE15U2l6ZSA9IGZ1bmN0aW9uIChyZWY6IGFueSkge1xuICByZXR1cm4gcmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59O1xuXG5leHBvcnQgY29uc3QgaGVscGVycyA9IHtcbiAgZ2V0UGFyZW50U2l6ZSxcbiAgZ2V0TXlTaXplLFxufTtcblxuZXhwb3J0IHR5cGUgSW5maW5pdGVTY3JvbGxQcm9wcyA9IHtcbiAgbG9hZGluZzogYm9vbGVhbjtcbiAgaGFzTmV4dFBhZ2U6IGJvb2xlYW47XG4gIGxvYWRNb3JlOiAoKSA9PiBQcm9taXNlPGFueT47XG4gIHNjcm9sbE9mZnNldD86IG51bWJlcjtcbiAgZGVib3VuY2VJbnRlcnZhbD86IG51bWJlcjtcbiAgc2Nyb2xsQ29udGFpbmVyPzogJ3dpbmRvdycgfCAncGFyZW50Jztcbn07XG5cbmZ1bmN0aW9uIHVzZUluZmluaXRlU2Nyb2xsKHtcbiAgbG9hZGluZyxcbiAgaGFzTmV4dFBhZ2UsXG4gIGxvYWRNb3JlLFxuICBzY3JvbGxPZmZzZXQgPSAyNTAsXG4gIGRlYm91bmNlSW50ZXJ2YWwgPSAyNTAsXG4gIHNjcm9sbENvbnRhaW5lciA9IFdJTkRPVyxcbn06IEluZmluaXRlU2Nyb2xsUHJvcHMpIHtcbiAgY29uc3QgcmVmID0gdXNlUmVmKCkgYXMgYW55O1xuICBjb25zdCB7IGhlaWdodDogd2luZG93SGVpZ2h0LCB3aWR0aDogd2luZG93V2lkdGggfSA9IHVzZVdpbmRvd1NpemUoKTtcbiAgY29uc3QgW2xpc3Rlbiwgc2V0TGlzdGVuXSA9IHVzZVN0YXRlKHRydWUpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFsb2FkaW5nKSB7XG4gICAgICBzZXRMaXN0ZW4odHJ1ZSk7XG4gICAgfVxuICB9LCBbbG9hZGluZ10pO1xuXG4gIGZ1bmN0aW9uIGdldEJvdHRvbU9mZnNldCgpIHtcbiAgICBjb25zdCB7IGJvdHRvbSB9ID0gaGVscGVycy5nZXRNeVNpemUocmVmKTtcbiAgICBsZXQgYm90dG9tT2Zmc2V0ID0gd2luZG93SGVpZ2h0ID8gYm90dG9tIC0gd2luZG93SGVpZ2h0IDogMDtcblxuICAgIGlmIChzY3JvbGxDb250YWluZXIgPT09IFBBUkVOVCkge1xuICAgICAgY29uc3QgeyBib3R0b206IHBhcmVudEJvdHRvbSB9ID0gaGVscGVycy5nZXRQYXJlbnRTaXplKHJlZik7XG4gICAgICAvLyBEaXN0YW5jZSBiZXR3ZWVuIGJvdHRvbSBvZiBsaXN0IGFuZCBpdHMgcGFyZW50XG4gICAgICBib3R0b21PZmZzZXQgPSBib3R0b20gLSBwYXJlbnRCb3R0b207XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvdHRvbU9mZnNldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUGFyZW50SW5WaWV3KCkge1xuICAgIGNvbnN0IHBhcmVudCA9IHJlZi5jdXJyZW50ID8gcmVmLmN1cnJlbnQucGFyZW50Tm9kZSA6IG51bGw7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBjb25zdCB7IGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSB9ID0gaGVscGVycy5nZXRQYXJlbnRTaXplKHJlZik7XG4gICAgICBpZiAod2luZG93V2lkdGggJiYgbGVmdCA+IHdpbmRvd1dpZHRoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAocmlnaHQgPCAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAod2luZG93SGVpZ2h0ICYmIHRvcCA+IHdpbmRvd0hlaWdodCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGJvdHRvbSA8IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gbGlzdGVuQm90dG9tT2Zmc2V0KCkge1xuICAgIGlmIChsaXN0ZW4gJiYgIWxvYWRpbmcgJiYgaGFzTmV4dFBhZ2UpIHtcbiAgICAgIGlmIChyZWYuY3VycmVudCkge1xuICAgICAgICBpZiAoc2Nyb2xsQ29udGFpbmVyID09PSBQQVJFTlQpIHtcbiAgICAgICAgICBpZiAoIWlzUGFyZW50SW5WaWV3KCkpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdGhpbmcgaWYgdGhlIHBhcmVudCBpcyBvdXQgb2Ygc2NyZWVuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGRpc3RhbmNlIGJldHdlZW4gYm90dG9tIG9mIHRoZSBjb250YWluZXIgYW5kIGJvdHRvbSBvZiB0aGUgd2luZG93IG9yIHBhcmVudFxuICAgICAgICAvLyBpcyBsZXNzIHRoYW4gdGhlIG9mZnNldFxuICAgICAgICBjb25zdCBib3R0b21PZmZzZXQgPSBnZXRCb3R0b21PZmZzZXQoKTtcbiAgICAgICAgY29uc3QgdmFsaWRPZmZzZXQgPSBib3R0b21PZmZzZXQgPCBzY3JvbGxPZmZzZXQ7XG4gICAgICAgIGlmICh2YWxpZE9mZnNldCkge1xuICAgICAgICAgIHNldExpc3RlbihmYWxzZSk7XG4gICAgICAgICAgYXdhaXQgbG9hZE1vcmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVzZUludGVydmFsKFxuICAgICgpID0+IGxpc3RlbkJvdHRvbU9mZnNldCgpLFxuICAgIC8vIFN0b3AgaW50ZXJ2YWwgd2hlbiB0aGVyZSBpcyBubyBuZXh0IHBhZ2UuXG4gICAgaGFzTmV4dFBhZ2UgPyBkZWJvdW5jZUludGVydmFsIDogMFxuICApO1xuXG4gIHJldHVybiByZWY7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVzZUluZmluaXRlU2Nyb2xsO1xuIl19