/// <reference types="react" />
declare module 'react-table' {
    type FieldType = 'text' | 'number' | 'date' | string;
    type CellRendererProps<D extends object = {}> = {
        /**
         * Cell HTML props passed from the Table.
         */
        cellElementProps: TableCellProps;
        /**
         * Table specific cell props like `column`, `row`.
         */
        cellProps: CellProps<D>;
        /**
         * Cell's content.
         */
        children: React.ReactNode;
        /**
         * Function that returns whether the cell is disabled.
         */
        isDisabled?: (rowData: D) => boolean;
    };
    interface TableOptions<D extends object = {}> extends Omit<UseTableOptions<D>, 'data'>, UseRowSelectOptions<D>, UseExpandedOptions<D>, UseFiltersOptions<D>, UsePaginationOptions<D>, Omit<UseResizeColumnsOptions<D>, 'disableResizing'>, UseSortByOptions<D> {
        /**
         * Table data list.
         * Must be memoized.
         *
         * Supports expandable sub-rows using the `subRows` field in data entries.
         * If some rows don't have sub-data, it is recommended to pass an empty array to `subRows` for consistent spacing.
         */
        data: D[];
    }
    interface Hooks<D extends object = {}> extends UseExpandedHooks<D>, UseGroupByHooks<D>, UseRowSelectHooks<D>, UseSortByHooks<D> {
    }
    interface TableInstance<D extends object = {}> extends UseColumnOrderInstanceProps<D>, UseExpandedInstanceProps<D>, UseFiltersInstanceProps<D>, UseGlobalFiltersInstanceProps<D>, UseGroupByInstanceProps<D>, UsePaginationInstanceProps<D>, UseRowSelectInstanceProps<D>, UseRowStateInstanceProps<D>, UseSortByInstanceProps<D> {
        initialRows: Row<D>[];
    }
    interface TableState<D extends object = {}> extends UseColumnOrderState<D>, UseExpandedState<D>, UseFiltersState<D>, UseGlobalFiltersState<D>, UseGroupByState<D>, UsePaginationState<D>, UseRowSelectState<D>, UseRowStateState<D>, UseSortByState<D> {
        columnResizing: {
            startX?: number;
            columnWidth?: number;
            nextColumnWidth?: number;
            headerIdWidths?: Array<[string, number]>;
            nextHeaderIdWidths?: Array<[string, number]>;
            columnWidths: Record<string, number>;
            isResizingColumn?: string;
        };
        isTableResizing?: boolean;
        columnReorderStartIndex: number;
    }
    interface ColumnInterface<D extends object = {}> extends UseSortByColumnOptions<D>, UseFiltersColumnOptions<D>, UseResizeColumnsColumnOptions<D> {
        /**
         * Custom class name applied to header column cell.
         */
        columnClassName?: string;
        /**
         * Custom class name applied to each column's cell.
         */
        cellClassName?: string;
        /**
         * Type of the data in cell. Used for manual filtering.
         */
        fieldType?: FieldType;
        /**
         * Filter component used as a column filter. Should use filters from `tableFilters`.
         */
        Filter?: Renderer<FilterProps<D>>;
        /**
         * String value or custom function to use for filtering.
         * Possible string values: `text`, `exactText`, `exactTextCase`, `includes`, `includesAll`, `exact`, `equals`, `between`.
         * More info about these filters: https://github.com/tannerlinsley/react-table/blob/master/src/filterTypes.js
         */
        filter?: FilterType<D> | DefaultFilterTypes | string;
        /**
         * Function that should return whole cell element not only the content.
         * Must be memoized.
         * @example
         * {
         *   Header: 'Name',
         *   accessor: 'name',
         *   cellRenderer: (props) => <EditableCell {...props} onCellEdit={onCellEditHandler} />,
         * }
         */
        cellRenderer?: (props: CellRendererProps<D>) => React.ReactNode;
        /**
         * If true, column can't be reordered.
         * @default false
         */
        disableReordering?: boolean;
        /**
         * If true, column's visibility cannot be toggled.
         * @default false
         */
        disableToggleVisibility?: boolean;
    }
    interface ColumnInstance<D extends object = {}> extends UseFiltersColumnProps<D>, UseGroupByColumnProps<D>, UseResizeColumnsColumnProps<D>, UseSortByColumnProps<D> {
        originalWidth: number;
        resizeWidth?: number;
        isResizerVisible?: boolean;
        getDragAndDropProps: () => TableKeyedProps;
    }
    interface Cell<D extends object = {}> extends UseGroupByCellProps<D>, UseRowStateCellProps<D> {
    }
    interface Row<D extends object = {}> extends UseExpandedRowProps<D>, UseGroupByRowProps<D>, UseRowSelectRowProps<D>, UseRowStateRowProps<D> {
        initialSubRows: Row<D>[];
    }
}
export {};
