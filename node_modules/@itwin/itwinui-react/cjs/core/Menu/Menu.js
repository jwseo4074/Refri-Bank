"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Menu = void 0;
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
var react_1 = __importDefault(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var utils_1 = require("../utils");
require("@itwin/itwinui-css/css/menu.css");
/**
 * Basic menu component. Can be used for select or dropdown components.
 */
exports.Menu = react_1.default.forwardRef(function (props, ref) {
    var children = props.children, _a = props.role, role = _a === void 0 ? 'menu' : _a, _b = props.setFocus, setFocus = _b === void 0 ? true : _b, className = props.className, style = props.style, rest = __rest(props, ["children", "role", "setFocus", "className", "style"]);
    (0, utils_1.useTheme)();
    var _c = react_1.default.useState(), focusedIndex = _c[0], setFocusedIndex = _c[1];
    var menuRef = react_1.default.useRef(null);
    var refs = (0, utils_1.useMergedRefs)(menuRef, ref);
    react_1.default.useEffect(function () {
        setFocusedIndex(null);
    }, [children]);
    var getFocusableNodes = react_1.default.useCallback(function () {
        var focusableItems = (0, utils_1.getFocusableElements)(menuRef.current);
        // Filter out focusable elements that are inside each menu item, e.g. checkbox, anchor
        return focusableItems.filter(function (i) { return !focusableItems.some(function (p) { return p.contains(i.parentElement); }); });
    }, []);
    react_1.default.useEffect(function () {
        var _a;
        var items = getFocusableNodes();
        if (focusedIndex != null) {
            (_a = items === null || items === void 0 ? void 0 : items[focusedIndex]) === null || _a === void 0 ? void 0 : _a.focus();
            return;
        }
        var selectedIndex = items.findIndex(function (el) { return el.getAttribute('aria-selected') === 'true'; });
        if (setFocus) {
            setFocusedIndex(selectedIndex > -1 ? selectedIndex : 0);
        }
    }, [setFocus, focusedIndex, getFocusableNodes]);
    var onKeyDown = function (event) {
        var items = getFocusableNodes();
        if (!(items === null || items === void 0 ? void 0 : items.length)) {
            return;
        }
        var currentIndex = focusedIndex !== null && focusedIndex !== void 0 ? focusedIndex : 0;
        switch (event.key) {
            case 'ArrowDown': {
                setFocusedIndex(Math.min(currentIndex + 1, items.length - 1));
                event.preventDefault();
                event.stopPropagation();
                break;
            }
            case 'ArrowUp': {
                setFocusedIndex(Math.max(currentIndex - 1, 0));
                event.preventDefault();
                event.stopPropagation();
                break;
            }
            default:
                break;
        }
    };
    return (react_1.default.createElement("ul", __assign({ className: (0, classnames_1.default)('iui-menu', className), style: style, role: role, onKeyDown: onKeyDown, ref: refs }, rest), children));
});
exports.default = exports.Menu;
