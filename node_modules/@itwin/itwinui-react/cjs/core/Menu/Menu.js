"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Menu = void 0;
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
var react_1 = __importDefault(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var useTheme_1 = require("../utils/hooks/useTheme");
require("@itwin/itwinui-css/css/menu.css");
var useMergedRefs_1 = require("../utils/hooks/useMergedRefs");
/**
 * Basic menu component. Can be used for select or dropdown components.
 */
exports.Menu = react_1.default.forwardRef(function (props, ref) {
    var children = props.children, _a = props.role, role = _a === void 0 ? 'menu' : _a, className = props.className, style = props.style, rest = __rest(props, ["children", "role", "className", "style"]);
    useTheme_1.useTheme();
    var _b = react_1.default.useState(), focusedIndex = _b[0], setFocusedIndex = _b[1];
    var menuRef = react_1.default.useRef(null);
    var refs = useMergedRefs_1.useMergedRefs(menuRef, ref);
    react_1.default.useEffect(function () {
        var _a, _b;
        var items = (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.children;
        if (focusedIndex != null) {
            (_b = items === null || items === void 0 ? void 0 : items[focusedIndex]) === null || _b === void 0 ? void 0 : _b.focus();
            return;
        }
        var childrenArray = react_1.default.Children.toArray(children);
        var selectedIndex = childrenArray.findIndex(function (child) { return child.props.isSelected; });
        var firstEnabledIndex = childrenArray.findIndex(function (child) { return !child.props.disabled; });
        setFocusedIndex(selectedIndex > -1 ? selectedIndex : firstEnabledIndex);
    }, [children, focusedIndex]);
    var onKeyDown = function (event) {
        var _a;
        var items = (_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.children;
        if (!(items === null || items === void 0 ? void 0 : items.length)) {
            return;
        }
        var currentIndex = focusedIndex !== null && focusedIndex !== void 0 ? focusedIndex : 0;
        var isItemDisabled = function (index) {
            return items[index].classList.contains('iui-disabled');
        };
        switch (event.key) {
            case 'ArrowDown': {
                var newIndex = Math.min(currentIndex + 1, items.length - 1);
                while (newIndex < items.length - 1 && isItemDisabled(newIndex)) {
                    newIndex++;
                }
                !isItemDisabled(newIndex) && setFocusedIndex(newIndex);
                event.preventDefault();
                event.stopPropagation();
                break;
            }
            case 'ArrowUp': {
                var newIndex = Math.max(currentIndex - 1, 0);
                while (newIndex > 0 && isItemDisabled(newIndex)) {
                    newIndex--;
                }
                !isItemDisabled(newIndex) && setFocusedIndex(newIndex);
                event.preventDefault();
                event.stopPropagation();
                break;
            }
            default:
                break;
        }
    };
    return (react_1.default.createElement("ul", __assign({ className: classnames_1.default('iui-menu', className), style: style, role: role, onKeyDown: onKeyDown, ref: refs }, rest), children));
});
exports.default = exports.Menu;
