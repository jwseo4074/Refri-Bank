"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MenuItem = void 0;
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
var react_1 = __importDefault(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var useTheme_1 = require("../utils/hooks/useTheme");
require("@itwin/itwinui-css/css/menu.css");
var CaretRightSmall_1 = __importDefault(require("@itwin/itwinui-icons-react/cjs/icons/CaretRightSmall"));
var Popover_1 = require("../utils/Popover");
var Menu_1 = require("./Menu");
var useMergedRefs_1 = require("../utils/hooks/useMergedRefs");
/**
 * Context used to provide menu item ref to sub-menu items.
 */
var MenuItemContext = react_1.default.createContext({ ref: undefined });
/**
 * Basic menu item component. Should be used inside `Menu` component for each item.
 */
exports.MenuItem = react_1.default.forwardRef(function (props, ref) {
    var children = props.children, isSelected = props.isSelected, disabled = props.disabled, value = props.value, onClick = props.onClick, sublabel = props.sublabel, _a = props.size, size = _a === void 0 ? !!sublabel ? 'large' : 'default' : _a, icon = props.icon, badge = props.badge, className = props.className, style = props.style, _b = props.role, role = _b === void 0 ? 'menuitem' : _b, _c = props.subMenuItems, subMenuItems = _c === void 0 ? [] : _c, rest = __rest(props, ["children", "isSelected", "disabled", "value", "onClick", "sublabel", "size", "icon", "badge", "className", "style", "role", "subMenuItems"]);
    useTheme_1.useTheme();
    var menuItemRef = react_1.default.useRef(null);
    var refs = useMergedRefs_1.useMergedRefs(menuItemRef, ref);
    var parentMenuItemRef = react_1.default.useContext(MenuItemContext).ref;
    var subMenuRef = react_1.default.useRef(null);
    var _d = react_1.default.useState(false), isSubmenuVisible = _d[0], setIsSubmenuVisible = _d[1];
    var onKeyDown = function (event) {
        var _a;
        if (event.altKey) {
            return;
        }
        switch (event.key) {
            case 'Enter':
            case ' ':
            case 'Spacebar': {
                !disabled && (onClick === null || onClick === void 0 ? void 0 : onClick(value));
                event.preventDefault();
                break;
            }
            case 'ArrowRight': {
                if (subMenuItems.length > 0) {
                    setIsSubmenuVisible(true);
                    event.preventDefault();
                    event.stopPropagation();
                }
                break;
            }
            case 'ArrowLeft': {
                (_a = parentMenuItemRef === null || parentMenuItemRef === void 0 ? void 0 : parentMenuItemRef.current) === null || _a === void 0 ? void 0 : _a.focus();
                event.stopPropagation();
                event.preventDefault();
                break;
            }
            default:
                break;
        }
    };
    var listItem = (react_1.default.createElement("li", __assign({ className: classnames_1.default('iui-menu-item', {
            'iui-large': size === 'large',
            'iui-active': isSelected,
            'iui-disabled': disabled,
        }, className), onClick: function () { return !disabled && (onClick === null || onClick === void 0 ? void 0 : onClick(value)); }, ref: refs, style: style, role: role, tabIndex: disabled ? undefined : -1, "aria-selected": isSelected, "aria-haspopup": subMenuItems.length > 0, onKeyDown: onKeyDown, onMouseEnter: function () { return setIsSubmenuVisible(true); }, onMouseLeave: function (e) {
            var _a;
            if (!(e.relatedTarget instanceof Node) ||
                !((_a = subMenuRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget))) {
                setIsSubmenuVisible(false);
            }
        } }, rest),
        icon &&
            react_1.default.cloneElement(icon, {
                className: classnames_1.default(icon.props.className, 'iui-icon'),
            }),
        react_1.default.createElement("span", { className: 'iui-content' },
            react_1.default.createElement("div", { className: 'iui-menu-label' }, children),
            sublabel && react_1.default.createElement("div", { className: 'iui-menu-description' }, sublabel)),
        !badge && subMenuItems.length > 0 && (react_1.default.createElement(CaretRightSmall_1.default, { className: 'iui-icon' })),
        badge &&
            react_1.default.cloneElement(badge, {
                className: classnames_1.default(badge.props.className, 'iui-icon'),
            })));
    return subMenuItems.length === 0 ? (listItem) : (react_1.default.createElement(MenuItemContext.Provider, { value: { ref: menuItemRef } },
        react_1.default.createElement(Popover_1.Popover, { placement: 'right-start', visible: isSubmenuVisible, content: react_1.default.createElement("div", { onMouseLeave: function () { return setIsSubmenuVisible(false); }, onBlur: function (e) {
                    var _a, _b;
                    !!(e.relatedTarget instanceof Node) &&
                        !((_a = subMenuRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) &&
                        !((_b = subMenuRef.current) === null || _b === void 0 ? void 0 : _b.isEqualNode(e.relatedTarget)) &&
                        setIsSubmenuVisible(false);
                } },
                react_1.default.createElement(Menu_1.Menu, { ref: subMenuRef }, subMenuItems)) }, listItem)));
});
exports.default = exports.MenuItem;
