"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserIconGroup = void 0;
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
var react_1 = __importDefault(require("react"));
var useTheme_1 = require("../utils/hooks/useTheme");
var classnames_1 = __importDefault(require("classnames"));
require("@itwin/itwinui-css/css/user-icon.css");
/**
 * Group User Icons together.
 *
 * User Icons stacking is based on `maxIcons` count. If you provide 8 User Icons and keep default 5 `maxIcons` count,
 * this component will show 5 User Icons and User Count Icon with "3" in it.
 *
 * You can add custom User Count Icon behavior by using `countIconProps`.
 *
 * @example
 * <UserIconGroup iconSize='medium'>
 *  <UserIcon
 *    abbreviation="TR"
 *    backgroundColor={getUserColor("Terry Rivers")}
 *    title="Terry Rivers"
 *  />
 *  <UserIcon
 *    abbreviation="RM"
 *    backgroundColor={getUserColor("Robin Mercer")}
 *    title="Robin Mercer"
 *  />
 *  <UserIcon
 *    abbreviation="JM"
 *    backgroundColor={getUserColor("Jean Mullins")}
 *    title="Jean Mullins"
 *  />
 * </UserIconGroup>
 */
var UserIconGroup = function (props) {
    var _a;
    var maxLength = 99;
    var children = props.children, _b = props.animated, animated = _b === void 0 ? false : _b, _c = props.stacked, stacked = _c === void 0 ? true : _c, _d = props.maxIcons, maxIcons = _d === void 0 ? 5 : _d, _e = props.iconSize, iconSize = _e === void 0 ? 'small' : _e, countIconProps = props.countIconProps, className = props.className, rest = __rest(props, ["children", "animated", "stacked", "maxIcons", "iconSize", "countIconProps", "className"]);
    var childrenArray = react_1.default.Children.toArray(children);
    var childrenLength = childrenArray.length;
    useTheme_1.useTheme();
    var getUserIconList = function (count) {
        return childrenArray.slice(0, count).map(function (child) {
            return react_1.default.cloneElement(child, {
                status: undefined,
                size: iconSize,
            });
        });
    };
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement("div", __assign({ className: classnames_1.default('iui-user-icon-list', {
                'iui-animated': animated,
                'iui-stacked': stacked,
            }, className) }, rest),
            childrenArray.length <= maxIcons + 1 && getUserIconList(maxIcons + 1),
            childrenArray.length > maxIcons + 1 && (react_1.default.createElement(react_1.default.Fragment, null,
                getUserIconList(maxIcons),
                react_1.default.createElement("div", __assign({}, countIconProps, { className: classnames_1.default('iui-user-icon', (_a = {}, _a["iui-" + iconSize] = iconSize !== 'medium', _a), 'iui-user-icon-count', countIconProps === null || countIconProps === void 0 ? void 0 : countIconProps.className) }),
                    react_1.default.createElement("abbr", { className: 'iui-initials' }, childrenLength <= maxLength
                        ? "" + (childrenLength - maxIcons)
                        : maxLength + "+"),
                    react_1.default.createElement("span", { className: 'iui-stroke' })))))));
};
exports.UserIconGroup = UserIconGroup;
exports.default = exports.UserIconGroup;
