"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Track = void 0;
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
var react_1 = __importDefault(require("react"));
function shouldDisplaySegment(segmentIndex, mode) {
    if ('odd-segments' === mode && 0 === (segmentIndex + 1) % 2) {
        return true;
    }
    else if ('even-segments' === mode && 0 === segmentIndex % 2) {
        return true;
    }
    return false;
}
function generateSegments(values, min, max) {
    var segments = [];
    var lastValue = min;
    for (var i = 0; i < values.length; i++) {
        segments.push({ left: lastValue, right: values[i] });
        lastValue = values[i];
    }
    segments.push({ left: lastValue, right: max });
    return segments;
}
/**
 * Track displays color segments above Rail. Which, if any, segments that are
 * colorized is based on `trackDisplayMode`.
 */
var Track = function (props) {
    var trackDisplayMode = props.trackDisplayMode, sliderMin = props.sliderMin, sliderMax = props.sliderMax, values = props.values;
    var _a = react_1.default.useState(__spreadArray([], values).sort(function (a, b) { return a - b; })), currentValues = _a[0], setCurrentValues = _a[1];
    react_1.default.useEffect(function () {
        var newValues = __spreadArray([], values);
        newValues.sort(function (a, b) { return a - b; });
        setCurrentValues(newValues);
    }, [values]);
    var segments = react_1.default.useMemo(function () { return generateSegments(currentValues, sliderMin, sliderMax); }, [currentValues, sliderMin, sliderMax]);
    return (react_1.default.createElement(react_1.default.Fragment, null, 'none' !== trackDisplayMode &&
        segments.map(function (segment, index) {
            var leftPercent = (100.0 * (segment.left - sliderMin)) / (sliderMax - sliderMin);
            var rightPercent = (100.0 * (segment.right - sliderMin)) / (sliderMax - sliderMin);
            rightPercent = 100.0 - rightPercent;
            return (react_1.default.createElement(react_1.default.Fragment, { key: index }, shouldDisplaySegment(index, trackDisplayMode) ? (react_1.default.createElement("div", { className: 'iui-slider-track', style: { left: leftPercent + "%", right: rightPercent + "%" } })) : null));
        })));
};
exports.Track = Track;
