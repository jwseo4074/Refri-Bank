"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileUpload = void 0;
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
var react_1 = __importDefault(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var utils_1 = require("../utils");
require("@itwin/itwinui-css/css/file-upload.css");
/**
 * File upload component to be wrapped around `FileUploadTemplate` or any arbitrary component.
 * Provides support for dragging and dropping multiple files.
 * @example
 * <FileUpload onFileDropped={console.log}><FileUploadTemplate /></FileUpload>
 * <FileUpload dragContent='Drop file here' onFileDropped={console.log}><Textarea /></FileUpload>
 */
exports.FileUpload = react_1.default.forwardRef(function (props, ref) {
    var dragContent = props.dragContent, children = props.children, onFileDropped = props.onFileDropped, className = props.className, rest = __rest(props, ["dragContent", "children", "onFileDropped", "className"]);
    (0, utils_1.useTheme)();
    var _a = react_1.default.useState(false), isDragActive = _a[0], setIsDragActive = _a[1];
    var fileUploadRef = react_1.default.useRef(null);
    var refs = (0, utils_1.useMergedRefs)(fileUploadRef, ref);
    var onDragOverHandler = function (e) {
        e.preventDefault();
        e.stopPropagation();
    };
    var onDragEnterHandler = function (e) {
        var _a, _b, _c;
        e.preventDefault();
        e.stopPropagation();
        // only set active if a file is dragged over
        if (!isDragActive && ((_c = (_b = (_a = e.dataTransfer) === null || _a === void 0 ? void 0 : _a.items) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.kind) === 'file') {
            setIsDragActive(true);
        }
    };
    var onDragLeaveHandler = function (e) {
        var _a;
        e.preventDefault();
        e.stopPropagation();
        // only set inactive if secondary target is outside the component
        if (isDragActive &&
            !((_a = fileUploadRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget))) {
            setIsDragActive(false);
        }
    };
    var onDropHandler = function (e) {
        var _a;
        e.preventDefault();
        e.stopPropagation();
        if (isDragActive) {
            setIsDragActive(false);
            onFileDropped((_a = e.dataTransfer) === null || _a === void 0 ? void 0 : _a.files);
        }
    };
    return (react_1.default.createElement("div", __assign({ className: (0, classnames_1.default)('iui-file-upload', { 'iui-drag': isDragActive }, className), onDragEnter: onDragEnterHandler, onDragOver: onDragOverHandler, onDragLeave: onDragLeaveHandler, onDrop: onDropHandler, ref: refs }, rest),
        dragContent ? children : react_1.default.createElement("div", { className: 'iui-content' }, children),
        dragContent && react_1.default.createElement("div", { className: 'iui-content' }, dragContent)));
});
exports.default = exports.FileUpload;
