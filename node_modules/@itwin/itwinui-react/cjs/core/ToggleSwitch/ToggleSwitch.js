"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToggleSwitch = void 0;
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
var react_1 = __importDefault(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var utils_1 = require("../utils");
require("@itwin/itwinui-css/css/toggle-switch.css");
/**
 * A switch for turning on and off.
 * @example
 * <caption>Basic toggle</caption>
 * <ToggleSwitch onChange={(e) => console.log(e.target.checked)} defaultChecked />
 * @example
 * <caption>Disabled toggle</caption>
 * <ToggleSwitch disabled />
 * @example
 * <caption>Right labeled toggle</caption>
 * <ToggleSwitch defaultChecked label='Right labeled' />
 * @example
 * <caption>Left labeled toggle</caption>
 * <ToggleSwitch defaultChecked label='Left labeled' labelPosition='left' />
 * @example
 * <caption>Toggle with icon</caption>
 * <ToggleSwitch label='With icon toggle' icon={<svg viewBox='0 0 16 16'><path d='M1 1v14h14V1H1zm13 1.7v10.6L8.7 8 14 2.7zM8 7.3L2.7 2h10.6L8 7.3zm-.7.7L2 13.3V2.7L7.3 8zm.7.7l5.3 5.3H2.7L8 8.7z' /></svg>} />
 */
exports.ToggleSwitch = react_1.default.forwardRef(function (props, ref) {
    var _a = props.disabled, disabled = _a === void 0 ? false : _a, _b = props.labelPosition, labelPosition = _b === void 0 ? 'right' : _b, icon = props.icon, label = props.label, _c = props.setFocus, setFocus = _c === void 0 ? false : _c, className = props.className, style = props.style, rest = __rest(props, ["disabled", "labelPosition", "icon", "label", "setFocus", "className", "style"]);
    (0, utils_1.useTheme)();
    var inputElementRef = react_1.default.useRef(null);
    var refs = (0, utils_1.useMergedRefs)(inputElementRef, ref);
    var WrapperComponent = label ? 'label' : 'div';
    react_1.default.useEffect(function () {
        if (inputElementRef.current && setFocus) {
            inputElementRef.current.focus();
        }
    }, [setFocus]);
    return (react_1.default.createElement(WrapperComponent, { className: (0, classnames_1.default)('iui-toggle-switch-wrapper', {
            'iui-disabled': disabled,
            'iui-label-on-right': label && labelPosition === 'right',
            'iui-label-on-left': label && labelPosition === 'left',
        }, className), style: style },
        react_1.default.createElement("input", __assign({ className: 'iui-toggle-switch', type: 'checkbox', role: 'switch', disabled: disabled, ref: refs }, rest)),
        icon &&
            react_1.default.cloneElement(icon, {
                className: (0, classnames_1.default)('iui-toggle-switch-icon', icon.props.className),
                'aria-hidden': true,
            }),
        label && react_1.default.createElement("span", { className: 'iui-toggle-switch-label' }, label)));
});
exports.default = exports.ToggleSwitch;
