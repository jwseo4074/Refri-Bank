"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Checkbox = void 0;
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
var classnames_1 = __importDefault(require("classnames"));
var react_1 = __importDefault(require("react"));
var ProgressIndicators_1 = require("../ProgressIndicators");
var utils_1 = require("../utils");
require("@itwin/itwinui-css/css/inputs.css");
/**
 * Simple input checkbox
 * @example
 * <Checkbox />
 * <Checkbox label='Basic Checkbox' />
 * <Checkbox label='Disabled Checkbox' disabled />
 * <Checkbox label='Checked' checked />
 * <Checkbox label='Positive Checkbox' status='positive' />
 * <Checkbox label='Warning Checkbox' status='warning' />
 * <Checkbox label='Negative Checkbox' status='negative' />
 * <Checkbox label='Visibility Checkbox' variant='eyeball' />
 */
exports.Checkbox = react_1.default.forwardRef(function (props, ref) {
    var _a, _b;
    var className = props.className, _c = props.disabled, disabled = _c === void 0 ? false : _c, _d = props.indeterminate, indeterminate = _d === void 0 ? false : _d, label = props.label, status = props.status, _e = props.variant, variant = _e === void 0 ? 'default' : _e, setFocus = props.setFocus, _f = props.isLoading, isLoading = _f === void 0 ? false : _f, style = props.style, checkmarkClassName = props.checkmarkClassName, checkmarkStyle = props.checkmarkStyle, rest = __rest(props, ["className", "disabled", "indeterminate", "label", "status", "variant", "setFocus", "isLoading", "style", "checkmarkClassName", "checkmarkStyle"]);
    (0, utils_1.useTheme)();
    var inputElementRef = react_1.default.useRef(null);
    var refs = (0, utils_1.useMergedRefs)(inputElementRef, ref);
    react_1.default.useEffect(function () {
        if (inputElementRef.current && setFocus) {
            inputElementRef.current.focus();
        }
    }, [setFocus]);
    react_1.default.useEffect(function () {
        if (inputElementRef.current) {
            inputElementRef.current.indeterminate = indeterminate;
            inputElementRef.current.checked = indeterminate
                ? false
                : inputElementRef.current.checked;
        }
    });
    var checkbox = (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement("input", __assign({ className: (0, classnames_1.default)('iui-checkbox', {
                'iui-checkbox-visibility': variant === 'eyeball',
                'iui-loading': isLoading,
            }, className && (_a = {}, _a[className] = !label, _a), checkmarkClassName), style: __assign(__assign({}, (!label && style)), checkmarkStyle), disabled: disabled || isLoading, type: 'checkbox', ref: refs }, rest)),
        isLoading && react_1.default.createElement(ProgressIndicators_1.ProgressRadial, { size: 'x-small', indeterminate: true })));
    return !label ? (checkbox) : (react_1.default.createElement("label", { className: (0, classnames_1.default)('iui-checkbox-wrapper', (_b = {
                'iui-disabled': disabled
            },
            _b["iui-".concat(status)] = !!status,
            _b['iui-loading'] = isLoading,
            _b), className), style: style },
        checkbox,
        label && react_1.default.createElement("span", { className: 'iui-checkbox-label' }, label)));
});
exports.default = exports.Checkbox;
