"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Radio = void 0;
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
var classnames_1 = __importDefault(require("classnames"));
var react_1 = __importDefault(require("react"));
var useMergedRefs_1 = require("../utils/hooks/useMergedRefs");
var useTheme_1 = require("../utils/hooks/useTheme");
require("@itwin/itwinui-css/css/inputs.css");
/**
 * Basic radio input component
 * @example
 * <Radio label='Radio' />
 * <Radio disabled={true} label='Radio' />
 * <Radio status='positive' label='Positive' />
 * <Radio status='warning' label='Warning' />
 * <Radio status='negative' label='Negative' />
 */
exports.Radio = react_1.default.forwardRef(function (props, ref) {
    var _a;
    var className = props.className, _b = props.disabled, disabled = _b === void 0 ? false : _b, label = props.label, status = props.status, style = props.style, checkmarkClassName = props.checkmarkClassName, checkmarkStyle = props.checkmarkStyle, _c = props.setFocus, setFocus = _c === void 0 ? false : _c, rest = __rest(props, ["className", "disabled", "label", "status", "style", "checkmarkClassName", "checkmarkStyle", "setFocus"]);
    useTheme_1.useTheme();
    var inputElementRef = react_1.default.useRef(null);
    var refs = useMergedRefs_1.useMergedRefs(inputElementRef, ref);
    react_1.default.useEffect(function () {
        if (inputElementRef.current && setFocus) {
            inputElementRef.current.focus();
        }
    }, [setFocus]);
    return (react_1.default.createElement("label", { className: classnames_1.default('iui-radio', (_a = { 'iui-disabled': disabled }, _a["iui-" + status] = !!status, _a), className), style: style },
        react_1.default.createElement("input", __assign({ disabled: disabled, type: 'radio', ref: refs }, rest)),
        react_1.default.createElement("span", { className: classnames_1.default('iui-radio-dot', checkmarkClassName), style: checkmarkStyle },
            react_1.default.createElement("svg", { viewBox: '0 0 16 16', "aria-hidden": 'true', focusable: 'false' },
                react_1.default.createElement("circle", { cx: '8', cy: '8', r: '6' }))),
        label && react_1.default.createElement("div", { className: 'iui-label' }, label)));
});
exports.default = exports.Radio;
