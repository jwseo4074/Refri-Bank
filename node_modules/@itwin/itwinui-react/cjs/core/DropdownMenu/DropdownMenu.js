"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropdownMenu = void 0;
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
var react_1 = __importDefault(require("react"));
var useTheme_1 = require("../utils/hooks/useTheme");
var Menu_1 = require("../Menu");
var Popover_1 = require("../utils/Popover");
var useMergedRefs_1 = require("../utils/hooks/useMergedRefs");
/**
 * Dropdown menu component.
 * Uses the {@link Popover} component, which is a wrapper around [tippy.js](https://atomiks.github.io/tippyjs).
 * @example
 * const menuItems = (close: () => void) => [
 *   <MenuItem key={1} onClick={onClick(1, close)}>
 *     Item #1
 *   </MenuItem>,
 *   <MenuItem key={2} onClick={onClick(2, close)}>
 *     Item #2
 *   </MenuItem>,
 *   <MenuItem key={3} onClick={onClick(3, close)}>
 *     Item #3
 *   </MenuItem>,
 * ];
 * <DropdownMenu menuItems={menuItems}>
 *   <Button>Menu</Button>
 * </DropdownMenu>
 */
var DropdownMenu = function (props) {
    var menuItems = props.menuItems, children = props.children, className = props.className, style = props.style, _a = props.role, role = _a === void 0 ? 'menu' : _a, visible = props.visible, _b = props.placement, placement = _b === void 0 ? 'bottom-start' : _b, onShow = props.onShow, onHide = props.onHide, trigger = props.trigger, id = props.id, rest = __rest(props, ["menuItems", "children", "className", "style", "role", "visible", "placement", "onShow", "onHide", "trigger", "id"]);
    var _c = react_1.default.useState(visible !== null && visible !== void 0 ? visible : false), isVisible = _c[0], setIsVisible = _c[1];
    react_1.default.useEffect(function () {
        setIsVisible(visible !== null && visible !== void 0 ? visible : false);
    }, [visible]);
    var open = react_1.default.useCallback(function () { return setIsVisible(true); }, []);
    var close = react_1.default.useCallback(function () { return setIsVisible(false); }, []);
    var targetRef = react_1.default.useRef(null);
    var onShowHandler = react_1.default.useCallback(function (instance) {
        setIsVisible(true);
        onShow === null || onShow === void 0 ? void 0 : onShow(instance);
    }, [onShow]);
    var onHideHandler = react_1.default.useCallback(function (instance) {
        var _a;
        setIsVisible(false);
        (_a = targetRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        onHide === null || onHide === void 0 ? void 0 : onHide(instance);
    }, [onHide]);
    useTheme_1.useTheme();
    return (react_1.default.createElement(Popover_1.Popover, __assign({ content: react_1.default.createElement(Menu_1.Menu, { className: className, style: style, role: role, id: id }, react_1.default.useMemo(function () { return menuItems(close); }, [menuItems, close])), visible: trigger === undefined ? isVisible : undefined, onClickOutside: close, placement: placement, onShow: onShowHandler, onHide: onHideHandler, trigger: visible === undefined ? trigger : undefined }, rest), react_1.default.cloneElement(children, {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        ref: useMergedRefs_1.mergeRefs(targetRef, props.children.ref),
        onClick: function (args) {
            var _a, _b;
            trigger === undefined && (isVisible ? close() : open());
            (_b = (_a = children.props).onClick) === null || _b === void 0 ? void 0 : _b.call(_a, args);
        },
    })));
};
exports.DropdownMenu = DropdownMenu;
exports.default = exports.DropdownMenu;
