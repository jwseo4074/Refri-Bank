import React from 'react';
import { PopoverProps } from '../utils/Popover';
import { CommonProps } from '../utils/props';
import '@itwin/itwinui-css/css/inputs.css';
export declare type ItemRendererProps = {
    /**
     * Close handler that closes the dropdown.
     */
    close: () => void;
    /**
     * Indicates whether an item is selected.
     */
    isSelected: boolean;
};
export declare type SelectOption<T> = {
    /**
     * Label of the item used in dropdown list and when selected.
     */
    label: string;
    /**
     * Sublabel of the item shown below the label.
     */
    sublabel?: React.ReactNode;
    /**
     * Modify height of the item.
     * Use 'large' when any of the select options have `sublabel`.
     *
     * Defaults to 'large' if `sublabel` provided, otherwise 'default'.
     */
    size?: 'default' | 'large';
    /**
     * Value of the item.
     */
    value: T;
    /**
     * SVG icon component shown on the right.
     */
    icon?: JSX.Element;
    /**
     * Item is disabled.
     */
    disabled?: boolean;
};
export declare type SelectProps<T> = {
    /**
     * Array of options that populates the select menu.
     */
    options: SelectOption<T>[];
    /**
     * Selected option value.
     */
    value?: T;
    /**
     * Callback function handling change event on select.
     */
    onChange?: (value: T) => void;
    /**
     * Placeholder when no item is selected.
     */
    placeholder?: React.ReactNode;
    /**
     * Disables select.
     * @default false
     */
    disabled?: boolean;
    /**
     * Modify size of select.
     */
    size?: 'small' | 'large';
    /**
     * Set focus on select.
     * @default false
     */
    setFocus?: boolean;
    /**
     * Custom renderer for an item in the dropdown list. `MenuItem` item props are going to be populated if not provided.
     */
    itemRenderer?: (option: SelectOption<T>, itemProps: ItemRendererProps) => JSX.Element;
    /**
     * Custom renderer for the selected item in select.
     */
    selectedItemRenderer?: (option: SelectOption<T>) => JSX.Element;
    /**
     * Custom class for menu.
     */
    menuClassName?: string;
    /**
     * Custom style for menu.
     */
    menuStyle?: React.CSSProperties;
    /**
     * Props to customize {@link Popover} behavior.
     * @see [tippy.js props](https://atomiks.github.io/tippyjs/v6/all-props/)
     */
    popoverProps?: Omit<PopoverProps, 'onShow' | 'onHide' | 'disabled'>;
} & Pick<PopoverProps, 'onShow' | 'onHide'> & CommonProps;
/**
 * Select component to select value from options.
 * Generic type is used for value. It prevents you from mistakenly using other types in `options`, `value` and `onChange`.
 * @example
 * <caption>Basic select.</caption>
 * <Select<number> options={[{ value: 1, label: 'Option 1' }, { value: 2, label: 'Option 2' }, { value: 3, label: 'Option 3' }]} />
 * @example
 * <caption>Disabled select with placeholder.</caption>
 * <Select
 *   disabled={true}
 *   placeholder='Placeholder text'
 *   options={[{ value: 1, label: 'Option 1' }, { value: 2, label: 'Option 2' }, { value: 3, label: 'Option 3' }]}
 * />
 * @example
 * <caption>Select with selected value and change handler.</caption>
 * <Select<number>
 *   value={selectedValue}
 *   onChange={(value) => setSelectedValue(value)}
 *   options={[{ value: 1, label: 'Option 1' }, { value: 2, label: 'Option 2' }, { value: 3, label: 'Option 3' }]}
 * />
 * @example
 * <caption>Select using custom renderers for menu items and selected value.</caption>
 * <Select<string>
 *   options={[
 *     { value: 'yellow', label: 'Yellow' },
 *     { value: 'green', label: 'Green' },
 *     { value: 'red', label: 'Red' },
 *   ]}
 *   value={selectedValue}
 *   placeholder='Placeholder text'
 *   itemRenderer={(option, itemProps) => (
 *     <MenuItem
 *       style={{ color: option.value }}
 *       isSelected={itemProps.isSelected}
 *       onClick={() => {
 *         setSelectedValue(option.value);
 *         itemProps.close();
 *       }}
 *       role='option'
 *       ref={(el) => itemProps.isSelected && el?.scrollIntoView()}
 *     >
 *       {option.label}
 *     </MenuItem>
 *   )}
 *   selectedItemRenderer={(option) => (
 *     <span style={{ backgroundColor: option.value }}>{option.label}</span>
 *   )}
 * />
 */
export declare const Select: <T>(props: SelectProps<T>) => JSX.Element;
export default Select;
