"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Select = void 0;
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
var react_1 = __importDefault(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var DropdownMenu_1 = require("../DropdownMenu");
var MenuItem_1 = require("../Menu/MenuItem");
var utils_1 = require("../utils");
require("@itwin/itwinui-css/css/inputs.css");
var CaretDownSmall_1 = __importDefault(require("@itwin/itwinui-icons-react/cjs/icons/CaretDownSmall"));
/**
 * Select component to select value from options.
 * Generic type is used for value. It prevents you from mistakenly using other types in `options`, `value` and `onChange`.
 * @example
 * <caption>Basic select.</caption>
 * <Select<number> options={[{ value: 1, label: 'Option 1' }, { value: 2, label: 'Option 2' }, { value: 3, label: 'Option 3' }]} />
 * @example
 * <caption>Disabled select with placeholder.</caption>
 * <Select
 *   disabled={true}
 *   placeholder='Placeholder text'
 *   options={[{ value: 1, label: 'Option 1' }, { value: 2, label: 'Option 2' }, { value: 3, label: 'Option 3' }]}
 * />
 * @example
 * <caption>Select with selected value and change handler.</caption>
 * <Select<number>
 *   value={selectedValue}
 *   onChange={(value) => setSelectedValue(value)}
 *   options={[{ value: 1, label: 'Option 1' }, { value: 2, label: 'Option 2' }, { value: 3, label: 'Option 3' }]}
 * />
 * @example
 * <caption>Select using custom renderers for menu items and selected value.</caption>
 * <Select<string>
 *   options={[
 *     { value: 'yellow', label: 'Yellow' },
 *     { value: 'green', label: 'Green' },
 *     { value: 'red', label: 'Red' },
 *   ]}
 *   value={selectedValue}
 *   placeholder='Placeholder text'
 *   itemRenderer={(option, itemProps) => (
 *     <MenuItem
 *       style={{ color: option.value }}
 *       isSelected={itemProps.isSelected}
 *       onClick={() => {
 *         setSelectedValue(option.value);
 *         itemProps.close();
 *       }}
 *       role='option'
 *       ref={(el) => itemProps.isSelected && el?.scrollIntoView()}
 *     >
 *       {option.label}
 *     </MenuItem>
 *   )}
 *   selectedItemRenderer={(option) => (
 *     <span style={{ backgroundColor: option.value }}>{option.label}</span>
 *   )}
 * />
 */
var Select = function (props) {
    var _a;
    var _b;
    var options = props.options, value = props.value, onChange = props.onChange, placeholder = props.placeholder, _c = props.disabled, disabled = _c === void 0 ? false : _c, size = props.size, _d = props.setFocus, setFocus = _d === void 0 ? false : _d, itemRenderer = props.itemRenderer, selectedItemRenderer = props.selectedItemRenderer, className = props.className, style = props.style, menuClassName = props.menuClassName, menuStyle = props.menuStyle, onShow = props.onShow, onHide = props.onHide, popoverProps = props.popoverProps, rest = __rest(props, ["options", "value", "onChange", "placeholder", "disabled", "size", "setFocus", "itemRenderer", "selectedItemRenderer", "className", "style", "menuClassName", "menuStyle", "onShow", "onHide", "popoverProps"]);
    (0, utils_1.useTheme)();
    var _e = react_1.default.useState((_b = popoverProps === null || popoverProps === void 0 ? void 0 : popoverProps.visible) !== null && _b !== void 0 ? _b : false), isOpen = _e[0], setIsOpen = _e[1];
    react_1.default.useEffect(function () {
        setIsOpen(function (open) { var _a; return (_a = popoverProps === null || popoverProps === void 0 ? void 0 : popoverProps.visible) !== null && _a !== void 0 ? _a : open; });
    }, [popoverProps]);
    var _f = react_1.default.useState(0), minWidth = _f[0], setMinWidth = _f[1];
    var toggle = function () { return setIsOpen(function (open) { return !open; }); };
    var selectRef = react_1.default.useRef(null);
    var toggleButtonRef = react_1.default.useRef(null);
    var onShowHandler = react_1.default.useCallback(function (instance) {
        setIsOpen(true);
        onShow === null || onShow === void 0 ? void 0 : onShow(instance);
    }, [onShow]);
    var onHideHandler = react_1.default.useCallback(function (instance) {
        setIsOpen(false);
        onHide === null || onHide === void 0 ? void 0 : onHide(instance);
    }, [onHide]);
    react_1.default.useEffect(function () {
        if (selectRef.current && !disabled && setFocus) {
            selectRef.current.focus();
        }
    }, [setFocus, disabled]);
    react_1.default.useEffect(function () {
        if (selectRef.current) {
            setMinWidth(selectRef.current.offsetWidth);
        }
    }, [isOpen]);
    var onKeyDown = function (event, toggle) {
        switch (event.key) {
            case 'Enter':
            case ' ':
            case 'Spacebar':
                toggle();
                event.preventDefault();
                break;
            default:
                break;
        }
    };
    var menuItems = react_1.default.useCallback(function (close) {
        return options.map(function (option, index) {
            var isSelected = value === option.value;
            var menuItem = itemRenderer ? (itemRenderer(option, { close: close, isSelected: isSelected })) : (react_1.default.createElement(MenuItem_1.MenuItem, null, option.label));
            return react_1.default.cloneElement(menuItem, __assign(__assign({ key: "".concat(option.label, "-").concat(index), isSelected: isSelected, onClick: function () {
                    !option.disabled && (onChange === null || onChange === void 0 ? void 0 : onChange(option.value));
                    close();
                }, ref: function (el) { return isSelected && (el === null || el === void 0 ? void 0 : el.scrollIntoView()); }, role: 'option' }, option), menuItem.props));
        });
    }, [itemRenderer, onChange, options, value]);
    var selectedItem = react_1.default.useMemo(function () {
        if (value == null) {
            return undefined;
        }
        return options.find(function (option) { return option.value === value; });
    }, [options, value]);
    return (react_1.default.createElement("div", __assign({ className: (0, classnames_1.default)('iui-input-with-icon', className), "aria-expanded": isOpen, "aria-haspopup": 'listbox', style: style }, rest),
        react_1.default.createElement(DropdownMenu_1.DropdownMenu, __assign({ menuItems: menuItems, placement: 'bottom-start', className: (0, classnames_1.default)('iui-scroll', menuClassName), style: __assign({ minWidth: minWidth, maxWidth: "min(".concat(minWidth * 2, "px, 90vw)"), maxHeight: 315 }, menuStyle), role: 'listbox', onShow: onShowHandler, onHide: onHideHandler, disabled: disabled }, popoverProps, { visible: isOpen, onClickOutside: function (_, _a) {
                var _b;
                var target = _a.target;
                if (!((_b = toggleButtonRef.current) === null || _b === void 0 ? void 0 : _b.contains(target))) {
                    setIsOpen(false);
                }
            } }),
            react_1.default.createElement("div", { ref: selectRef, className: (0, classnames_1.default)('iui-select-button', (_a = {
                        'iui-placeholder': !selectedItem && !!placeholder,
                        'iui-disabled': disabled
                    },
                    _a["iui-".concat(size)] = !!size,
                    _a)), onClick: function () { return !disabled && toggle(); }, onKeyDown: function (e) { return !disabled && onKeyDown(e, toggle); }, tabIndex: !disabled ? 0 : undefined },
                !selectedItem && react_1.default.createElement("span", { className: 'iui-content' }, placeholder),
                selectedItem &&
                    selectedItemRenderer &&
                    selectedItemRenderer(selectedItem),
                selectedItem && !selectedItemRenderer && (react_1.default.createElement(react_1.default.Fragment, null,
                    (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.icon) &&
                        react_1.default.cloneElement(selectedItem.icon, {
                            className: (0, classnames_1.default)(selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.icon.props.className, 'iui-icon'),
                        }),
                    react_1.default.createElement("span", { className: 'iui-content' }, selectedItem.label))))),
        react_1.default.createElement("span", { ref: toggleButtonRef, className: (0, classnames_1.default)('iui-end-icon', {
                'iui-actionable': !disabled,
                'iui-disabled': disabled,
                'iui-open': isOpen,
            }), onClick: function () { return !disabled && toggle(); } },
            react_1.default.createElement(CaretDownSmall_1.default, { "aria-hidden": true }))));
};
exports.Select = Select;
exports.default = exports.Select;
