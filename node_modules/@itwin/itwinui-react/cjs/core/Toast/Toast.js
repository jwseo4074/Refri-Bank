"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToastPresentation = exports.Toast = void 0;
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
var react_1 = __importDefault(require("react"));
var react_transition_group_1 = require("react-transition-group");
var CloseSmall_1 = __importDefault(require("@itwin/itwinui-icons-react/cjs/icons/CloseSmall"));
var classnames_1 = __importDefault(require("classnames"));
var utils_1 = require("../utils");
require("@itwin/itwinui-css/css/toast-notification.css");
var Buttons_1 = require("../Buttons");
/**
 * Generic Toast Notification Component
 * @example
 * <Toast type='persisting' content='Job processing completed.' category='positive' link={{onClick:() => {alert('Link callback')}, title:'View the report'}} />
 * <Toast type='temporary' content='Processing completed.' category='positive' />
 * <Toast type='temporary' content='26 files are available for synchronization.' category='informational' />
 * <Toast type='persisting' content='Job processing error.' category='negative' />
 */
var Toast = function (props) {
    var content = props.content, category = props.category, _a = props.type, type = _a === void 0 ? 'temporary' : _a, isVisible = props.isVisible, link = props.link, _b = props.duration, duration = _b === void 0 ? 7000 : _b, hasCloseButton = props.hasCloseButton, onRemove = props.onRemove, animateOutTo = props.animateOutTo, _c = props.placementPosition, placementPosition = _c === void 0 ? 'top' : _c;
    (0, utils_1.useTheme)();
    var closeTimeout = react_1.default.useRef(0);
    var _d = react_1.default.useState(isVisible), visible = _d[0], setVisible = _d[1];
    var _e = react_1.default.useState(0), height = _e[0], setHeight = _e[1];
    var thisElement = react_1.default.useRef(null);
    var _f = react_1.default.useState(0), margin = _f[0], setMargin = _f[1];
    var marginStyle = function () {
        if (placementPosition === 'top') {
            return { marginBottom: margin };
        }
        return { marginTop: margin };
    };
    react_1.default.useEffect(function () {
        if (type === 'temporary') {
            setCloseTimeout(duration);
        }
        return function () {
            clearCloseTimeout();
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [duration, type]);
    react_1.default.useEffect(function () {
        setVisible(isVisible);
    }, [isVisible]);
    react_1.default.useEffect(function () {
        // if we don't have animateOutTo point and not isVisible, set negative margin to move other toasts up.
        // Close all and close on toasts with no anchor.
        if (!isVisible && !animateOutTo) {
            setMargin(-height);
        }
    }, [isVisible, animateOutTo, setMargin, height]);
    var close = function () {
        clearCloseTimeout();
        // move element up when this element is closed.
        setMargin(-height);
        setVisible(false);
    };
    var setCloseTimeout = function (timeout) {
        var definedWindow = (0, utils_1.getWindow)();
        if (!definedWindow) {
            return;
        }
        closeTimeout.current = definedWindow.setTimeout(function () {
            close();
        }, timeout);
    };
    var clearCloseTimeout = function () {
        var _a;
        (_a = (0, utils_1.getWindow)()) === null || _a === void 0 ? void 0 : _a.clearTimeout(closeTimeout.current);
    };
    var onRef = function (ref) {
        if (ref) {
            var height_1 = ref.getBoundingClientRect().height;
            setHeight(height_1);
        }
    };
    var calculateOutAnimation = function (node) {
        // calculation translate x and y pixels.
        var translateX = 0;
        var translateY = 0;
        if (animateOutTo && node) {
            var _a = node.getBoundingClientRect(), startX = _a.x, startY = _a.y; // current element
            var _b = animateOutTo.getBoundingClientRect(), endX = _b.x, endY = _b.y; // anchor point
            translateX = endX - startX;
            translateY = endY - startY;
        }
        return { translateX: translateX, translateY: translateY };
    };
    return (react_1.default.createElement(react_transition_group_1.Transition, { timeout: { enter: 240, exit: animateOutTo ? 400 : 120 }, in: visible, appear: true, unmountOnExit: true, onEnter: function (node) {
            node.style.transform = 'translateY(15%)';
            node.style.transitionTimingFunction = 'ease';
        }, onEntered: function (node) {
            node.style.transform = 'translateY(0)';
        }, onExiting: function (node) {
            var _a = calculateOutAnimation(node), translateX = _a.translateX, translateY = _a.translateY;
            node.style.transform = animateOutTo
                ? "scale(0.9) translate(".concat(translateX, "px,").concat(translateY, "px)")
                : "scale(0.9)";
            node.style.opacity = '0';
            node.style.transitionDuration = animateOutTo ? '400ms' : '120ms';
            node.style.transitionTimingFunction = 'cubic-bezier(0.4, 0, 1, 1)';
        }, onExited: onRemove }, react_1.default.createElement("div", { ref: thisElement, className: 'iui-toast-all', style: __assign({ height: height }, marginStyle()) },
        react_1.default.createElement("div", { ref: onRef },
            react_1.default.createElement(exports.ToastPresentation, { category: category, content: content, link: link, type: type, hasCloseButton: hasCloseButton, onClose: close })))));
};
exports.Toast = Toast;
/**
 * The presentational part of a toast notification, without any animation or logic.
 * @private
 */
var ToastPresentation = function (props) {
    var content = props.content, category = props.category, _a = props.type, type = _a === void 0 ? 'temporary' : _a, link = props.link, hasCloseButton = props.hasCloseButton, onClose = props.onClose, className = props.className, rest = __rest(props, ["content", "category", "type", "link", "hasCloseButton", "onClose", "className"]);
    var StatusIcon = utils_1.StatusIconMap[category];
    return (react_1.default.createElement("div", __assign({ className: (0, classnames_1.default)("iui-toast iui-".concat(category), className) }, rest),
        react_1.default.createElement("div", { className: 'iui-status-area' }, react_1.default.createElement(StatusIcon, { className: 'iui-icon' })),
        react_1.default.createElement("div", { className: 'iui-message' }, content),
        link && (react_1.default.createElement("a", { className: 'iui-toast-anchor', onClick: link.onClick }, link.title)),
        (type === 'persisting' || hasCloseButton) && (react_1.default.createElement(Buttons_1.IconButton, { size: 'small', styleType: 'borderless', onClick: onClose, "aria-label": 'Close' },
            react_1.default.createElement(CloseSmall_1.default, null)))));
};
exports.ToastPresentation = ToastPresentation;
exports.default = exports.Toast;
