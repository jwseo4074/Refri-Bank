"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useResizeObserver = void 0;
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
var react_1 = __importDefault(require("react"));
var dom_1 = require("../functions/dom");
/**
 * Hook that uses `ResizeObserver` to access an element's size every time it updates.
 * @private
 * @param onResize callback fired with the element's new dimensions on every resize.
 * @returns a callback ref that needs to be set on the element, and a ResizeObserver instance.
 *
 * @example
 * const onResize = React.useCallback((size) => console.log(size), []);
 * const [ref] = useResizeObserver(onResize);
 * ...
 * return <div ref={ref}>...</div>;
 */
var useResizeObserver = function (onResize) {
    var resizeObserver = react_1.default.useRef();
    var elementRef = react_1.default.useCallback(function (element) {
        var _a, _b, _c;
        if (!((_a = (0, dom_1.getWindow)()) === null || _a === void 0 ? void 0 : _a.ResizeObserver)) {
            return;
        }
        (_b = resizeObserver.current) === null || _b === void 0 ? void 0 : _b.disconnect();
        if (element) {
            resizeObserver.current = new ResizeObserver(function (_a) {
                var contentRect = _a[0].contentRect;
                return onResize(contentRect);
            });
            (_c = resizeObserver.current) === null || _c === void 0 ? void 0 : _c.observe(element);
        }
    }, [onResize]);
    return [elementRef, resizeObserver.current];
};
exports.useResizeObserver = useResizeObserver;
