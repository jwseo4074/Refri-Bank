"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberRangeFilter = void 0;
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
var react_1 = __importDefault(require("react"));
var utils_1 = require("../../../utils");
var FilterButtonBar_1 = require("../FilterButtonBar");
var BaseFilter_1 = require("../BaseFilter");
require("@itwin/itwinui-css/css/table.css");
var LabeledInput_1 = require("../../../LabeledInput");
var defaultStrings = {
    from: 'From',
    to: 'To',
};
var NumberRangeFilter = function (props) {
    var _a, _b, _c, _d;
    var column = props.column, translatedLabels = props.translatedLabels, setFilter = props.setFilter, clearFilter = props.clearFilter;
    (0, utils_1.useTheme)();
    var translatedStrings = __assign(__assign({}, defaultStrings), translatedLabels);
    var _e = react_1.default.useState((_b = (_a = column.filterValue) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : ''), from = _e[0], setFrom = _e[1];
    var _f = react_1.default.useState((_d = (_c = column.filterValue) === null || _c === void 0 ? void 0 : _c[1]) !== null && _d !== void 0 ? _d : ''), to = _f[0], setTo = _f[1];
    var parseInputValue = function (value) {
        return !value || isNaN(Number(value)) ? undefined : Number(value);
    };
    var onKeyDown = function (event) {
        if (event.key === 'Enter') {
            setFilter([parseInputValue(from), parseInputValue(to)]);
        }
    };
    return (react_1.default.createElement(BaseFilter_1.BaseFilter, null,
        react_1.default.createElement(LabeledInput_1.LabeledInput, { label: translatedStrings.from, value: from, onChange: function (e) { return setFrom(e.target.value); }, onKeyDown: onKeyDown, type: 'number', displayStyle: 'inline', setFocus: true }),
        react_1.default.createElement(LabeledInput_1.LabeledInput, { label: translatedStrings.to, value: to, onChange: function (e) { return setTo(e.target.value); }, type: 'number', displayStyle: 'inline', onKeyDown: onKeyDown }),
        react_1.default.createElement(FilterButtonBar_1.FilterButtonBar, { setFilter: function () {
                return setFilter([parseInputValue(from), parseInputValue(to)]);
            }, clearFilter: clearFilter, translatedLabels: translatedLabels })));
};
exports.NumberRangeFilter = NumberRangeFilter;
