/// <reference types="react" />
import { DateRangeTranslation } from './DateRangeFilter/DateRangeFilter';
import { FilterButtonBarTranslation } from './FilterButtonBar';
import { NumberRangeTranslation, NumberRangeFilterProps } from './NumberRangeFilter/NumberRangeFilter';
import { TableFilterProps } from './types';
export declare type DateRangeFilterOptions = {
    /**
     * Function that formats selected date into a `string` that is shown inside the input.
     */
    formatDate?: (date: Date) => string;
    /**
     * Function that parses user input string into a `Date`.
     * If string is invalid, return invalid `Date` object (`new Date('')`)
     * Recommended to use pattern matching in order to parse string when date is fully entered.
     */
    parseInput?: (text: string) => Date;
    /**
     * Placeholder shown in input field. It is recommended to show date format.
     */
    placeholder?: string;
    /**
     * Translated filter labels.
     */
    translatedLabels?: DateRangeTranslation & FilterButtonBarTranslation;
};
export declare const tableFilters: {
    /**
     * Basic filter with a single input field.
     * @param translatedLabels Translated filter labels.
     */
    TextFilter: (translatedLabels?: FilterButtonBarTranslation | undefined) => <T extends Record<string, unknown>>(props: TableFilterProps<T>) => JSX.Element;
    /**
     * Date range filter.
     *
     * By default it handles user input in `en-us` date format. If you want to use other format
     * please provide `formatDate`, `parseInput` and `placeholder`.
     *
     * It only works with `Date` type object properties.
     * If your data is different type e.g. `string`, you can use `accessor` property in column description:
     * `accessor: (rowData) => new Date(rowData.date)`.
     */
    DateRangeFilter: (options?: DateRangeFilterOptions | undefined) => <T_1 extends Record<string, unknown>>(props: TableFilterProps<T_1>) => JSX.Element;
    /**
     * Number range filter.
     *
     * It only works with `number` type object properties.
     * If your data is different type e.g. `string`, you can use `accessor` property in column description:
     * `accessor: (rowData) => Number(rowData.numberProp)`.
     * @param translatedLabels Translated filter labels.
     */
    NumberRangeFilter: (translatedLabels?: (NumberRangeTranslation & FilterButtonBarTranslation) | undefined) => <T_2 extends Record<string, unknown>>(props: NumberRangeFilterProps<T_2>) => JSX.Element;
};
