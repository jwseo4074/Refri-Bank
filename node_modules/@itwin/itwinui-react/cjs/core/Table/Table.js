"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
var react_1 = __importDefault(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var react_table_1 = require("react-table");
var Checkbox_1 = require("../Checkbox");
var ProgressIndicators_1 = require("../ProgressIndicators");
var useTheme_1 = require("../utils/hooks/useTheme");
require("@itwin/itwinui-css/css/table.css");
var SortDown_1 = __importDefault(require("@itwin/itwinui-icons-react/cjs/icons/SortDown"));
var SortUp_1 = __importDefault(require("@itwin/itwinui-icons-react/cjs/icons/SortUp"));
var utils_1 = require("./utils");
var TableRowMemoized_1 = require("./TableRowMemoized");
var Buttons_1 = require("../Buttons");
var ChevronRight_1 = __importDefault(require("@itwin/itwinui-icons-react/cjs/icons/ChevronRight"));
var filters_1 = require("./filters");
var customFilterFunctions_1 = require("./filters/customFilterFunctions");
var singleRowSelectedAction = 'singleRowSelected';
/**
 * Table based on [react-table](https://react-table.tanstack.com/docs/api/overview).
 * @example
 * const columns = React.useMemo(() => [
 *  {
 *    Header: 'Header name',
 *    columns: [
 *      {
 *        id: 'name',
 *        Header: 'Name',
 *        accessor: 'name',
 *        width: 90,
 *      },
 *      {
 *        id: 'description',
 *        Header: 'description',
 *        accessor: 'description',
 *        maxWidth: 200,
 *      },
 *      {
 *        id: 'view',
 *        Header: 'view',
 *        Cell: () => {
 *          return <span onClick={onViewClick}>View</span>
 *        },
 *      },
 *    ],
 *  },
 * ], [onViewClick])
 * const data = [
 *  { name: 'Name1', description: 'Description1' },
 *  { name: 'Name2', description: 'Description2' },
 *  { name: 'Name3', description: 'Description3' },
 * ]
 * <Table
 *   columns={columns}
 *   data={data}
 *   emptyTableContent='No data.'
 *   isLoading={false}
 *   isSortable={true}
 * />
 */
var Table = function (props) {
    var columns = props.columns, _a = props.isLoading, isLoading = _a === void 0 ? false : _a, emptyTableContent = props.emptyTableContent, className = props.className, style = props.style, id = props.id, _b = props.isSelectable, isSelectable = _b === void 0 ? false : _b, onSelect = props.onSelect, onRowClick = props.onRowClick, _c = props.isSortable, isSortable = _c === void 0 ? false : _c, onSort = props.onSort, stateReducer = props.stateReducer, onBottomReached = props.onBottomReached, onRowInViewport = props.onRowInViewport, _d = props.intersectionMargin, intersectionMargin = _d === void 0 ? 300 : _d, subComponent = props.subComponent, onExpand = props.onExpand, onFilter = props.onFilter, emptyFilteredTableContent = props.emptyFilteredTableContent, filterFunctions = props.filterTypes, expanderCell = props.expanderCell, isRowDisabled = props.isRowDisabled, rowProps = props.rowProps, rest = __rest(props, ["columns", "isLoading", "emptyTableContent", "className", "style", "id", "isSelectable", "onSelect", "onRowClick", "isSortable", "onSort", "stateReducer", "onBottomReached", "onRowInViewport", "intersectionMargin", "subComponent", "onExpand", "onFilter", "emptyFilteredTableContent", "filterTypes", "expanderCell", "isRowDisabled", "rowProps"]);
    useTheme_1.useTheme();
    var _e = react_1.default.useState(), ownerDocument = _e[0], setOwnerDocument = _e[1];
    var defaultColumn = react_1.default.useMemo(function () { return ({
        maxWidth: 0,
        minWidth: 0,
        width: 0,
    }); }, []);
    // useRef prevents from rerendering when one of these callbacks changes
    var onBottomReachedRef = react_1.default.useRef(onBottomReached);
    var onRowInViewportRef = react_1.default.useRef(onRowInViewport);
    react_1.default.useEffect(function () {
        onBottomReachedRef.current = onBottomReached;
        onRowInViewportRef.current = onRowInViewport;
    }, [onBottomReached, onRowInViewport]);
    var useExpanderHook = function (hooks) {
        if (!subComponent) {
            return;
        }
        hooks.allColumns.push(function (columns) { return __spreadArray([
            {
                id: 'iui-table-expander',
                disableResizing: true,
                disableGroupBy: true,
                minWidth: 48,
                width: 48,
                maxWidth: 48,
                columnClassName: 'iui-slot',
                cellClassName: 'iui-slot',
                Cell: function (props) {
                    var row = props.row;
                    if (!subComponent(row)) {
                        return null;
                    }
                    else if (expanderCell) {
                        return expanderCell(props);
                    }
                    else {
                        return (react_1.default.createElement(Buttons_1.IconButton, { className: 'iui-row-expander', styleType: 'borderless', size: 'small', onClick: function (e) {
                                e.stopPropagation();
                                row.toggleRowExpanded();
                            }, disabled: isRowDisabled === null || isRowDisabled === void 0 ? void 0 : isRowDisabled(props.row.original) }, react_1.default.createElement(ChevronRight_1.default, null)));
                    }
                },
            }
        ], columns); });
    };
    var useSelectionHook = function (hooks) {
        if (!isSelectable) {
            return;
        }
        hooks.allColumns.push(function (columns) { return __spreadArray([
            // Let's make a column for selection
            {
                id: 'iui-table-checkbox-selector',
                disableResizing: true,
                disableGroupBy: true,
                minWidth: 48,
                width: 48,
                maxWidth: 48,
                columnClassName: 'iui-slot',
                cellClassName: 'iui-slot',
                Header: function (_a) {
                    var getToggleAllRowsSelectedProps = _a.getToggleAllRowsSelectedProps;
                    var disabled = instance.rows.every(function (row) {
                        return isRowDisabled === null || isRowDisabled === void 0 ? void 0 : isRowDisabled(row.original);
                    });
                    var checked = instance.initialRows.every(function (row) {
                        return instance.state.selectedRowIds[row.id] ||
                            (isRowDisabled === null || isRowDisabled === void 0 ? void 0 : isRowDisabled(row.original));
                    });
                    return (react_1.default.createElement(Checkbox_1.Checkbox, __assign({}, getToggleAllRowsSelectedProps(), { checked: checked && !disabled, indeterminate: !checked &&
                            Object.keys(instance.state.selectedRowIds).length > 0, disabled: disabled })));
                },
                Cell: function (_a) {
                    var row = _a.row;
                    return (react_1.default.createElement("span", { onClick: function (e) { return e.stopPropagation(); } },
                        react_1.default.createElement(Checkbox_1.Checkbox, __assign({}, row.getToggleRowSelectedProps(), { disabled: isRowDisabled === null || isRowDisabled === void 0 ? void 0 : isRowDisabled(row.original) }))));
                },
            }
        ], columns); });
        hooks.useInstanceBeforeDimensions.push(function (_a) {
            var headerGroups = _a.headerGroups;
            // Fix the parent group of the selection button to not be resizable
            var selectionGroupHeader = headerGroups[0].headers[0];
            selectionGroupHeader.canResize = false;
        });
    };
    var onFilterHandler = function (newState, action, previousState, instance) {
        var previousFilter = previousState.filters.find(function (f) { return f.id === action.columnId; });
        if ((previousFilter === null || previousFilter === void 0 ? void 0 : previousFilter.value) != action.filterValue) {
            var filters = newState.filters.map(function (f) {
                var _a, _b;
                var column = instance === null || instance === void 0 ? void 0 : instance.allColumns.find(function (c) { return c.id === f.id; });
                return {
                    id: f.id,
                    value: f.value,
                    fieldType: (_a = column === null || column === void 0 ? void 0 : column.fieldType) !== null && _a !== void 0 ? _a : 'text',
                    filterType: (_b = column === null || column === void 0 ? void 0 : column.filter) !== null && _b !== void 0 ? _b : 'text',
                };
            });
            onFilter === null || onFilter === void 0 ? void 0 : onFilter(filters, newState);
        }
    };
    var onSelectHandler = function (newState, instance) {
        if (!(instance === null || instance === void 0 ? void 0 : instance.rows.length)) {
            onSelect === null || onSelect === void 0 ? void 0 : onSelect([], newState);
            return;
        }
        var selectedData = [];
        var newSelectedRowIds = {};
        instance.initialRows.forEach(function (row) {
            if (newState.selectedRowIds[row.id] && !(isRowDisabled === null || isRowDisabled === void 0 ? void 0 : isRowDisabled(row.original))) {
                newSelectedRowIds[row.id] = true;
                selectedData.push(row.original);
            }
        });
        newState.selectedRowIds = newSelectedRowIds;
        onSelect === null || onSelect === void 0 ? void 0 : onSelect(selectedData, newState);
    };
    var onExpandHandler = function (newState, instance) {
        if (!(instance === null || instance === void 0 ? void 0 : instance.rows.length)) {
            onExpand === null || onExpand === void 0 ? void 0 : onExpand([], newState);
            return;
        }
        var expandedData = [];
        instance.rows.forEach(function (row) {
            if (newState.expanded[row.id]) {
                expandedData.push(row.original);
            }
        });
        onExpand === null || onExpand === void 0 ? void 0 : onExpand(expandedData, newState);
    };
    var tableStateReducer = function (newState, action, previousState, instance) {
        var _a;
        switch (action.type) {
            case react_table_1.actions.toggleSortBy:
                onSort === null || onSort === void 0 ? void 0 : onSort(newState);
                break;
            case react_table_1.actions.setFilter:
                onFilterHandler(newState, action, previousState, instance);
                break;
            case react_table_1.actions.toggleRowExpanded:
            case react_table_1.actions.toggleAllRowsExpanded:
                onExpandHandler(newState, instance);
                break;
            case singleRowSelectedAction: {
                newState = __assign(__assign({}, newState), { selectedRowIds: (_a = {}, _a[action.id] = true, _a) });
            }
            case react_table_1.actions.toggleRowSelected:
            case react_table_1.actions.toggleAllRowsSelected:
            case react_table_1.actions.toggleAllPageRowsSelected: {
                onSelectHandler(newState, instance);
                break;
            }
            default:
                break;
        }
        return stateReducer
            ? stateReducer(newState, action, previousState, instance)
            : newState;
    };
    var instance = react_table_1.useTable(__assign(__assign({}, props), { columns: columns,
        defaultColumn: defaultColumn, disableSortBy: !isSortable, stateReducer: tableStateReducer, filterTypes: __assign(__assign({}, customFilterFunctions_1.customFilterFunctions), filterFunctions) }), react_table_1.useFlexLayout, react_table_1.useFilters, react_table_1.useSortBy, react_table_1.useExpanded, react_table_1.useRowSelect, useExpanderHook, useSelectionHook);
    var getTableProps = instance.getTableProps, rows = instance.rows, headerGroups = instance.headerGroups, getTableBodyProps = instance.getTableBodyProps, prepareRow = instance.prepareRow, data = instance.data, state = instance.state, allColumns = instance.allColumns, filteredFlatRows = instance.filteredFlatRows, dispatch = instance.dispatch;
    var ariaDataAttributes = Object.entries(rest).reduce(function (result, _a) {
        var key = _a[0], value = _a[1];
        if (key.startsWith('data-') || key.startsWith('aria-')) {
            result[key] = value;
        }
        return result;
    }, {});
    var areFiltersSet = allColumns.some(function (column) { return !!column.filterValue; });
    var onRowClickHandler = react_1.default.useCallback(function (event, row) {
        var isDisabled = isRowDisabled === null || isRowDisabled === void 0 ? void 0 : isRowDisabled(row.original);
        if (isSelectable && !isDisabled) {
            if (!row.isSelected && !event.ctrlKey) {
                dispatch({
                    type: singleRowSelectedAction,
                    id: row.id,
                });
            }
            else {
                row.toggleRowSelected(!row.isSelected);
            }
        }
        !isDisabled && (onRowClick === null || onRowClick === void 0 ? void 0 : onRowClick(event, row));
    }, [dispatch, isSelectable, onRowClick, isRowDisabled]);
    return (react_1.default.createElement("div", __assign({ ref: function (element) { return setOwnerDocument(element === null || element === void 0 ? void 0 : element.ownerDocument); }, id: id }, getTableProps({
        className: classnames_1.default('iui-table', className),
        style: style,
    }), ariaDataAttributes),
        react_1.default.createElement("div", { className: 'iui-table-header' }, headerGroups.slice(1).map(function (headerGroup) {
            var headerGroupProps = headerGroup.getHeaderGroupProps({
                className: 'iui-row',
            });
            return (react_1.default.createElement("div", __assign({}, headerGroupProps, { key: headerGroupProps.key }), headerGroup.headers.map(function (column) {
                var columnProps = column.getHeaderProps(__assign(__assign({}, column.getSortByToggleProps()), { className: classnames_1.default('iui-cell', { 'iui-actionable': column.canSort }, { 'iui-sorted': column.isSorted }, column.columnClassName), style: __assign({}, utils_1.getCellStyle(column)) }));
                return (react_1.default.createElement("div", __assign({}, columnProps, { key: columnProps.key, title: undefined }),
                    column.render('Header'),
                    !isLoading && data.length != 0 && (react_1.default.createElement(filters_1.FilterToggle, { column: column, ownerDocument: ownerDocument })),
                    !isLoading && data.length != 0 && column.canSort && (react_1.default.createElement("div", { className: 'iui-cell-end-icon' }, column.isSorted && column.isSortedDesc ? (react_1.default.createElement(SortUp_1.default, { className: 'iui-icon iui-sort', "aria-hidden": true })) : (react_1.default.createElement(SortDown_1.default, { className: 'iui-icon iui-sort', "aria-hidden": true }))))));
            })));
        })),
        react_1.default.createElement("div", __assign({}, getTableBodyProps({ className: 'iui-table-body' })),
            data.length !== 0 &&
                rows.map(function (row) {
                    prepareRow(row);
                    return (react_1.default.createElement(TableRowMemoized_1.TableRowMemoized, { row: row, rowProps: rowProps, isLast: row.index === data.length - 1, onRowInViewport: onRowInViewportRef, onBottomReached: onBottomReachedRef, intersectionMargin: intersectionMargin, state: state, key: row.getRowProps().key, onClick: onRowClickHandler, subComponent: subComponent, isDisabled: !!(isRowDisabled === null || isRowDisabled === void 0 ? void 0 : isRowDisabled(row.original)) }));
                }),
            isLoading && data.length === 0 && (react_1.default.createElement("div", { className: 'iui-table-empty' },
                react_1.default.createElement(ProgressIndicators_1.ProgressRadial, { indeterminate: true }))),
            isLoading && data.length !== 0 && (react_1.default.createElement("div", { className: 'iui-row' },
                react_1.default.createElement("div", { className: 'iui-cell', style: { justifyContent: 'center' } },
                    react_1.default.createElement(ProgressIndicators_1.ProgressRadial, { indeterminate: true, size: 'small', style: { float: 'none', marginLeft: 0 } })))),
            !isLoading && data.length === 0 && !areFiltersSet && (react_1.default.createElement("div", { className: 'iui-table-empty' }, emptyTableContent)),
            !isLoading &&
                (data.length === 0 || filteredFlatRows.length === 0) &&
                areFiltersSet && (react_1.default.createElement("div", { className: 'iui-table-empty' }, emptyFilteredTableContent)))));
};
exports.Table = Table;
exports.default = exports.Table;
