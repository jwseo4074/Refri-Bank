import React from 'react';
import '@itwin/itwinui-css/css/tile.css';
import { CommonProps } from '../utils/props';
export declare type TileProps = {
    /**
     * Name or title of the tile.
     */
    name: React.ReactNode;
    /**
     * Description text of the tile.
     * Gets truncated if it can't fit in the tile.
     */
    description?: React.ReactNode;
    /**
     * Metadata section located below description.
     * @example
     * <Tile
     *  // ...
     *  metadata='basic metadata'
     *  // or
     *  metadata={<span><SvgClock /> 2021-01-01, 04:30 AM</span>}
     *  // or
     *  metadata={<>
     *    <SvgTag2 />
     *    <TagContainer><Tag variant='basic'>Tag 1</Tag><Tag variant='basic'>Tag 2</Tag></TagContainer>
     *  </>}
     * />
     */
    metadata?: React.ReactNode;
    /**
     * Thumbnail image url, a custom component or an svg.
     * @example
     * <Tile
     *  // ...
     *  thumbnail='/url/to/image.jpg'
     *  // or
     *  thumbnail={<UserIcon image={<img src='icon.png' />} />}
     *  // or
     *  thumbnail={<SvgImodelHollow />}
     * />
     */
    thumbnail: string | React.ReactNode;
    /**
     * `Badge` shown on the bottom right of thumbnail.
     */
    badge?: React.ReactNode;
    /**
     * Icon shown on top left of the tile. Also known as "type indicator".
     * Recommended to use an invisible `IconButton`.
     */
    leftIcon?: React.ReactNode;
    /**
     * Icon shown on top right of the tile. Also known as "quick action".
     * Recommended to use an invisible `IconButton`.
     */
    rightIcon?: React.ReactNode;
    /**
     * Upto two buttons shown at the bottom of the tile.
     */
    buttons?: [React.ReactNode?, React.ReactNode?];
    /**
     * Dropdown menu containing `MenuItem`s.
     */
    moreOptions?: React.ReactNode[];
    /**
     * Whether the tile is selected or in "active" state.
     * Gets highlighted and shows a checkmark icon near tile name.
     */
    isSelected?: boolean;
    /**
     * Whether the tile is "new". Tile name becomes bold and gets a new status icon.
     */
    isNew?: boolean;
    /**
     * Default tile variant or the folder layout.
     * @default 'default'
     */
    variant?: 'default' | 'folder';
    /**
     * Any custom nodes that will be appended to the tile's main content.
     */
    children?: React.ReactNode;
} & Omit<CommonProps, 'title'>;
/**
 * Tile component that displays content and actions in a card-like format.
 * @example
 * <Tile
 *  name='Tile name'
 *  description='Tile description that takes upto 3 lines'
 *  metadata={<TagContainer><Tag variant='basic'>Tag 1</Tag></TagContainer>}
 *  thumbnail='/url/to/image.jpg'
 *  badge={<Badge backgroundColor='blue'>Badge label</Badge>}
 *  buttons={[<Button>Button 1</Button>, <Button>Button 2</Button>]}
 *  moreOptions={[<MenuItem>Item 1</MenuItem>, <MenuItem>Item 2</MenuItem>]}
 *  leftIcon={<IconButton><SvgInfo /></IconButton>}
 *  rightIcon={<IconButton><SvgStar /></IconButton>}
 *  isSelected={true}
 *  isNew={false}
 * />
 */
export declare const Tile: (props: TileProps) => JSX.Element;
export default Tile;
