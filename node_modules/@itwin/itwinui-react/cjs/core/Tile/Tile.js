"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tile = void 0;
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
var react_1 = __importDefault(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var Checkmark_1 = __importDefault(require("@itwin/itwinui-icons-react/cjs/icons/Checkmark"));
var More_1 = __importDefault(require("@itwin/itwinui-icons-react/cjs/icons/More"));
var New_1 = __importDefault(require("@itwin/itwinui-icons-react/cjs/icons/New"));
var utils_1 = require("../utils");
require("@itwin/itwinui-css/css/tile.css");
var DropdownMenu_1 = require("../DropdownMenu");
var Buttons_1 = require("../Buttons");
/**
 * Tile component that displays content and actions in a card-like format.
 * @example
 * <Tile
 *  name='Tile name'
 *  description='Tile description that takes upto 3 lines'
 *  metadata={<TagContainer><Tag variant='basic'>Tag 1</Tag></TagContainer>}
 *  thumbnail='/url/to/image.jpg'
 *  badge={<Badge backgroundColor='blue'>Badge label</Badge>}
 *  buttons={[<Button>Button 1</Button>, <Button>Button 2</Button>]}
 *  moreOptions={[<MenuItem>Item 1</MenuItem>, <MenuItem>Item 2</MenuItem>]}
 *  leftIcon={<IconButton><SvgInfo /></IconButton>}
 *  rightIcon={<IconButton><SvgStar /></IconButton>}
 *  isSelected={true}
 *  isNew={false}
 * />
 */
var Tile = function (props) {
    var className = props.className, name = props.name, description = props.description, metadata = props.metadata, thumbnail = props.thumbnail, buttons = props.buttons, leftIcon = props.leftIcon, rightIcon = props.rightIcon, badge = props.badge, isNew = props.isNew, isSelected = props.isSelected, moreOptions = props.moreOptions, _a = props.variant, variant = _a === void 0 ? 'default' : _a, children = props.children, isActionable = props.isActionable, rest = __rest(props, ["className", "name", "description", "metadata", "thumbnail", "buttons", "leftIcon", "rightIcon", "badge", "isNew", "isSelected", "moreOptions", "variant", "children", "isActionable"]);
    (0, utils_1.useTheme)();
    var _b = react_1.default.useState(false), isMenuVisible = _b[0], setIsMenuVisible = _b[1];
    var showMenu = react_1.default.useCallback(function () { return setIsMenuVisible(true); }, []);
    var hideMenu = react_1.default.useCallback(function () { return setIsMenuVisible(false); }, []);
    return (react_1.default.createElement("div", __assign({ className: (0, classnames_1.default)('iui-tile', {
            'iui-folder': variant === 'folder',
            'iui-new': isNew,
            'iui-selected': isSelected,
            'iui-actionable': isActionable,
        }, className), tabIndex: isActionable ? 0 : undefined }, rest),
        thumbnail && (react_1.default.createElement("div", { className: 'iui-tile-thumbnail' },
            typeof thumbnail === 'string' ? (react_1.default.createElement("div", { className: 'iui-tile-thumbnail-picture', style: { backgroundImage: "url(".concat(thumbnail, ")") } })) : thumbnail && thumbnail.type === 'img' ? (react_1.default.cloneElement(thumbnail, {
                className: 'iui-tile-thumbnail-picture',
            })) : react_1.default.isValidElement(thumbnail) ? (react_1.default.cloneElement(thumbnail, {
                className: (0, classnames_1.default)('iui-thumbnail-icon', thumbnail.props.className),
            })) : (thumbnail),
            leftIcon &&
                react_1.default.cloneElement(leftIcon, {
                    className: 'iui-small iui-tile-thumbnail-type-indicator',
                }),
            rightIcon &&
                react_1.default.cloneElement(rightIcon, {
                    className: 'iui-small iui-tile-thumbnail-quick-action',
                }),
            badge && (react_1.default.createElement("div", { className: 'iui-tile-thumbnail-badge-container' }, badge)))),
        react_1.default.createElement("div", { className: 'iui-tile-content' },
            react_1.default.createElement("div", { className: 'iui-tile-name' },
                isSelected && (react_1.default.createElement(Checkmark_1.default, { className: (0, classnames_1.default)('iui-tile-status-icon', 'iui-informational'), "aria-hidden": true })),
                isNew && (react_1.default.createElement(New_1.default, { className: (0, classnames_1.default)('iui-tile-status-icon', 'iui-positive'), "aria-hidden": true })),
                react_1.default.createElement("span", { className: 'iui-tile-name-label' }, name)),
            description != undefined && (react_1.default.createElement("div", { className: 'iui-tile-description' }, description)),
            metadata != undefined && (react_1.default.createElement("div", { className: 'iui-tile-metadata' }, metadata)),
            moreOptions && (react_1.default.createElement(DropdownMenu_1.DropdownMenu, { onShow: showMenu, onHide: hideMenu, menuItems: function (close) {
                    return moreOptions.map(function (option) {
                        return react_1.default.cloneElement(option, {
                            onClick: function (value) {
                                var _a, _b;
                                close();
                                (_b = (_a = option.props).onClick) === null || _b === void 0 ? void 0 : _b.call(_a, value);
                            },
                        });
                    });
                } },
                react_1.default.createElement("div", { className: (0, classnames_1.default)('iui-tile-more-options', {
                        'iui-visible': isMenuVisible,
                    }) },
                    react_1.default.createElement(Buttons_1.IconButton, { styleType: 'borderless', size: 'small', "aria-label": 'More options' },
                        react_1.default.createElement(More_1.default, null))))),
            children),
        buttons && react_1.default.createElement("div", { className: 'iui-tile-buttons' }, buttons)));
};
exports.Tile = Tile;
exports.default = exports.Tile;
