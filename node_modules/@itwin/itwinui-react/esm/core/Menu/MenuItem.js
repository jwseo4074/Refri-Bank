var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import React from 'react';
import cx from 'classnames';
import { useTheme, Popover, useMergedRefs } from '../utils';
import '@itwin/itwinui-css/css/menu.css';
import SvgCaretRightSmall from '@itwin/itwinui-icons-react/cjs/icons/CaretRightSmall';
import { Menu } from './Menu';
/**
 * Context used to provide menu item ref to sub-menu items.
 */
var MenuItemContext = React.createContext({ ref: undefined });
/**
 * Basic menu item component. Should be used inside `Menu` component for each item.
 */
export var MenuItem = React.forwardRef(function (props, ref) {
    var children = props.children, isSelected = props.isSelected, disabled = props.disabled, value = props.value, onClick = props.onClick, sublabel = props.sublabel, _a = props.size, size = _a === void 0 ? !!sublabel ? 'large' : 'default' : _a, icon = props.icon, badge = props.badge, className = props.className, style = props.style, _b = props.role, role = _b === void 0 ? 'menuitem' : _b, _c = props.subMenuItems, subMenuItems = _c === void 0 ? [] : _c, rest = __rest(props, ["children", "isSelected", "disabled", "value", "onClick", "sublabel", "size", "icon", "badge", "className", "style", "role", "subMenuItems"]);
    useTheme();
    var menuItemRef = React.useRef(null);
    var refs = useMergedRefs(menuItemRef, ref);
    var parentMenuItemRef = React.useContext(MenuItemContext).ref;
    var subMenuRef = React.useRef(null);
    var _d = React.useState(false), isSubmenuVisible = _d[0], setIsSubmenuVisible = _d[1];
    var onKeyDown = function (event) {
        var _a;
        if (event.altKey) {
            return;
        }
        switch (event.key) {
            case 'Enter':
            case ' ':
            case 'Spacebar': {
                !disabled && (onClick === null || onClick === void 0 ? void 0 : onClick(value));
                event.preventDefault();
                break;
            }
            case 'ArrowRight': {
                if (subMenuItems.length > 0) {
                    setIsSubmenuVisible(true);
                    event.preventDefault();
                    event.stopPropagation();
                }
                break;
            }
            case 'ArrowLeft': {
                (_a = parentMenuItemRef === null || parentMenuItemRef === void 0 ? void 0 : parentMenuItemRef.current) === null || _a === void 0 ? void 0 : _a.focus();
                event.stopPropagation();
                event.preventDefault();
                break;
            }
            default:
                break;
        }
    };
    var listItem = (React.createElement("li", __assign({ className: cx('iui-menu-item', {
            'iui-large': size === 'large',
            'iui-active': isSelected,
            'iui-disabled': disabled,
        }, className), onClick: function () { return !disabled && (onClick === null || onClick === void 0 ? void 0 : onClick(value)); }, ref: refs, style: style, role: role, tabIndex: disabled || role === 'presentation' ? undefined : -1, "aria-selected": isSelected, "aria-haspopup": subMenuItems.length > 0, "aria-disabled": disabled, onKeyDown: onKeyDown, onMouseEnter: function () { return setIsSubmenuVisible(true); }, onMouseLeave: function (e) {
            var _a;
            if (!(e.relatedTarget instanceof Node) ||
                !((_a = subMenuRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget))) {
                setIsSubmenuVisible(false);
            }
        } }, rest),
        icon &&
            React.cloneElement(icon, {
                className: cx(icon.props.className, 'iui-icon'),
            }),
        React.createElement("span", { className: 'iui-content' },
            React.createElement("div", { className: 'iui-menu-label' }, children),
            sublabel && React.createElement("div", { className: 'iui-menu-description' }, sublabel)),
        !badge && subMenuItems.length > 0 && (React.createElement(SvgCaretRightSmall, { className: 'iui-icon' })),
        badge &&
            React.cloneElement(badge, {
                className: cx(badge.props.className, 'iui-icon'),
            })));
    return subMenuItems.length === 0 ? (listItem) : (React.createElement(MenuItemContext.Provider, { value: { ref: menuItemRef } },
        React.createElement(Popover, { placement: 'right-start', visible: isSubmenuVisible, appendTo: 'parent', content: React.createElement("div", { onMouseLeave: function () { return setIsSubmenuVisible(false); }, onBlur: function (e) {
                    var _a, _b;
                    !!(e.relatedTarget instanceof Node) &&
                        !((_a = subMenuRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) &&
                        !((_b = subMenuRef.current) === null || _b === void 0 ? void 0 : _b.isEqualNode(e.relatedTarget)) &&
                        setIsSubmenuVisible(false);
                } },
                React.createElement(Menu, { ref: subMenuRef }, subMenuItems)) }, listItem)));
});
export default MenuItem;
