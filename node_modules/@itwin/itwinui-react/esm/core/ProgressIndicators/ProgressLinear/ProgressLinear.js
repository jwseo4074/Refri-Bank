var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import React from 'react';
import cx from 'classnames';
import { useTheme } from '../../utils';
import '@itwin/itwinui-css/css/progress-indicator.css';
/**
 * Shows progress on a linear bar
 * @example
 * Determinate
 * <ProgressLinear value={25}/>
 * Indeterminate
 * <ProgressLinear indeterminate={true}/>
 * Labeled - Center
 * <ProgressLinear value={50} labels={['Centered Label']} />
 * Labeled - Left & Right
 * <ProgressLinear value={50} labels={['Loading...', '50%']} />
 * Positive / Negative.
 * <ProgressLinear status='positive' labels={['Upload done!', <SvgStatusSuccessHollow />]} />
 * <ProgressLinear status='negative' />
 */
export var ProgressLinear = function (props) {
    var _a;
    var _b = props.value, value = _b === void 0 ? 0 : _b, _c = props.indeterminate, indeterminate = _c === void 0 ? false : _c, _d = props.labels, labels = _d === void 0 ? [] : _d, _e = props.isAnimated, isAnimated = _e === void 0 ? false : _e, status = props.status, className = props.className, style = props.style, rest = __rest(props, ["value", "indeterminate", "labels", "isAnimated", "status", "className", "style"]);
    useTheme();
    var boundedValue = Math.min(100, Math.max(0, value));
    return (React.createElement("div", __assign({ className: cx('iui-progress-indicator-linear', (_a = {},
            _a["iui-".concat(status)] = !!status,
            _a), className), style: style }, rest),
        React.createElement("div", { className: 'iui-track' },
            React.createElement("div", { className: cx('iui-fill', {
                    'iui-determinate': !indeterminate && isAnimated,
                    'iui-indeterminate': indeterminate,
                }), style: { width: indeterminate ? '100%' : "".concat(boundedValue, "%") } })),
        labels.length > 0 && (React.createElement("div", { className: 'iui-label' }, labels.map(function (label, index) { return (React.createElement("span", { key: index }, label)); })))));
};
export default ProgressLinear;
