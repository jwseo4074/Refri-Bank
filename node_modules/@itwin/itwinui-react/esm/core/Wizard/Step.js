var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import cx from 'classnames';
import React from 'react';
import { Tooltip } from '../Tooltip';
export var Step = function (props) {
    var title = props.title, index = props.index, currentStepNumber = props.currentStepNumber, totalSteps = props.totalSteps, type = props.type, onClick = props.onClick, description = props.description, className = props.className, style = props.style, rest = __rest(props, ["title", "index", "currentStepNumber", "totalSteps", "type", "onClick", "description", "className", "style"]);
    var isPast = type !== 'workflow' && currentStepNumber > index;
    var isActive = type !== 'workflow' && currentStepNumber === index;
    var isClickable = type !== 'workflow' && isPast && !!onClick;
    var onCompletedClick = function () {
        if (isClickable) {
            onClick === null || onClick === void 0 ? void 0 : onClick(index);
        }
    };
    var onKeyDown = function (e) {
        if (!isClickable) {
            return;
        }
        if (e.key === 'Enter' || e.key === 'Space' || e.key === ' ') {
            onCompletedClick();
        }
    };
    var stepShape = (React.createElement("li", __assign({ className: cx('iui-wizard-step', {
            'iui-current': isActive,
            'iui-clickable': isClickable,
        }, className), style: __assign({ width: type === 'default' ? "".concat(100 / totalSteps, "%") : undefined }, style), onClick: onCompletedClick, onKeyDown: onKeyDown, "aria-current": isActive ? 'step' : undefined, tabIndex: isClickable ? 0 : undefined }, rest),
        React.createElement("div", { className: 'iui-wizard-track-content' },
            React.createElement("span", { className: 'iui-wizard-circle' }, type === 'workflow' ? title : index + 1)),
        type === 'default' && (React.createElement("span", { className: 'iui-wizard-step-name' }, title))));
    return description ? (React.createElement(Tooltip, { content: description }, stepShape)) : (stepShape);
};
