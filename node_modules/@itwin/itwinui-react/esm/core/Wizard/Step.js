var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import cx from 'classnames';
import React from 'react';
import { Tooltip } from '../Tooltip';
export var Step = function (props) {
    var title = props.title, index = props.index, currentStepNumber = props.currentStepNumber, totalSteps = props.totalSteps, type = props.type, onClick = props.onClick, description = props.description, className = props.className, style = props.style, rest = __rest(props, ["title", "index", "currentStepNumber", "totalSteps", "type", "onClick", "description", "className", "style"]);
    var isLast = totalSteps === index + 1;
    var isPast = currentStepNumber > index;
    var isActive = currentStepNumber === index;
    var onCompletedClick = function () {
        if (isPast && !!onClick) {
            onClick(index);
        }
    };
    var stepShape = (React.createElement("span", __assign({ className: cx('iui-wizards-step', {
            'iui-wizards-step-completed': isPast,
            'iui-wizards-step-current': isActive,
            'iui-clickable': !!onClick && isPast,
        }, className), style: __assign({ width: type === 'default' ? 100 / totalSteps + "%" : undefined }, style), onClick: onCompletedClick }, rest),
        index !== 0 && type === 'default' && (React.createElement("span", { className: cx('iui-wizards-step-track', 'iui-wizards-step-track-before') })),
        type !== 'workflow' && (React.createElement("span", { className: 'iui-wizards-step-title' }, title)),
        !isLast && type === 'default' && (React.createElement("span", { className: cx('iui-wizards-step-track', 'iui-wizards-step-track-after') })),
        React.createElement("span", { className: 'iui-wizards-step-circle' }, type === 'workflow' ? title : index + 1)));
    return (React.createElement(React.Fragment, null,
        description ? (React.createElement(Tooltip, { content: description }, stepShape)) : (stepShape),
        !isLast && (React.createElement("span", { className: cx('iui-wizards-step-track', 'iui-wizards-step-track-main', {
                'iui-wizards-step-track-filled': type !== 'workflow' && isPast,
            }) }))));
};
