var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import cx from 'classnames';
import React from 'react';
import { useTheme } from '../utils/hooks/useTheme';
import '@itwin/itwinui-css/css/wizard.css';
import { Step } from './Step';
var defaultWizardLocalization = {
    stepsCountLabel: function (currentStep, totalSteps) {
        return "Step " + currentStep + " of " + totalSteps + ":";
    },
};
/**
 * A Wizard.
 * Give it some steps.
 * Tell it what step to display.
 * Set the type if you'd like.
 * That's about it.
 * @example
 * <Wizard
 *  steps=[{name: "Step One"}, {name: "Step Two"}, {name: "Step Three"}]
 *  currentStep={0}
 *  type='long'
 *  />
 */
export var Wizard = function (props) {
    var currentStep = props.currentStep, steps = props.steps, _a = props.type, type = _a === void 0 ? 'default' : _a, _b = props.localization, localization = _b === void 0 ? defaultWizardLocalization : _b, onStepClick = props.onStepClick, rest = __rest(props, ["currentStep", "steps", "type", "localization", "onStepClick"]);
    var boundedCurrentStep = Math.min(Math.max(0, currentStep), steps.length - 1);
    useTheme();
    return (React.createElement(React.Fragment, null,
        React.createElement("div", __assign({ className: cx({
                'iui-wizards': type === 'default',
                'iui-wizards-long': type === 'long',
                'iui-wizards-workflow': type === 'workflow',
            }) }, rest),
            React.createElement("div", { className: 'iui-wizards-wrapper' }, steps.map(function (s, index) { return (React.createElement(Step, { key: index, index: index, title: type === 'long' ? '' : s.name, currentStepNumber: boundedCurrentStep, totalSteps: steps.length, type: type, onClick: onStepClick, description: s.description })); })),
            type === 'long' && (React.createElement("p", { className: 'iui-wizards-steps' },
                React.createElement("span", { className: 'iui-wizards-steps-count' }, localization.stepsCountLabel(boundedCurrentStep + 1, steps.length)),
                steps[boundedCurrentStep].name)))));
};
export default Wizard;
