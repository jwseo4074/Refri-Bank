var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import cx from 'classnames';
import React from 'react';
import { useMergedRefs, useTheme } from '../utils';
import '@itwin/itwinui-css/css/radio-tile.css';
/**
 * RadioTile component to be used in RadioTileGroup component
 * @example
 * <RadioTile label='My tile' description='Some info' icon={<SvgSmileyHappy />} />
 */
export var RadioTile = React.forwardRef(function (props, ref) {
    var icon = props.icon, label = props.label, description = props.description, _a = props.setFocus, setFocus = _a === void 0 ? false : _a, className = props.className, style = props.style, rest = __rest(props, ["icon", "label", "description", "setFocus", "className", "style"]);
    useTheme();
    var inputElementRef = React.useRef(null);
    var refs = useMergedRefs(inputElementRef, ref);
    React.useEffect(function () {
        if (inputElementRef.current && setFocus) {
            inputElementRef.current.focus();
        }
    }, [setFocus]);
    return (React.createElement("label", { className: cx('iui-radio-tile', className), style: style },
        React.createElement("input", __assign({ className: 'iui-radio-tile-input', type: 'radio', ref: refs }, rest)),
        React.createElement("div", { className: 'iui-radio-tile-content' },
            icon &&
                React.cloneElement(icon, {
                    className: cx('iui-radio-tile-icon', icon.props.className),
                }),
            label && React.createElement("div", { className: 'iui-radio-tile-label' }, label),
            description && (React.createElement("div", { className: 'iui-radio-tile-sublabel' }, description)))));
});
export default RadioTile;
