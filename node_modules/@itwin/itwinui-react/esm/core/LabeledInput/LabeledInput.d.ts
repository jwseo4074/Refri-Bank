import React from 'react';
import { InputProps } from '../Input/Input';
import '@itwin/itwinui-css/css/inputs.css';
export declare type LabeledInputProps = {
    /**
     * Label of the input.
     */
    label?: React.ReactNode;
    /**
     * Message below the input. Does not apply to 'inline' input.
     */
    message?: React.ReactNode;
    /**
     * Status of the input.
     */
    status?: 'positive' | 'warning' | 'negative';
    /**
     * Custom svg icon. Will override status icon if specified.
     */
    svgIcon?: JSX.Element;
    /**
     * Custom CSS class name for the input element.
     */
    inputClassName?: string;
    /**
     * Custom CSS Style for the input element.
     */
    inputStyle?: React.CSSProperties;
    /**
     * Set display style of label.
     * Supported values:
     * - 'default' - label appears above input.
     * - 'inline' - appears in the same line as input.
     * @default 'default'
     */
    displayStyle?: 'default' | 'inline';
    /**
     * Set display style of icon.
     * Supported values:
     * - 'block' - icon appears below input.
     * - 'inline' - icon appears inside input (at the end).
     *
     * Defaults to 'block' if `displayStyle` is `default`, else 'inline'.
     */
    iconDisplayStyle?: 'block' | 'inline';
} & InputProps;
/**
 * Basic labeled input component
 * @example
 * <LabeledInput label='My label' />
 * <LabeledInput disabled label='My label' />
 * <LabeledInput status='positive' label='Positive' />
 * <LabeledInput status='negative' label='Negative' setFocus />
 */
export declare const LabeledInput: React.ForwardRefExoticComponent<{
    /**
     * Label of the input.
     */
    label?: React.ReactNode;
    /**
     * Message below the input. Does not apply to 'inline' input.
     */
    message?: React.ReactNode;
    /**
     * Status of the input.
     */
    status?: "positive" | "warning" | "negative" | undefined;
    /**
     * Custom svg icon. Will override status icon if specified.
     */
    svgIcon?: JSX.Element | undefined;
    /**
     * Custom CSS class name for the input element.
     */
    inputClassName?: string | undefined;
    /**
     * Custom CSS Style for the input element.
     */
    inputStyle?: React.CSSProperties | undefined;
    /**
     * Set display style of label.
     * Supported values:
     * - 'default' - label appears above input.
     * - 'inline' - appears in the same line as input.
     * @default 'default'
     */
    displayStyle?: "default" | "inline" | undefined;
    /**
     * Set display style of icon.
     * Supported values:
     * - 'block' - icon appears below input.
     * - 'inline' - icon appears inside input (at the end).
     *
     * Defaults to 'block' if `displayStyle` is `default`, else 'inline'.
     */
    iconDisplayStyle?: "block" | "inline" | undefined;
} & {
    setFocus?: boolean | undefined;
    size?: "small" | "large" | undefined;
} & Omit<React.InputHTMLAttributes<HTMLInputElement>, "size"> & React.RefAttributes<HTMLInputElement>>;
export default LabeledInput;
