var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import React from 'react';
import { DateRangeFilter, } from './DateRangeFilter/DateRangeFilter';
import { NumberRangeFilter, } from './NumberRangeFilter/NumberRangeFilter';
import { TextFilter } from './TextFilter/TextFilter';
export var tableFilters = {
    /**
     * Basic filter with a single input field.
     * @param translatedLabels Translated filter labels.
     */
    TextFilter: function (translatedLabels) { return function (props) { return React.createElement(TextFilter, __assign({}, props, { translatedLabels: translatedLabels })); }; },
    /**
     * Date range filter.
     *
     * By default it handles user input in `en-us` date format. If you want to use other format
     * please provide `formatDate`, `parseInput` and `placeholder`.
     *
     * It only works with `Date` type object properties.
     * If your data is different type e.g. `string`, you can use `accessor` property in column description:
     * `accessor: (rowData) => new Date(rowData.date)`.
     */
    DateRangeFilter: function (options) { return function (props) { return React.createElement(DateRangeFilter, __assign({}, props, options)); }; },
    /**
     * Number range filter.
     *
     * It only works with `number` type object properties.
     * If your data is different type e.g. `string`, you can use `accessor` property in column description:
     * `accessor: (rowData) => Number(rowData.numberProp)`.
     * @param translatedLabels Translated filter labels.
     */
    NumberRangeFilter: function (translatedLabels) { return function (props) { return React.createElement(NumberRangeFilter, __assign({}, props, { translatedLabels: translatedLabels })); }; },
};
