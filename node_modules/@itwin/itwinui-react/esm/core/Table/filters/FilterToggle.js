var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import SvgFilterHollow from '@itwin/itwinui-icons-react/cjs/icons/FilterHollow';
import SvgFilter from '@itwin/itwinui-icons-react/cjs/icons/Filter';
import React from 'react';
import cx from 'classnames';
import '@itwin/itwinui-css/css/table.css';
import { useTheme, Popover, getDocument } from '../../utils';
import { IconButton } from '../../Buttons';
/**
 * Handles showing filter icon and opening filter component.
 */
export var FilterToggle = function (props) {
    var column = props.column, _a = props.ownerDocument, ownerDocument = _a === void 0 ? getDocument() : _a, className = props.className, rest = __rest(props, ["column", "ownerDocument", "className"]);
    useTheme();
    var _b = React.useState(false), isVisible = _b[0], setIsVisible = _b[1];
    var close = React.useCallback(function () { return setIsVisible(false); }, []);
    var setFilter = React.useCallback(function (filterValue) {
        column.setFilter(filterValue);
        close();
    }, [close, column]);
    var clearFilter = React.useCallback(function () {
        column.setFilter(undefined);
        close();
    }, [close, column]);
    var isColumnFiltered = column.filterValue != null && column.filterValue !== '';
    return (React.createElement(React.Fragment, null, column.canFilter && column.Filter && (React.createElement(Popover, { content: column.render('Filter', { close: close, setFilter: setFilter, clearFilter: clearFilter }), placement: 'bottom-start', visible: isVisible, onClickOutside: close, appendTo: ownerDocument === null || ownerDocument === void 0 ? void 0 : ownerDocument.body },
        React.createElement(IconButton, __assign({ styleType: 'borderless', isActive: isVisible || isColumnFiltered, className: cx('iui-filter-button', className), onClick: function (e) {
                setIsVisible(function (v) { return !v; });
                // Prevents from triggering sort
                e.stopPropagation();
            } }, rest), isColumnFiltered ? React.createElement(SvgFilter, null) : React.createElement(SvgFilterHollow, null))))));
};
