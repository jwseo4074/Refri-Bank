var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import React from 'react';
import ReactDOM from 'react-dom';
import { getContainer } from '../utils/common';
import { ToastWrapper } from './ToastWrapper';
var TOASTS_CONTAINER_ID = 'iui-toasts-container';
var Toaster = /** @class */ (function () {
    function Toaster() {
        this.toasts = [];
        this.lastId = 0;
    }
    Toaster.prototype.positive = function (content, settings) {
        this.createToast(content, 'positive', settings);
    };
    Toaster.prototype.informational = function (content, settings) {
        this.createToast(content, 'informational', settings);
    };
    Toaster.prototype.negative = function (content, settings) {
        this.createToast(content, 'negative', settings);
    };
    Toaster.prototype.warning = function (content, settings) {
        this.createToast(content, 'warning', settings);
    };
    Toaster.prototype.createToast = function (content, category, settings) {
        var _this = this;
        ++this.lastId;
        var currentId = this.lastId;
        this.toasts = __spreadArray([
            __assign(__assign({}, settings), { content: content,
                category: category, onRemove: function () {
                    var _a;
                    _this.removeToast(currentId);
                    (_a = settings === null || settings === void 0 ? void 0 : settings.onRemove) === null || _a === void 0 ? void 0 : _a.call(settings);
                }, id: currentId, isVisible: true })
        ], this.toasts);
        this.updateView();
    };
    Toaster.prototype.removeToast = function (id) {
        this.toasts = this.toasts.filter(function (toast) { return toast.id !== id; });
        this.updateView();
    };
    Toaster.prototype.updateView = function () {
        var container = getContainer(TOASTS_CONTAINER_ID);
        if (!container) {
            return;
        }
        ReactDOM.render(React.createElement(ToastWrapper, { toasts: this.toasts }), container);
    };
    Toaster.prototype.closeAll = function () {
        this.toasts = this.toasts.map(function (toast) {
            return __assign(__assign({}, toast), { isVisible: false });
        });
        this.updateView();
    };
    return Toaster;
}());
export default Toaster;
