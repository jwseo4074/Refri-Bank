var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import React from 'react';
import { Transition } from 'react-transition-group';
import SvgCloseSmall from '@itwin/itwinui-icons-react/cjs/icons/CloseSmall';
import cx from 'classnames';
import { useTheme } from '../utils/hooks/useTheme';
import '@itwin/itwinui-css/css/toast-notification.css';
import { IconButton } from '../Buttons';
import { getWindow, StatusIconMap } from '../utils/common';
/**
 * Generic Toast Notification Component
 * @example
 * <Toast type='persisting' content='Job processing completed.' category='positive' link={{onClick:() => {alert('Link callback')}, title:'View the report'}} />
 * <Toast type='temporary' content='Processing completed.' category='positive' />
 * <Toast type='temporary' content='26 files are available for synchronization.' category='informational' />
 * <Toast type='persisting' content='Job processing error.' category='negative' />
 */
export var Toast = function (props) {
    var content = props.content, category = props.category, _a = props.type, type = _a === void 0 ? 'temporary' : _a, isVisible = props.isVisible, link = props.link, _b = props.duration, duration = _b === void 0 ? 7000 : _b, hasCloseButton = props.hasCloseButton, onRemove = props.onRemove;
    useTheme();
    var closeTimeout = React.useRef(0);
    var _c = React.useState(isVisible), visible = _c[0], setVisible = _c[1];
    var _d = React.useState(0), height = _d[0], setHeight = _d[1];
    React.useEffect(function () {
        if (type === 'temporary') {
            setCloseTimeout(duration);
        }
        return function () {
            clearCloseTimeout();
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [duration, type]);
    React.useEffect(function () {
        setVisible(isVisible);
    }, [isVisible]);
    var close = function () {
        clearCloseTimeout();
        setVisible(false);
    };
    var setCloseTimeout = function (timeout) {
        var definedWindow = getWindow();
        if (!definedWindow) {
            return;
        }
        closeTimeout.current = definedWindow.setTimeout(function () {
            close();
        }, timeout);
    };
    var clearCloseTimeout = function () {
        var _a;
        (_a = getWindow()) === null || _a === void 0 ? void 0 : _a.clearTimeout(closeTimeout.current);
    };
    var onRef = function (ref) {
        if (ref) {
            var height_1 = ref.getBoundingClientRect().height;
            setHeight(height_1);
        }
    };
    return (React.createElement(Transition, { timeout: { enter: 240, exit: 120 }, in: visible, appear: true, unmountOnExit: true, onExited: onRemove }, function (state) { return (React.createElement("div", { className: cx('iui-toast-all', "iui-toast-" + state), style: {
            height: height,
            marginBottom: visible ? '0' : -height,
        } },
        React.createElement("div", { ref: onRef },
            React.createElement(ToastPresentation, { category: category, content: content, link: link, type: type, hasCloseButton: hasCloseButton, onClose: close })))); }));
};
/**
 * The presentational part of a toast notification, without any animation or logic.
 * @private
 */
export var ToastPresentation = function (props) {
    var content = props.content, category = props.category, _a = props.type, type = _a === void 0 ? 'temporary' : _a, link = props.link, hasCloseButton = props.hasCloseButton, onClose = props.onClose, className = props.className, rest = __rest(props, ["content", "category", "type", "link", "hasCloseButton", "onClose", "className"]);
    var StatusIcon = StatusIconMap[category];
    return (React.createElement("div", __assign({ className: cx("iui-toast iui-" + category, className) }, rest),
        React.createElement("div", { className: 'iui-status-area' }, React.createElement(StatusIcon, { className: 'iui-icon' })),
        React.createElement("div", { className: 'iui-message' }, content),
        link && (React.createElement("a", { className: 'iui-anchor', onClick: link.onClick }, link.title)),
        (type === 'persisting' || hasCloseButton) && (React.createElement(IconButton, { size: 'small', styleType: 'borderless', onClick: onClose, "aria-label": 'Close' },
            React.createElement(SvgCloseSmall, null)))));
};
export default Toast;
