import React from 'react';
import { CommonProps } from '../utils';
import '@itwin/itwinui-css/css/toast-notification.css';
export declare type ToastCategory = 'informational' | 'negative' | 'positive' | 'warning';
export declare type ToastProps = {
    /**
     * Internal id of the toast. Used for closing the toasts.
     */
    id: number;
    /**
     * Content of the Toast message
     */
    content: React.ReactNode;
    /**
     * Category of the Toast, which controls the border color, as well as the category icon.
     */
    category: ToastCategory;
    /**
     * The Type of the Toast.
     * Persisting Toasts will not be closed automatically, and will contain a close button.
     * Temporary Toasts will automatically close after 7 seconds and will not contain a close button.
     * @default 'temporary'
     */
    type?: 'persisting' | 'temporary';
    /**
     * Boolean indicating when the toast is visible.
     * When false, will close the Toast and call onRemove when finished closing.
     */
    isVisible: boolean;
    /**
     * Duration of the toast in millisecond.
     * @default 7000
     */
    duration?: number;
    /**
     * Boolean indicating when the close button is visible.
     * When false, the toast will not have any close button.
     */
    hasCloseButton?: boolean;
    /**
     * A Callback that can be used to add additional information to a Toast
     */
    link?: {
        onClick: () => void;
        title: string;
    };
    /**
     * Function called when the toast is all the way closed.
     */
    onRemove?: () => void;
    /**
     * Element to which the toast will animate out to.
     */
    animateOutTo?: HTMLElement | null;
    /**
     * Parent toaster placement position for smoother animation.
     */
    placementPosition?: 'top' | 'bottom';
};
/**
 * Generic Toast Notification Component
 * @example
 * <Toast type='persisting' content='Job processing completed.' category='positive' link={{onClick:() => {alert('Link callback')}, title:'View the report'}} />
 * <Toast type='temporary' content='Processing completed.' category='positive' />
 * <Toast type='temporary' content='26 files are available for synchronization.' category='informational' />
 * <Toast type='persisting' content='Job processing error.' category='negative' />
 */
export declare const Toast: (props: ToastProps) => JSX.Element;
export declare type ToastPresentationProps = Omit<ToastProps, 'duration' | 'id' | 'isVisible' | 'onRemove'> & {
    onClose?: () => void;
} & CommonProps;
/**
 * The presentational part of a toast notification, without any animation or logic.
 * @private
 */
export declare const ToastPresentation: (props: ToastPresentationProps) => JSX.Element;
export default Toast;
