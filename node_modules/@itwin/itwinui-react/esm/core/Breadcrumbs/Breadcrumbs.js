var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import React from 'react';
import cx from 'classnames';
import { useTheme } from '../utils/hooks/useTheme';
import SvgChevronRight from '@itwin/itwinui-icons-react/cjs/icons/ChevronRight';
import '@itwin/itwinui-css/css/breadcrumbs.css';
import { useResizeObserver } from '../utils/hooks/useResizeObserver';
import { useMergedRefs } from '../utils/hooks/useMergedRefs';
/**
 * A breadcrumb trail is used as a navigational aid to help users keep track
 * of their place in the application. It is often placed before a page's main content.
 *
 * Breadcrumb items can use `Button` or `a` or any custom component (passed as `children`).
 *
 * For accessibility, make sure to provide an aria-label describing the type of navigation.
 *
 * @example
 * <Breadcrumbs aria-label='Primary'>
 *   <Button onClick={() => {}}>Root</Button>
 *   <Button onClick={() => {}}>Item 1</Button>
 *   <Button onClick={() => {}}>Item 2</Button>
 * </Breadcrumbs>
 *
 * @example
 * <Breadcrumbs aria-label='Secondary'>
 *   <a href='/'>Root</a>
 *   <a href='/level1/'>Level 1</a>
 *   <span>Current level</span>
 * </Breadcrumbs>
 */
export var Breadcrumbs = React.forwardRef(function (props, ref) {
    var items = props.children, _a = props.currentIndex, currentIndex = _a === void 0 ? items.length - 1 : _a, separator = props.separator, className = props.className, rest = __rest(props, ["children", "currentIndex", "separator", "className"]);
    useTheme();
    var breadcrumbsRef = React.useRef(null);
    var _b = React.useState(items.length), visibleCount = _b[0], setVisibleCount = _b[1];
    var overflowBreakpoints = React.useRef([]);
    React.useLayoutEffect(function () {
        setVisibleCount(items.length);
        overflowBreakpoints.current = [];
    }, [items]);
    var _c = React.useState(0), breadcrumbsWidth = _c[0], setBreadcrumbsWith = _c[1];
    var updateBreadcrumbsWidth = React.useCallback(function (_a) {
        var width = _a.width;
        return setBreadcrumbsWith(width);
    }, []);
    var resizeRef = useResizeObserver(updateBreadcrumbsWidth)[0];
    var refs = useMergedRefs(breadcrumbsRef, resizeRef, ref);
    React.useLayoutEffect(function () {
        if (!breadcrumbsRef.current) {
            return;
        }
        // hide items when there's no space available
        if (breadcrumbsRef.current.offsetWidth <
            breadcrumbsRef.current.scrollWidth &&
            visibleCount > 1) {
            setVisibleCount(function (count) { return count - 1; });
            overflowBreakpoints.current.push(breadcrumbsRef.current.offsetWidth);
        }
        // restore items when there's enough space again
        else if (overflowBreakpoints.current.length > 0 &&
            breadcrumbsRef.current.offsetWidth >
                overflowBreakpoints.current[overflowBreakpoints.current.length - 1]) {
            setVisibleCount(function (count) { return count + 1; });
            overflowBreakpoints.current.pop();
        }
    }, [breadcrumbsWidth, visibleCount]);
    var Separator = function () { return (React.createElement("li", { className: 'iui-breadcrumbs-separator', "aria-hidden": true }, separator !== null && separator !== void 0 ? separator : React.createElement(SvgChevronRight, null))); };
    var ListItem = function (_a) {
        var _b;
        var index = _a.index;
        var item = items[index];
        return (React.createElement("li", { className: cx('iui-breadcrumbs-item', {
                'iui-current': currentIndex === index,
            }) }, React.isValidElement(item)
            ? React.cloneElement(item, {
                'aria-current': ((_b = item.props['aria-current']) !== null && _b !== void 0 ? _b : currentIndex === index)
                    ? 'location'
                    : undefined,
            })
            : item));
    };
    return (React.createElement("nav", __assign({ className: cx('iui-breadcrumbs', className), ref: refs, "aria-label": 'Breadcrumb' }, rest),
        React.createElement("ol", { className: 'iui-breadcrumbs-list' },
            visibleCount > 1 && (React.createElement(React.Fragment, null,
                React.createElement(ListItem, { index: 0 }),
                React.createElement(Separator, null))),
            items.length - visibleCount > 0 && (React.createElement(React.Fragment, null,
                React.createElement("li", { className: 'iui-breadcrumbs-item' },
                    React.createElement("span", { className: 'iui-ellipsis' }, "\u2026")),
                React.createElement(Separator, null))),
            items
                .slice(visibleCount > 1
                ? items.length - visibleCount + 1
                : items.length - 1)
                .map(function (_, _index) {
                var index = visibleCount > 1
                    ? 1 + (items.length - visibleCount) + _index
                    : items.length - 1;
                return (React.createElement(React.Fragment, { key: index },
                    React.createElement(ListItem, { index: index }),
                    index < items.length - 1 && React.createElement(Separator, null)));
            }))));
});
export default Breadcrumbs;
