var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import SvgMoreVertical from '@itwin/itwinui-icons-react/cjs/icons/MoreVertical';
import cx from 'classnames';
import React from 'react';
import { IconButton } from '../Buttons';
import { useTheme } from '../utils';
import '@itwin/itwinui-css/css/header.css';
import { DropdownMenu } from '../DropdownMenu';
var defaultTranslations = {
    moreOptions: 'More options',
};
/**
 * Application header
 * @example
 * <Header
 *  appLogo={<HeaderLogo logo={<SvgImodelHollow />}>iTwin Application</HeaderLogo>}
 *  breadcrumbs={
 *   <HeaderBreadcrumbs items={[
 *    <HeaderButton key='project' name='Project A' />
 *    <HeaderButton key='imodel' name='IModel X' />
 *   ]} />
 *  }
 *  actions={[
 *   <IconButton><SvgNotification /></IconButton>,
 *   <DropdownMenu>
 *    <IconButton>
 *     <SvgHelpCircularHollow />
 *    </IconButton>
 *   </DropdownMenu>
 *  ]}
 *  userIcon={
 *   <DropdownMenu menuItems={...}>
 *    <IconButton styleType='borderless'>
 *     <UserIcon ... />
 *    </IconButton>
 *   </DropdownMenu>
 *  }
 *  isSlim
 * />
 */
export var Header = function (props) {
    var appLogo = props.appLogo, breadcrumbs = props.breadcrumbs, _a = props.isSlim, isSlim = _a === void 0 ? false : _a, actions = props.actions, userIcon = props.userIcon, menuItems = props.menuItems, translatedStrings = props.translatedStrings, className = props.className, children = props.children, rest = __rest(props, ["appLogo", "breadcrumbs", "isSlim", "actions", "userIcon", "menuItems", "translatedStrings", "className", "children"]);
    useTheme();
    var headerTranslations = __assign(__assign({}, defaultTranslations), translatedStrings);
    return (React.createElement("header", __assign({ className: cx('iui-page-header', { 'iui-slim': isSlim }, className) }, rest),
        React.createElement("div", { className: 'iui-left' },
            appLogo,
            breadcrumbs && React.createElement("div", { className: 'iui-divider' }),
            breadcrumbs),
        children && React.createElement("div", { className: 'iui-center' }, children),
        React.createElement("div", { className: 'iui-right' },
            actions,
            userIcon,
            menuItems && (React.createElement(DropdownMenu, { menuItems: menuItems },
                React.createElement(IconButton, { styleType: 'borderless', "aria-label": headerTranslations.moreOptions },
                    React.createElement(SvgMoreVertical, { "aria-hidden": true })))))));
};
export default Header;
