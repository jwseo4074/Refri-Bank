/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cx from 'classnames';
import React from 'react';
import { Button, DropdownButton, SplitButton, } from '../Buttons';
import { useTheme } from '../utils';
import '@itwin/itwinui-css/css/header.css';
var isSplitButton = function (props) {
    return !!props.menuItems && !!props.onClick;
};
var isDropdownButton = function (props) {
    return !!props.menuItems;
};
/**
 * Header button that handles slim state of the `Header` it's in.
 * When in slim mode, will only display the name and reduce icon size.
 * Will display an arrow on the right if `menuItems` prop is provided.
 * @example
 * <HeaderButton name='Project A' description='0n00434' menuItems={...} />
 * <HeaderButton name='Project B' description='0n00434' startIcon={<SvgImodelHollow />} />
 * <HeaderButton name='Project C' startIcon={<img style={{ objectFit: 'cover' }} src='project.png' />} />
 * <HeaderButton name='Project D' isActive />
 */
export var HeaderButton = React.forwardRef(function (props, ref) {
    var name = props.name, description = props.description, _a = props.isActive, isActive = _a === void 0 ? false : _a, className = props.className, startIcon = props.startIcon, menuItems = props.menuItems, rest = __rest(props, ["name", "description", "isActive", "className", "startIcon", "menuItems"]);
    useTheme();
    var buttonProps = __assign(__assign({ startIcon: React.isValidElement(startIcon)
            ? React.cloneElement(startIcon, {
                className: cx('iui-header-button-icon', startIcon.props.className),
            })
            : undefined, styleType: 'borderless', className: cx({
            'iui-header-button': !isSplitButton(props),
            'iui-header-split-button': isSplitButton(props),
            'iui-header-dropdown-button': !isSplitButton(props) && isDropdownButton(props),
            'iui-active': isActive,
        }, className), 'aria-current': isActive ? 'location' : undefined, children: (React.createElement(React.Fragment, null,
            React.createElement("div", null, name),
            description && React.createElement("div", { className: 'iui-description' }, description))), ref: ref }, (!!menuItems && { menuItems: menuItems })), rest);
    if (isSplitButton(buttonProps)) {
        return React.createElement(SplitButton, __assign({}, buttonProps));
    }
    if (isDropdownButton(buttonProps)) {
        return React.createElement(DropdownButton, __assign({}, buttonProps));
    }
    return React.createElement(Button, __assign({}, buttonProps));
});
export default HeaderButton;
