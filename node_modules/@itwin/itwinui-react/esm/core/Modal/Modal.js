var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import React from 'react';
import ReactDOM from 'react-dom';
import cx from 'classnames';
import SvgClose from '@itwin/itwinui-icons-react/cjs/icons/Close';
import { useTheme, getContainer, getDocument, FocusTrap, } from '../utils';
import '@itwin/itwinui-css/css/dialog.css';
import { IconButton } from '../Buttons/IconButton';
import { CSSTransition } from 'react-transition-group';
/**
 * Modal component which can wrap any content.
 * @example
 * <Modal
 *   isOpen={true}
 *   title='My modal'
 *   onClose={onClose}
 * >
 *   <div>
 *     Here is my modal content
 *   </div>
 *   <ModalButtonBar>
 *     <Button styleType='high-visibility'>
 *       Primary button
 *     </Button>
 *     <Button>
 *       Secondary button
 *     </Button>
 *   </ModalButtonBar>
 * </Modal>
 */
export var Modal = function (props) {
    var _a = props.isOpen, isOpen = _a === void 0 ? false : _a, _b = props.isDismissible, isDismissible = _b === void 0 ? true : _b, _c = props.closeOnEsc, closeOnEsc = _c === void 0 ? true : _c, _d = props.closeOnExternalClick, closeOnExternalClick = _d === void 0 ? true : _d, onClose = props.onClose, title = props.title, onKeyDown = props.onKeyDown, id = props.id, className = props.className, style = props.style, children = props.children, _e = props.styleType, styleType = _e === void 0 ? 'default' : _e, _f = props.modalRootId, modalRootId = _f === void 0 ? 'iui-react-portal-container' : _f, _g = props.ownerDocument, ownerDocument = _g === void 0 ? getDocument() : _g, rest = __rest(props, ["isOpen", "isDismissible", "closeOnEsc", "closeOnExternalClick", "onClose", "title", "onKeyDown", "id", "className", "style", "children", "styleType", "modalRootId", "ownerDocument"]);
    useTheme();
    var container = getContainer(modalRootId, ownerDocument);
    var overlayRef = React.useRef(null);
    var originalBodyOverflow = React.useRef('');
    var previousFocusedElement = React.useRef();
    // Give focus to overlay for key handling to work.
    React.useLayoutEffect(function () {
        var _a, _b;
        if (isOpen) {
            previousFocusedElement.current = document.activeElement;
            (_a = overlayRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }
        else {
            (_b = previousFocusedElement.current) === null || _b === void 0 ? void 0 : _b.focus();
        }
        var modalOverlayRef = overlayRef.current;
        return function () {
            var _a;
            (modalOverlayRef === null || modalOverlayRef === void 0 ? void 0 : modalOverlayRef.contains(document.activeElement)) &&
                ((_a = previousFocusedElement.current) === null || _a === void 0 ? void 0 : _a.focus());
        };
    }, [isOpen]);
    React.useEffect(function () {
        if (!ownerDocument) {
            return;
        }
        if (isOpen) {
            originalBodyOverflow.current = ownerDocument.body.style.overflow;
            ownerDocument.body.style.overflow = 'hidden';
        }
        else {
            ownerDocument.body.style.overflow = originalBodyOverflow.current;
        }
        return function () {
            ownerDocument.body.style.overflow = originalBodyOverflow.current;
        };
    }, [isOpen, ownerDocument]);
    var handleKeyDown = function (event) {
        // Prevents React from resetting its properties
        event.persist();
        if (isDismissible && closeOnEsc && event.key === 'Escape' && onClose) {
            onClose(event);
        }
        if (onKeyDown) {
            onKeyDown(event);
        }
    };
    var handleMouseDown = function (event) {
        // Prevents React from resetting its properties
        event.persist();
        if (event.target !== overlayRef.current) {
            return;
        }
        if (isDismissible && closeOnExternalClick && onClose) {
            onClose(event);
        }
    };
    return !!container ? (ReactDOM.createPortal(React.createElement(CSSTransition, { in: isOpen, classNames: 'iui-dialog-animation', timeout: { exit: 600 }, unmountOnExit: true },
        React.createElement(FocusTrap, null,
            React.createElement("div", __assign({ className: cx('iui-dialog-backdrop', { 'iui-dialog-default': styleType === 'default' }, { 'iui-dialog-full-page': styleType === 'fullPage' }, { 'iui-dialog-visible': isOpen }, className), tabIndex: -1, onKeyDown: handleKeyDown, ref: overlayRef, onMouseDown: handleMouseDown }, rest),
                React.createElement("div", { className: 'iui-dialog', id: id, style: style, role: 'dialog', "aria-modal": 'true' },
                    React.createElement("div", { className: 'iui-dialog-title-bar' },
                        React.createElement("div", { className: 'iui-dialog-title' }, title),
                        isDismissible && (React.createElement(IconButton, { size: 'small', styleType: 'borderless', onClick: onClose, "aria-label": 'Close' },
                            React.createElement(SvgClose, null)))),
                    children)))), container)) : (React.createElement(React.Fragment, null));
};
export default Modal;
