var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import Svg401 from '@itwin/itwinui-illustrations-react/cjs/illustrations/401';
import Svg403 from '@itwin/itwinui-illustrations-react/cjs/illustrations/403';
import Svg404 from '@itwin/itwinui-illustrations-react/cjs/illustrations/404';
import Svg500 from '@itwin/itwinui-illustrations-react/cjs/illustrations/500';
import Svg502 from '@itwin/itwinui-illustrations-react/cjs/illustrations/502';
import Svg503 from '@itwin/itwinui-illustrations-react/cjs/illustrations/503';
import SvgError from '@itwin/itwinui-illustrations-react/cjs/illustrations/Error';
import React from 'react';
import { Button } from '../Buttons/Button';
import { useTheme } from '../utils/hooks/useTheme';
import '@itwin/itwinui-css/css/non-ideal-state.css';
/**
 * A stylized display to communicate common http errors.
 * @example
 * <ErrorPage errorType='401' />
 */
export var ErrorPage = function (props) {
    var errorType = props.errorType, errorName = props.errorName, errorMessage = props.errorMessage, primaryButtonHandle = props.primaryButtonHandle, primaryButtonLabel = props.primaryButtonLabel, secondaryButtonHandle = props.secondaryButtonHandle, secondaryButtonLabel = props.secondaryButtonLabel, translatedErrorMessages = props.translatedErrorMessages, rest = __rest(props, ["errorType", "errorName", "errorMessage", "primaryButtonHandle", "primaryButtonLabel", "secondaryButtonHandle", "secondaryButtonLabel", "translatedErrorMessages"]);
    useTheme();
    var defaultErrorMessages = __assign({ badGateway: 'Bad gateway', error: 'Error', forbidden: 'Forbidden', internalServerError: 'Internal server error', pageNotFound: 'Page not found', serviceUnavailable: 'Service unavailable', unauthorized: 'Unauthorized' }, translatedErrorMessages);
    function getErrorIcon() {
        switch (errorType) {
            case '401': {
                return React.createElement(Svg401, { className: 'iui-non-ideal-state-illustration' });
            }
            case '403': {
                return React.createElement(Svg403, { className: 'iui-non-ideal-state-illustration' });
            }
            case '404': {
                return React.createElement(Svg404, { className: 'iui-non-ideal-state-illustration' });
            }
            case '500': {
                return React.createElement(Svg500, { className: 'iui-non-ideal-state-illustration' });
            }
            case '502': {
                return React.createElement(Svg502, { className: 'iui-non-ideal-state-illustration' });
            }
            case '503': {
                return React.createElement(Svg503, { className: 'iui-non-ideal-state-illustration' });
            }
            case 'generic':
            default: {
                return React.createElement(SvgError, { className: 'iui-non-ideal-state-illustration' });
            }
        }
    }
    function getHeadingMessage() {
        if (errorName) {
            return errorName;
        }
        switch (errorType) {
            case '401': {
                return defaultErrorMessages.unauthorized;
            }
            case '403': {
                return defaultErrorMessages.forbidden;
            }
            case '404': {
                return defaultErrorMessages.pageNotFound;
            }
            case '500': {
                return defaultErrorMessages.internalServerError;
            }
            case '502': {
                return defaultErrorMessages.badGateway;
            }
            case '503': {
                return defaultErrorMessages.serviceUnavailable;
            }
            case 'generic':
            default: {
                return defaultErrorMessages.error;
            }
        }
    }
    function getPrimaryButton() {
        if (!primaryButtonHandle || !primaryButtonLabel) {
            return undefined;
        }
        return (React.createElement(Button, { styleType: 'high-visibility', onClick: primaryButtonHandle }, primaryButtonLabel));
    }
    function getSecondaryButton() {
        if (!secondaryButtonHandle || !secondaryButtonLabel) {
            return undefined;
        }
        return (React.createElement(Button, { styleType: 'default', onClick: secondaryButtonHandle }, secondaryButtonLabel));
    }
    function getActions() {
        var primaryButton = getPrimaryButton();
        var secondaryButton = getSecondaryButton();
        if (!primaryButton && !secondaryButton) {
            return undefined;
        }
        return (React.createElement("div", { className: 'iui-non-ideal-state-actions' },
            primaryButton,
            secondaryButton));
    }
    return (React.createElement("div", __assign({ className: 'iui-non-ideal-state' }, rest),
        getErrorIcon(),
        React.createElement("div", { className: 'iui-non-ideal-state-title' }, getHeadingMessage()),
        errorMessage && (React.createElement("div", { className: 'iui-non-ideal-state-description' }, errorMessage)),
        getActions()));
};
export default ErrorPage;
