var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import cx from 'classnames';
import React from 'react';
import { StatusIconMap } from '../utils/common';
import { useTheme } from '../utils/hooks/useTheme';
import '@itwin/itwinui-css/css/inputs.css';
/**
 * Group Checkbox/Radio components together
 * @example
 * <caption>Group checkboxes</caption>
 * <InputGroup label='Checkbox group'>
 *  <Checkbox />
 *  <Checkbox />
 * </InputGroup>
 * @example
 * <caption>Group radios</caption>
 * <InputGroup label='Radio group'>
 *  <Radio />
 *  <Radio />
 * </InputGroup>
 */
export var InputGroup = function (props) {
    var _a;
    var children = props.children, _b = props.disabled, disabled = _b === void 0 ? false : _b, _c = props.displayStyle, displayStyle = _c === void 0 ? 'default' : _c, label = props.label, message = props.message, status = props.status, svgIcon = props.svgIcon, className = props.className, style = props.style, _d = props.required, required = _d === void 0 ? false : _d, rest = __rest(props, ["children", "disabled", "displayStyle", "label", "message", "status", "svgIcon", "className", "style", "required"]);
    useTheme();
    var icon = status ? StatusIconMap[status]() : svgIcon;
    return (React.createElement("div", __assign({ className: cx('iui-input-container', (_a = {
                'iui-disabled': disabled
            },
            _a["iui-" + status] = !!status,
            _a["iui-" + displayStyle] = displayStyle !== 'default',
            _a), className), style: style }, rest),
        label && (React.createElement("div", { className: cx('iui-label', {
                'iui-required': required,
            }) }, label)),
        children,
        (message || icon) && (React.createElement("div", { className: 'iui-message' },
            icon,
            displayStyle === 'default' && message))));
};
export default InputGroup;
