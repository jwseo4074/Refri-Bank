var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import cx from 'classnames';
import React from 'react';
import { useTheme, getBoundedValue, useEventListener, } from '../utils';
import '@itwin/itwinui-css/css/slider.css';
import { Track } from './Track';
import { Thumb } from './Thumb';
var getPercentageOfRectangle = function (rect, pointer) {
    var position = getBoundedValue(pointer, rect.left, rect.right);
    return (position - rect.left) / rect.width;
};
var getClosestValueIndex = function (values, pointerValue) {
    if (1 === values.length) {
        return 0;
    }
    var distances = values.map(function (value) { return Math.abs(value - pointerValue); });
    var smallest = Math.min.apply(Math, distances);
    return distances.indexOf(smallest);
};
var getDefaultTrackDisplay = function (trackDisplayMode, values) {
    if ('auto' !== trackDisplayMode) {
        return trackDisplayMode;
    }
    return values.length % 2 ? 'even-segments' : 'odd-segments';
};
var roundValueToClosestStep = function (value, step, min) {
    return Math.round((value - min) / step) * step + min;
};
var formatNumberValue = function (value, step, numDecimals) {
    if (Number.isInteger(step)) {
        return value.toFixed(0);
    }
    return value.toFixed(numDecimals);
};
/**
 * Focus specified thumb on Slider control
 */
var focusThumb = function (sliderContainer, activeIndex) {
    var _a;
    var doc = sliderContainer.ownerDocument;
    if (!sliderContainer.contains(doc.activeElement) ||
        Number((_a = doc.activeElement) === null || _a === void 0 ? void 0 : _a.getAttribute('data-index')) !== activeIndex) {
        var thumbToFocus = sliderContainer.querySelector("[data-index=\"".concat(activeIndex, "\"]"));
        thumbToFocus && thumbToFocus.focus();
    }
};
/**
 * Slider component that display Thumbs for each value specified along a Rail.
 * @example
 * <Slider values={[10]} min={0} max={60} disabled />
 * <Slider values={[10, 20]} min={0} max={50} step={2} />
 * <Slider values={[10, 20, 30, 40]} min={0} max={60} setFocus
 *   thumbMode='allow-crossing' />
 */
export var Slider = React.forwardRef(function (props, ref) {
    var _a, _b;
    var _c = props.min, min = _c === void 0 ? 0 : _c, _d = props.max, max = _d === void 0 ? 100 : _d, values = props.values, _e = props.step, step = _e === void 0 ? 1 : _e, _f = props.setFocus, setFocus = _f === void 0 ? false : _f, tooltipProps = props.tooltipProps, _g = props.disabled, disabled = _g === void 0 ? false : _g, tickLabels = props.tickLabels, minLabel = props.minLabel, maxLabel = props.maxLabel, _h = props.trackDisplayMode, trackDisplayMode = _h === void 0 ? 'auto' : _h, _j = props.thumbMode, thumbMode = _j === void 0 ? 'inhibit-crossing' : _j, onChange = props.onChange, onUpdate = props.onUpdate, thumbProps = props.thumbProps, className = props.className, railContainerProps = props.railContainerProps, rest = __rest(props, ["min", "max", "values", "step", "setFocus", "tooltipProps", "disabled", "tickLabels", "minLabel", "maxLabel", "trackDisplayMode", "thumbMode", "onChange", "onUpdate", "thumbProps", "className", "railContainerProps"]);
    var _k = React.useState(values), currentValues = _k[0], setCurrentValues = _k[1];
    React.useEffect(function () {
        setCurrentValues(values);
    }, [values]);
    var _l = React.useState(function () { return minLabel !== null && minLabel !== void 0 ? minLabel : min.toString(); }), minValueLabel = _l[0], setMinValueLabel = _l[1];
    React.useEffect(function () {
        setMinValueLabel(minLabel !== null && minLabel !== void 0 ? minLabel : min.toString());
    }, [minLabel, min]);
    var _m = React.useState(function () { return maxLabel !== null && maxLabel !== void 0 ? maxLabel : max.toString(); }), maxValueLabel = _m[0], setMaxValueLabel = _m[1];
    React.useEffect(function () {
        setMaxValueLabel(maxLabel !== null && maxLabel !== void 0 ? maxLabel : max.toString());
    }, [maxLabel, max]);
    var _o = React.useState(function () { return getDefaultTrackDisplay(trackDisplayMode, currentValues); }), trackDisplay = _o[0], setTrackDisplay = _o[1];
    React.useEffect(function () {
        setTrackDisplay(getDefaultTrackDisplay(trackDisplayMode, currentValues));
    }, [trackDisplayMode, currentValues]);
    useTheme();
    var containerRef = React.useRef(null);
    React.useEffect(function () {
        if (containerRef.current && setFocus) {
            focusThumb(containerRef.current, 0);
        }
    }, [setFocus]);
    var getNumDecimalPlaces = React.useMemo(function () {
        var stepString = step.toString();
        var decimalIndex = stepString.indexOf('.');
        return stepString.length - (decimalIndex + 1);
    }, [step]);
    var getAllowableThumbRange = React.useCallback(function (index) {
        if (thumbMode === 'inhibit-crossing') {
            var minVal = index === 0 ? min : currentValues[index - 1] + step;
            var maxVal = index < currentValues.length - 1
                ? currentValues[index + 1] - step
                : max;
            return [minVal, maxVal];
        }
        return [min, max];
    }, [max, min, step, thumbMode, currentValues]);
    var _p = React.useState(undefined), activeThumbIndex = _p[0], setActiveThumbIndex = _p[1];
    var updateThumbValue = React.useCallback(function (event, callbackType) {
        if (containerRef.current && undefined !== activeThumbIndex) {
            var percent = getPercentageOfRectangle(containerRef.current.getBoundingClientRect(), event.clientX);
            var pointerValue = min + (max - min) * percent;
            pointerValue = roundValueToClosestStep(pointerValue, step, min);
            var _a = getAllowableThumbRange(activeThumbIndex), minVal = _a[0], maxVal = _a[1];
            pointerValue = getBoundedValue(pointerValue, minVal, maxVal);
            if (pointerValue !== currentValues[activeThumbIndex]) {
                var newValues = __spreadArray([], currentValues, true);
                newValues[activeThumbIndex] = pointerValue;
                setCurrentValues(newValues);
                'onChange' === callbackType
                    ? onChange === null || onChange === void 0 ? void 0 : onChange(newValues)
                    : onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(newValues);
            }
            else if ('onChange' === callbackType) {
                onChange === null || onChange === void 0 ? void 0 : onChange(currentValues);
            }
        }
    }, [
        activeThumbIndex,
        min,
        max,
        step,
        getAllowableThumbRange,
        currentValues,
        onUpdate,
        onChange,
    ]);
    var handlePointerMove = React.useCallback(function (event) {
        if (activeThumbIndex === undefined) {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        updateThumbValue(event, 'onUpdate');
    }, [activeThumbIndex, updateThumbValue]);
    // function called by Thumb keyboard processing
    var onThumbValueChanged = React.useCallback(function (index, value) {
        if (currentValues[index] === value) {
            return;
        }
        var newValues = __spreadArray([], currentValues, true);
        newValues[index] = value;
        setCurrentValues(newValues);
        onChange === null || onChange === void 0 ? void 0 : onChange(newValues);
    }, [currentValues, onChange]);
    var onThumbActivated = React.useCallback(function (index) {
        setActiveThumbIndex(index);
    }, []);
    var handlePointerUp = React.useCallback(function (event) {
        if (activeThumbIndex === undefined) {
            return;
        }
        updateThumbValue(event, 'onChange');
        setActiveThumbIndex(undefined);
        event.preventDefault();
        event.stopPropagation();
    }, [activeThumbIndex, updateThumbValue]);
    var handlePointerDownOnSlider = React.useCallback(function (event) {
        if (containerRef.current) {
            var percent = getPercentageOfRectangle(containerRef.current.getBoundingClientRect(), event.clientX);
            var pointerValue = min + (max - min) * percent;
            pointerValue = roundValueToClosestStep(pointerValue, step, min);
            var closestValueIndex = getClosestValueIndex(currentValues, pointerValue);
            var _a = getAllowableThumbRange(closestValueIndex), minVal = _a[0], maxVal = _a[1];
            pointerValue = getBoundedValue(pointerValue, minVal, maxVal);
            if (pointerValue === currentValues[closestValueIndex]) {
                return;
            }
            var newValues = __spreadArray([], currentValues, true);
            newValues[closestValueIndex] = pointerValue;
            setCurrentValues(newValues);
            onChange === null || onChange === void 0 ? void 0 : onChange(newValues);
            onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(newValues);
            focusThumb(containerRef.current, closestValueIndex);
            event.preventDefault();
            event.stopPropagation();
        }
    }, [
        min,
        max,
        step,
        currentValues,
        getAllowableThumbRange,
        onChange,
        onUpdate,
    ]);
    useEventListener('pointermove', handlePointerMove, (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.ownerDocument);
    useEventListener('pointerup', handlePointerUp, (_b = containerRef.current) === null || _b === void 0 ? void 0 : _b.ownerDocument);
    var tickMarkArea = React.useMemo(function () {
        if (!tickLabels) {
            return null;
        }
        if (Array.isArray(tickLabels)) {
            return (React.createElement("div", { className: 'iui-slider-ticks' }, tickLabels.map(function (label, index) { return (React.createElement("span", { key: index, className: 'iui-slider-tick' }, label)); })));
        }
        return tickLabels;
    }, [tickLabels]);
    var generateTooltipProps = React.useCallback(function (index, val) {
        var outProps = tooltipProps
            ? tooltipProps(index, val, step)
            : {};
        return __assign(__assign({}, outProps), { content: outProps.content
                ? outProps.content
                : formatNumberValue(val, step, getNumDecimalPlaces) });
    }, [getNumDecimalPlaces, step, tooltipProps]);
    return (React.createElement("div", __assign({ ref: ref, className: cx('iui-slider-component-container', { 'iui-disabled': disabled }, className) }, rest),
        minValueLabel && (React.createElement("span", { className: 'iui-slider-min' }, minValueLabel)),
        React.createElement("div", __assign({ ref: containerRef, className: cx('iui-slider-container', {
                'iui-grabbing': undefined !== activeThumbIndex,
            }), onPointerDown: handlePointerDownOnSlider }, railContainerProps),
            React.createElement("div", { className: 'iui-slider-rail' }),
            currentValues.map(function (thumbValue, index) {
                var _a;
                var _b = getAllowableThumbRange(index), minVal = _b[0], maxVal = _b[1];
                var thisThumbProps = thumbProps === null || thumbProps === void 0 ? void 0 : thumbProps(index);
                return (React.createElement(Thumb, { key: (_a = thisThumbProps === null || thisThumbProps === void 0 ? void 0 : thisThumbProps.id) !== null && _a !== void 0 ? _a : index, index: index, disabled: disabled, isActive: activeThumbIndex === index, onThumbActivated: onThumbActivated, onThumbValueChanged: onThumbValueChanged, minVal: minVal, maxVal: maxVal, value: thumbValue, tooltipProps: generateTooltipProps(index, thumbValue), thumbProps: thisThumbProps, step: step, sliderMin: min, sliderMax: max }));
            }),
            React.createElement(Track, { trackDisplayMode: trackDisplay, sliderMin: min, sliderMax: max, values: currentValues }),
            tickMarkArea),
        maxValueLabel && (React.createElement("span", { className: 'iui-slider-max' }, maxValueLabel))));
});
export default Slider;
