var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import React from 'react';
import cx from 'classnames';
import { Tooltip } from '../Tooltip';
/**
 * Thumb is a local component used to show and modify the values maintained by the Slider.
 * Only one Thumb can be active at a time. A Thumb is made active when the user selects
 * it with pointer. Whenever a Thumb is active, focused, or hovered its tooltip is shown.
 */
export var Thumb = function (props) {
    var value = props.value, index = props.index, minVal = props.minVal, maxVal = props.maxVal, step = props.step, sliderMin = props.sliderMin, sliderMax = props.sliderMax, isActive = props.isActive, onThumbActivated = props.onThumbActivated, onThumbValueChanged = props.onThumbValueChanged, tooltipProps = props.tooltipProps, thumbProps = props.thumbProps, disabled = props.disabled;
    var thumbRef = React.useRef(null);
    var handleOnKeyDown = React.useCallback(function (event) {
        if (disabled || event.altKey) {
            return;
        }
        switch (event.key) {
            case 'ArrowLeft':
            case 'ArrowDown':
                onThumbValueChanged(index, Math.max(value - step, minVal));
                break;
            case 'ArrowRight':
            case 'ArrowUp':
                onThumbValueChanged(index, Math.min(value + step, maxVal));
                break;
            case 'Home':
                onThumbValueChanged(index, minVal);
                break;
            case 'End':
                onThumbValueChanged(index, maxVal);
                break;
            default:
                return;
        }
        event.preventDefault();
    }, [disabled, onThumbValueChanged, index, value, step, minVal, maxVal]);
    var handlePointerDownOnThumb = React.useCallback(function () {
        !disabled && onThumbActivated(index);
    }, [disabled, index, onThumbActivated]);
    var _a = React.useState(false), hasFocus = _a[0], setHasFocus = _a[1];
    var _b = React.useState(false), isHovered = _b[0], setIsHovered = _b[1];
    var adjustedValue = React.useMemo(function () {
        if (value < sliderMin) {
            return sliderMin;
        }
        if (value > sliderMax) {
            return sliderMax;
        }
        return value;
    }, [sliderMax, sliderMin, value]);
    var leftPercent = React.useMemo(function () {
        if (sliderMax === sliderMin) {
            return 0;
        }
        return (100.0 * (adjustedValue - sliderMin)) / (sliderMax - sliderMin);
    }, [adjustedValue, sliderMax, sliderMin]);
    var _c = thumbProps || {}, style = _c.style, className = _c.className, rest = __rest(_c, ["style", "className"]);
    return (React.createElement(Tooltip, __assign({ visible: isActive || hasFocus || isHovered, placement: 'top' }, tooltipProps),
        React.createElement("div", __assign({}, rest, { "data-index": index, ref: thumbRef, style: __assign(__assign({}, style), { left: "".concat(leftPercent, "%") }), className: cx('iui-slider-thumb', { 'iui-active': isActive }, className), role: 'slider', tabIndex: disabled ? undefined : 0, "aria-valuemin": minVal, "aria-valuenow": value, "aria-valuemax": maxVal, "aria-disabled": disabled, onPointerDown: handlePointerDownOnThumb, onKeyDown: handleOnKeyDown, onFocus: function () { return setHasFocus(true); }, onBlur: function () { return setHasFocus(false); }, onMouseEnter: function () { return setIsHovered(true); }, onMouseLeave: function () { return setIsHovered(false); } }))));
};
