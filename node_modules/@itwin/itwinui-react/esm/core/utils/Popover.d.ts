import React from 'react';
import { TippyProps } from '@tippyjs/react';
import { Placement, Instance } from 'tippy.js';
export declare type PopoverInstance = Instance;
export declare type PopoverProps = {
    /**
     * Controlled flag for whether the popover is visible.
     */
    visible?: boolean;
    /**
     * Determines the events that cause the popover to show.
     * Should not be used when `visible` is set.
     * @see [tippy.js trigger prop](https://atomiks.github.io/tippyjs/v6/all-props/#trigger)
     */
    trigger?: string;
    /**
     * Placement of the popover content.
     * @default 'bottom-start'
     * @see [tippy.js placement prop](https://atomiks.github.io/tippyjs/v6/all-props/#placement).
     */
    placement?: Placement;
} & Omit<TippyProps, 'placement' | 'trigger' | 'visible'>;
/**
 * Wrapper around [tippy.js](https://atomiks.github.io/tippyjs)
 * with pre-configured props and plugins (e.g. lazy mounting, focus, etc).
 * @private
 */
export declare const Popover: React.ForwardRefExoticComponent<Pick<{
    /**
     * Controlled flag for whether the popover is visible.
     */
    visible?: boolean | undefined;
    /**
     * Determines the events that cause the popover to show.
     * Should not be used when `visible` is set.
     * @see [tippy.js trigger prop](https://atomiks.github.io/tippyjs/v6/all-props/#trigger)
     */
    trigger?: string | undefined;
    /**
     * Placement of the popover content.
     * @default 'bottom-start'
     * @see [tippy.js placement prop](https://atomiks.github.io/tippyjs/v6/all-props/#placement).
     */
    placement?: import("@popperjs/core").Placement | undefined;
} & Omit<TippyProps, "visible" | "placement" | "trigger">, "children" | "disabled" | "className" | "role" | "visible" | "content" | "sticky" | "touch" | "placement" | "trigger" | "render" | "animateFill" | "appendTo" | "aria" | "delay" | "duration" | "followCursor" | "getReferenceClientRect" | "hideOnClick" | "ignoreAttributes" | "inlinePositioning" | "interactive" | "interactiveBorder" | "interactiveDebounce" | "moveTransition" | "offset" | "plugins" | "popperOptions" | "showOnCreate" | "triggerTarget" | "onAfterUpdate" | "onBeforeUpdate" | "onCreate" | "onDestroy" | "onHidden" | "onHide" | "onMount" | "onShow" | "onShown" | "onTrigger" | "onUntrigger" | "onClickOutside" | "allowHTML" | "animation" | "arrow" | "inertia" | "maxWidth" | "theme" | "zIndex" | "singleton" | "reference"> & React.RefAttributes<unknown>>;
/**
 * Plugin to hide Popover when either Esc key is pressed,
 * or when the content inside is not tabbable and Tab key is pressed.
 */
export declare const hideOnEscOrTab: {
    fn(instance: Instance): {
        onShow(): void;
        onHide(): void;
    };
};
export default Popover;
