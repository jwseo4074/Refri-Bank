/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import React from 'react';
/**
 * Hook that adds and removes Event listeners.
 * @example
 *  useEventListener(
 *     'pointerup',
 *     handlePointerUp,
 *     containerRef.current?.ownerDocument,
 *  );
 */
export var useEventListener = function (eventName, handler, element) {
    // Based on published hook https://usehooks.com/useEventListener/.
    var savedHandler = React.useRef();
    // Update reference if handler changes. This allows our effect below to
    // always use latest handler without us needing to pass it in effect deps array
    // and potentially cause effect to re-run every render.
    React.useEffect(function () {
        savedHandler.current = handler;
    }, [handler]);
    React.useEffect(function () {
        if (!element) {
            return;
        }
        var eventListener = function (event) { var _a; return (_a = savedHandler.current) === null || _a === void 0 ? void 0 : _a.call(savedHandler, event); };
        element.addEventListener(eventName, eventListener);
        return function () {
            element.removeEventListener(eventName, eventListener);
        };
    }, [eventName, element]);
};
