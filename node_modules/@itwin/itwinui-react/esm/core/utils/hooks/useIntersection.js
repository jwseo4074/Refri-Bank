/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import React from 'react';
import { getWindow } from '../functions/dom';
/**
 * Hook that uses `IntersectionObserver` to trigger `onIntersect` callback when element is in viewport.
 * Callback is called only once by default (can be changed using the `once` parameter).
 * @returns a callback ref that needs to be set on the element you want to observe.
 * @private
 * @example
 * const onIntersection = React.useCallback(() => {
 *   console.log('Element is in viewport!');
 * }, []);
 * const ref = useIntersection(onIntersection);
 * return (<div ref={ref}>One of many elements</div>);
 */
export var useIntersection = function (onIntersect, options, once) {
    if (options === void 0) { options = {}; }
    if (once === void 0) { once = true; }
    var root = options.root, rootMargin = options.rootMargin, threshold = options.threshold;
    var observer = React.useRef();
    var setRef = React.useCallback(function (node) {
        var _a;
        if (!((_a = getWindow()) === null || _a === void 0 ? void 0 : _a.IntersectionObserver)) {
            return;
        }
        if (observer.current) {
            observer.current.disconnect();
        }
        if (!node) {
            return;
        }
        observer.current = new IntersectionObserver(function (_a, obs) {
            var entry = _a[0];
            if (entry.isIntersecting) {
                if (once) {
                    obs.disconnect();
                }
                onIntersect();
            }
        }, { root: root, rootMargin: rootMargin, threshold: threshold });
        observer.current.observe(node);
    }, [onIntersect, once, root, rootMargin, threshold]);
    React.useEffect(function () { return function () { var _a; return (_a = observer.current) === null || _a === void 0 ? void 0 : _a.disconnect(); }; }, []);
    return setRef;
};
