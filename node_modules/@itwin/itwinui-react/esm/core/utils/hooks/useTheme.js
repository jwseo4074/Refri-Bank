/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import React from 'react';
import '@itwin/itwinui-css/css/global.css';
import { getDocument, getWindow } from '../functions/dom';
import { useMediaQuery } from './useMediaQuery';
/**
 * Hook that applies styling and theme to all components.
 * Defaults to light theme if none provided or set elsewhere.
 * @param theme Light, dark, or based on OS setting.
 * @param themeOptions Options that override default theming behavior.
 */
export var useTheme = function (theme, themeOptions) {
    var _a;
    var ownerDocument = (_a = themeOptions === null || themeOptions === void 0 ? void 0 : themeOptions.ownerDocument) !== null && _a !== void 0 ? _a : getDocument();
    var prefersHighContrast = useMediaQuery('(prefers-contrast: more)');
    var highContrast = React.useMemo(function () { var _a; return !!((_a = themeOptions === null || themeOptions === void 0 ? void 0 : themeOptions.highContrast) !== null && _a !== void 0 ? _a : prefersHighContrast); }, [prefersHighContrast, themeOptions === null || themeOptions === void 0 ? void 0 : themeOptions.highContrast]);
    React.useLayoutEffect(function () {
        if (!(ownerDocument === null || ownerDocument === void 0 ? void 0 : ownerDocument.body.classList.contains('iui-body'))) {
            ownerDocument === null || ownerDocument === void 0 ? void 0 : ownerDocument.body.classList.add('iui-body');
        }
    }, [ownerDocument]);
    React.useLayoutEffect(function () {
        var _a, _b, _c, _d, _e;
        if (!ownerDocument) {
            return;
        }
        var prefersDarkMediaQuery = (_b = (_a = getWindow()) === null || _a === void 0 ? void 0 : _a.matchMedia) === null || _b === void 0 ? void 0 : _b.call(_a, '(prefers-color-scheme: dark)');
        var addOSTheme = function (_a) {
            var isDark = _a.matches;
            if (isDark) {
                applyTheme('dark', { ownerDocument: ownerDocument, highContrast: highContrast });
            }
            else {
                applyTheme('light', { ownerDocument: ownerDocument, highContrast: highContrast });
            }
        };
        switch (theme) {
            case 'light':
                (_c = prefersDarkMediaQuery === null || prefersDarkMediaQuery === void 0 ? void 0 : prefersDarkMediaQuery.removeEventListener) === null || _c === void 0 ? void 0 : _c.call(prefersDarkMediaQuery, 'change', addOSTheme);
                applyTheme('light', { ownerDocument: ownerDocument, highContrast: highContrast });
                break;
            case 'dark':
                (_d = prefersDarkMediaQuery === null || prefersDarkMediaQuery === void 0 ? void 0 : prefersDarkMediaQuery.removeEventListener) === null || _d === void 0 ? void 0 : _d.call(prefersDarkMediaQuery, 'change', addOSTheme);
                applyTheme('dark', { ownerDocument: ownerDocument, highContrast: highContrast });
                break;
            case 'os':
                if (prefersDarkMediaQuery != undefined) {
                    addOSTheme(prefersDarkMediaQuery);
                    (_e = prefersDarkMediaQuery.addEventListener) === null || _e === void 0 ? void 0 : _e.call(prefersDarkMediaQuery, 'change', addOSTheme);
                }
                else {
                    applyTheme('light', { ownerDocument: ownerDocument, highContrast: highContrast });
                }
                break;
            default:
                if (ownerDocument.documentElement.className.indexOf('iui-theme') === -1) {
                    applyTheme('light', { ownerDocument: ownerDocument, highContrast: highContrast });
                }
        }
        return function () {
            var _a;
            (_a = prefersDarkMediaQuery === null || prefersDarkMediaQuery === void 0 ? void 0 : prefersDarkMediaQuery.removeEventListener) === null || _a === void 0 ? void 0 : _a.call(prefersDarkMediaQuery, 'change', addOSTheme);
        };
    }, [highContrast, ownerDocument, theme]);
};
var applyTheme = function (theme, _a) {
    var ownerDocument = _a.ownerDocument, highContrast = _a.highContrast;
    var classList = ownerDocument.documentElement.classList;
    var currentTheme = Array.from(classList).find(function (cls) {
        return cls.startsWith('iui-theme');
    });
    if (currentTheme) {
        classList.remove(currentTheme);
    }
    classList.add("iui-theme-".concat(theme).concat(highContrast ? '-hc' : ''));
};
