var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import SvgInfoCircular from '@itwin/itwinui-icons-react/cjs/icons/InfoCircular';
import SvgStatusError from '@itwin/itwinui-icons-react/cjs/icons/StatusError';
import SvgStatusSuccess from '@itwin/itwinui-icons-react/cjs/icons/StatusSuccess';
import SvgStatusWarning from '@itwin/itwinui-icons-react/cjs/icons/StatusWarning';
import React from 'react';
export var StatusIconMap = {
    negative: function (args) { return React.createElement(SvgStatusError, __assign({ "aria-hidden": true }, args)); },
    positive: function (args) { return React.createElement(SvgStatusSuccess, __assign({ "aria-hidden": true }, args)); },
    warning: function (args) { return React.createElement(SvgStatusWarning, __assign({ "aria-hidden": true }, args)); },
    informational: function (args) { return (React.createElement(SvgInfoCircular, __assign({ "aria-hidden": true }, args))); },
};
var USER_COLORS = [
    '#6AB9EC',
    '#B1C854',
    '#F7706C',
    '#4585A5',
    '#FFC335',
    '#F7963E',
    '#73C7C1',
    '#85A9CF',
    '#A3779F',
    '#C8C2B4',
    '#A47854',
];
/**
 * Generate color from user name or email.
 * Recommended to use for `backgroundColor` in `UserIcon` component.
 */
export var getUserColor = function (emailOrName) {
    var normalizedString = emailOrName.trim().toLowerCase();
    var hash = 0;
    for (var i = 0; i < normalizedString.length; i++) {
        var charCode = normalizedString.charCodeAt(i);
        hash = (hash + charCode) % USER_COLORS.length;
    }
    return USER_COLORS[hash];
};
/**
 * Get the container as a child of body, or create one if it doesn't exist.
 * Mostly used for dynamic components like Modal or Toast.
 *
 * @param containerId id of the container to find or create
 * @param ownerDocument Can be changed if the container should be in a different document (e.g. in popup).
 */
export var getContainer = function (containerId, ownerDocument) {
    var _a;
    if (ownerDocument === void 0) { ownerDocument = getDocument(); }
    var container = (_a = ownerDocument === null || ownerDocument === void 0 ? void 0 : ownerDocument.getElementById(containerId)) !== null && _a !== void 0 ? _a : undefined;
    if (container == null && !!ownerDocument) {
        container = ownerDocument.createElement('div');
        container.setAttribute('id', containerId);
        ownerDocument.body.appendChild(container);
    }
    return container;
};
/**
 * Get document if it is defined.
 * Used to support SSR/SSG applications.
 */
export var getDocument = function () {
    return typeof document === 'undefined' ? undefined : document;
};
/**
 * Get window if it is defined.
 * Used to support SSR/SSG applications.
 */
export var getWindow = function () {
    return typeof window === 'undefined' ? undefined : window;
};
/**
 * Return input value bounded by specified range.
 */
export var getBoundedValue = function (val, min, max) {
    return Math.min(max, Math.max(min, val));
};
