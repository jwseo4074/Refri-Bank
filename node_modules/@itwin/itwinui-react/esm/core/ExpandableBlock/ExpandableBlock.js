var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import SvgChevronRight from '@itwin/itwinui-icons-react/cjs/icons/ChevronRight';
import cx from 'classnames';
import React from 'react';
import { useTheme } from '../utils/hooks/useTheme';
import '@itwin/itwinui-css/css/expandable-block.css';
/**
 * Container that allows content to be hidden behind a brief title and a caption.
 * @example
 * <ExpandableBlock title='Basic Block'>Content in block!</ExpandableBlock>
 * <ExpandableBlock title='Basic Block' caption='basic caption'>Content in block!</ExpandableBlock>
 * <ExpandableBlock title='Default Expanded Block' caption='basic caption' isExpanded={true}>Content in block!</ExpandableBlock>
 */
export var ExpandableBlock = function (props) {
    var caption = props.caption, children = props.children, className = props.className, title = props.title, onToggle = props.onToggle, style = props.style, _a = props.isExpanded, isExpanded = _a === void 0 ? false : _a, rest = __rest(props, ["caption", "children", "className", "title", "onToggle", "style", "isExpanded"]);
    useTheme();
    var _b = React.useState(isExpanded), expanded = _b[0], setExpanded = _b[1];
    React.useEffect(function () {
        setExpanded(isExpanded);
    }, [isExpanded]);
    var handleToggle = function () {
        setExpanded(!expanded);
        onToggle === null || onToggle === void 0 ? void 0 : onToggle(!expanded);
    };
    var onKeyDown = function (event) {
        if (event.key === 'Enter' ||
            event.key === ' ' ||
            event.key === 'Spacebar') {
            handleToggle();
        }
    };
    return (React.createElement("div", __assign({ className: cx('iui-expandable-block', { 'iui-with-caption': !!caption }, { 'iui-expanded': expanded }, className), style: style }, rest),
        React.createElement("div", { "aria-expanded": expanded, className: 'iui-header', tabIndex: 0, onClick: handleToggle, onKeyDown: onKeyDown },
            React.createElement(SvgChevronRight, { className: 'iui-icon', "aria-hidden": true }),
            React.createElement("div", { className: 'iui-title' }, title),
            caption && React.createElement("div", { className: 'iui-caption' }, caption)),
        React.createElement("div", { className: 'iui-expandable-content' }, children)));
};
export default ExpandableBlock;
