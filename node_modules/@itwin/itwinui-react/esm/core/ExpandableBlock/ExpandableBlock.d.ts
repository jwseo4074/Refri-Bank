import React from 'react';
import { CommonProps } from '../utils';
import '@itwin/itwinui-css/css/expandable-block.css';
export declare type ExpandableBlockProps = {
    /**
     * The main text displayed on the block, regardless of state.
     */
    title: React.ReactNode;
    /**
     * Small note displayed above title, regardless of state.
     */
    caption?: React.ReactNode;
    /**
     * Status of the block.
     * When set, a colored status icon is shown at the end of the main text.
     */
    status?: 'positive' | 'negative' | 'warning' | 'informational';
    /**
     * Svg icon displayed at the end of the main text.
     * Will override status icon if specified.
     */
    endIcon?: JSX.Element;
    /**
     * Whether or not to show the block's content.
     * @default false
     */
    isExpanded?: boolean;
    /**
     * Callback function for toggling an expansion state.
     */
    onToggle?: (isExpanding: boolean) => void;
    /**
     * Content in the expandable block.
     */
    children: React.ReactNode;
    /**
     * Modify size of the ExpandableBlock.
     * @default 'default'
     */
    size?: 'default' | 'small';
    /**
     * Style of the ExpandableBlock.
     * Use 'borderless' to hide outline.
     * @default 'default'
     */
    styleType?: 'default' | 'borderless';
} & Omit<CommonProps, 'title'>;
/**
 * Container that allows content to be hidden behind a brief title and a caption.
 * @example
 * <ExpandableBlock title='Basic Block'>Content in block!</ExpandableBlock>
 * <ExpandableBlock title='Basic Block' caption='basic caption'>Content in block!</ExpandableBlock>
 * <ExpandableBlock title='Default Expanded Block' caption='basic caption' isExpanded={true}>Content in block!</ExpandableBlock>
 * <ExpandableBlock title='Positive status' status='positive'>Content</ExpandableBlock>
 * <ExpandableBlock title='Block with icon' endIcon={<SvgPlaceholder />}>Content</ExpandableBlock>
 */
export declare const ExpandableBlock: (props: ExpandableBlockProps) => JSX.Element;
export default ExpandableBlock;
