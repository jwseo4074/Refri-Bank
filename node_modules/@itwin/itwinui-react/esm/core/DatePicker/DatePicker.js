var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import SvgChevronLeft from '@itwin/itwinui-icons-react/cjs/icons/ChevronLeft';
import SvgChevronRight from '@itwin/itwinui-icons-react/cjs/icons/ChevronRight';
import cx from 'classnames';
import React from 'react';
import { useTheme } from '../utils/hooks/useTheme';
import '@itwin/itwinui-css/css/date-picker.css';
import { IconButton } from '../Buttons/IconButton';
import { TimePicker } from '../TimePicker';
var isSameDay = function (a, b) {
    return (a &&
        b &&
        a.getFullYear() === b.getFullYear() &&
        a.getMonth() === b.getMonth() &&
        a.getDate() === b.getDate());
};
var defaultMonths = [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December',
];
var defaultShortDays = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];
var defaultLongDays = [
    'Sunday',
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday',
];
/**
 * Generate localized months and days strings using `Intl.DateTimeFormat` for passed locale to use in DatePicker component.
 * If locale is not passed, browser locale will be used.
 */
export var generateLocalizedStrings = function (locale) {
    var shortWeekDayFormatter = new Intl.DateTimeFormat(locale, {
        weekday: 'short',
    });
    var longWeekDayFormatter = new Intl.DateTimeFormat(locale, {
        weekday: 'long',
    });
    var monthFormatter = new Intl.DateTimeFormat(locale, { month: 'long' });
    var months = [
        monthFormatter.format(new Date(2020, 0, 1)),
        monthFormatter.format(new Date(2020, 1, 1)),
        monthFormatter.format(new Date(2020, 2, 1)),
        monthFormatter.format(new Date(2020, 3, 1)),
        monthFormatter.format(new Date(2020, 4, 1)),
        monthFormatter.format(new Date(2020, 5, 1)),
        monthFormatter.format(new Date(2020, 6, 1)),
        monthFormatter.format(new Date(2020, 7, 1)),
        monthFormatter.format(new Date(2020, 8, 1)),
        monthFormatter.format(new Date(2020, 9, 1)),
        monthFormatter.format(new Date(2020, 10, 1)),
        monthFormatter.format(new Date(2020, 11, 1)),
    ];
    var days = [
        longWeekDayFormatter.format(new Date(2020, 10, 1)),
        longWeekDayFormatter.format(new Date(2020, 10, 2)),
        longWeekDayFormatter.format(new Date(2020, 10, 3)),
        longWeekDayFormatter.format(new Date(2020, 10, 4)),
        longWeekDayFormatter.format(new Date(2020, 10, 5)),
        longWeekDayFormatter.format(new Date(2020, 10, 6)),
        longWeekDayFormatter.format(new Date(2020, 10, 7)),
    ];
    var shortDays = [
        shortWeekDayFormatter.format(new Date(2020, 10, 1)).slice(0, 2),
        shortWeekDayFormatter.format(new Date(2020, 10, 2)).slice(0, 2),
        shortWeekDayFormatter.format(new Date(2020, 10, 3)).slice(0, 2),
        shortWeekDayFormatter.format(new Date(2020, 10, 4)).slice(0, 2),
        shortWeekDayFormatter.format(new Date(2020, 10, 5)).slice(0, 2),
        shortWeekDayFormatter.format(new Date(2020, 10, 6)).slice(0, 2),
        shortWeekDayFormatter.format(new Date(2020, 10, 7)).slice(0, 2),
    ];
    return {
        months: months,
        shortDays: shortDays,
        days: days,
    };
};
/**
 * Date picker component
 * @example
 * <DatePicker date={new Date()} onChange={(e) => console.log('New date value: ' + e)} />
 */
export var DatePicker = function (props) {
    var _a, _b, _c;
    var date = props.date, onChange = props.onChange, localizedNames = props.localizedNames, className = props.className, style = props.style, _d = props.setFocus, setFocus = _d === void 0 ? false : _d, _e = props.showTime, showTime = _e === void 0 ? false : _e, _f = props.use12Hours, use12Hours = _f === void 0 ? false : _f, precision = props.precision, hourStep = props.hourStep, minuteStep = props.minuteStep, secondStep = props.secondStep, rest = __rest(props, ["date", "onChange", "localizedNames", "className", "style", "setFocus", "showTime", "use12Hours", "precision", "hourStep", "minuteStep", "secondStep"]);
    useTheme();
    var monthNames = (_a = localizedNames === null || localizedNames === void 0 ? void 0 : localizedNames.months) !== null && _a !== void 0 ? _a : defaultMonths;
    var shortDays = (_b = localizedNames === null || localizedNames === void 0 ? void 0 : localizedNames.shortDays) !== null && _b !== void 0 ? _b : defaultShortDays;
    var longDays = (_c = localizedNames === null || localizedNames === void 0 ? void 0 : localizedNames.days) !== null && _c !== void 0 ? _c : defaultLongDays;
    var _g = React.useState(date), selectedDay = _g[0], setSelectedDay = _g[1];
    var _h = React.useState(selectedDay !== null && selectedDay !== void 0 ? selectedDay : new Date()), focusedDay = _h[0], setFocusedDay = _h[1];
    var _j = React.useState(selectedDay ? selectedDay.getMonth() : new Date().getMonth()), displayedMonthIndex = _j[0], setDisplayedMonthIndex = _j[1];
    var _k = React.useState(selectedDay ? selectedDay.getFullYear() : new Date().getFullYear()), displayedYear = _k[0], setDisplayedYear = _k[1];
    // Used to focus days only when days are changed
    // e.g. without this, when changing months day would be focused
    var needFocus = React.useRef(setFocus);
    React.useEffect(function () {
        if (needFocus.current) {
            needFocus.current = false;
        }
    });
    var setMonthAndYear = React.useCallback(function (newMonth, newYear) {
        setDisplayedMonthIndex(newMonth);
        setDisplayedYear(newYear);
    }, []);
    React.useEffect(function () {
        var currentDate = new Date();
        setSelectedDay(date);
        setFocusedDay(date !== null && date !== void 0 ? date : currentDate);
        setMonthAndYear(date ? date.getMonth() : currentDate.getMonth(), date ? date.getFullYear() : currentDate.getFullYear());
    }, [date, setMonthAndYear]);
    var days = React.useMemo(function () {
        var offsetToFirst = new Date(displayedYear, displayedMonthIndex, 1).getDay();
        // if its sunday, show one week before
        if (0 === offsetToFirst) {
            offsetToFirst = 7;
        }
        var daysInMonth = [];
        // generate 6 weeks of dates
        for (var i = 1; i <= 42; i++) {
            var adjustedDay = i - offsetToFirst;
            daysInMonth.push(new Date(displayedYear, displayedMonthIndex, adjustedDay));
        }
        return daysInMonth;
    }, [displayedMonthIndex, displayedYear]);
    var weeks = React.useMemo(function () {
        var weeksInMonth = [];
        var weekCount = Math.ceil(days.length / 7);
        for (var i = 0; i < weekCount; i++) {
            weeksInMonth.push(days.slice(i * 7, (i + 1) * 7));
        }
        return weeksInMonth;
    }, [days]);
    var getNewFocusedDate = function (newYear, newMonth) {
        var currentDate = selectedDay !== null && selectedDay !== void 0 ? selectedDay : new Date();
        var newDate = new Date(newYear, newMonth, currentDate.getDate(), currentDate.getHours(), currentDate.getMinutes(), currentDate.getSeconds());
        return newDate;
    };
    var handleMoveToPreviousMonth = function () {
        var newMonth = displayedMonthIndex !== 0 ? displayedMonthIndex - 1 : 11;
        var newYear = displayedMonthIndex !== 0 ? displayedYear : displayedYear - 1;
        setMonthAndYear(newMonth, newYear);
        setFocusedDay(getNewFocusedDate(newYear, newMonth));
    };
    var handleMoveToNextMonth = function () {
        var newMonth = displayedMonthIndex !== 11 ? displayedMonthIndex + 1 : 0;
        var newYear = displayedMonthIndex !== 11 ? displayedYear : displayedYear + 1;
        setMonthAndYear(newMonth, newYear);
        setFocusedDay(getNewFocusedDate(newYear, newMonth));
    };
    var onDayClick = function (day) {
        if (day.getMonth() !== (selectedDay === null || selectedDay === void 0 ? void 0 : selectedDay.getMonth())) {
            setMonthAndYear(day.getMonth(), day.getFullYear());
        }
        var currentDate = selectedDay !== null && selectedDay !== void 0 ? selectedDay : new Date();
        var newDate = new Date(day.getFullYear(), day.getMonth(), day.getDate(), currentDate.getHours(), currentDate.getMinutes(), currentDate.getSeconds());
        setSelectedDay(newDate);
        setFocusedDay(newDate);
        onChange === null || onChange === void 0 ? void 0 : onChange(newDate);
    };
    var handleCalendarKeyDown = function (event) {
        if (!focusedDay) {
            return;
        }
        var adjustedFocusedDay = new Date(focusedDay);
        switch (event.key) {
            case 'ArrowDown':
                adjustedFocusedDay.setDate(focusedDay.getDate() + 7);
                if (adjustedFocusedDay.getMonth() !== displayedMonthIndex) {
                    handleMoveToNextMonth();
                }
                setFocusedDay(adjustedFocusedDay);
                needFocus.current = true;
                event.preventDefault();
                break;
            case 'ArrowUp':
                adjustedFocusedDay.setDate(focusedDay.getDate() - 7);
                if (adjustedFocusedDay.getMonth() !== displayedMonthIndex) {
                    handleMoveToPreviousMonth();
                }
                setFocusedDay(adjustedFocusedDay);
                needFocus.current = true;
                event.preventDefault();
                break;
            case 'ArrowLeft':
                adjustedFocusedDay.setDate(focusedDay.getDate() - 1);
                if (adjustedFocusedDay.getMonth() !== displayedMonthIndex) {
                    handleMoveToPreviousMonth();
                }
                setFocusedDay(adjustedFocusedDay);
                needFocus.current = true;
                event.preventDefault();
                break;
            case 'ArrowRight':
                adjustedFocusedDay.setDate(focusedDay.getDate() + 1);
                if (adjustedFocusedDay.getMonth() !== displayedMonthIndex) {
                    handleMoveToNextMonth();
                }
                setFocusedDay(adjustedFocusedDay);
                needFocus.current = true;
                event.preventDefault();
                break;
            case 'Enter':
            case ' ':
            case 'Spacebar':
                onDayClick(focusedDay);
                event.preventDefault();
                break;
        }
    };
    return (React.createElement("div", __assign({ className: cx('iui-date-picker', className), style: style }, rest),
        React.createElement("div", { className: 'iui-calendar' },
            React.createElement("div", { className: 'iui-header' },
                React.createElement("div", { className: 'iui-month-year' },
                    React.createElement(IconButton, { styleType: 'borderless', onClick: handleMoveToPreviousMonth, "aria-label": 'Previous month' },
                        React.createElement(SvgChevronLeft, null)),
                    React.createElement("span", { "aria-live": 'polite' },
                        React.createElement("span", { className: 'iui-month', title: monthNames[displayedMonthIndex] }, monthNames[displayedMonthIndex]),
                        "\u00A0",
                        displayedYear),
                    React.createElement(IconButton, { styleType: 'borderless', onClick: handleMoveToNextMonth, "aria-label": 'Next month' },
                        React.createElement(SvgChevronRight, null))),
                React.createElement("div", { className: 'iui-weekdays' }, shortDays.map(function (day, index) { return (React.createElement("div", { key: day, title: longDays[index] }, day)); }))),
            React.createElement("div", { className: 'iui-dates', onKeyDown: handleCalendarKeyDown, role: 'listbox' }, weeks.map(function (weekDays, weekIndex) {
                return (React.createElement("div", { key: "week-" + displayedMonthIndex + "-" + weekIndex, className: 'iui-week' }, weekDays.map(function (weekDay, dayIndex) {
                    var dateValue = weekDay.getDate();
                    return (React.createElement("div", { key: "day-" + displayedMonthIndex + "-" + dayIndex, className: cx('iui-date', {
                            'iui-outside-month': weekDay.getMonth() !== displayedMonthIndex,
                            'iui-today': isSameDay(weekDay, new Date()),
                            'iui-selected': isSameDay(weekDay, selectedDay),
                        }), onClick: function () { return onDayClick(weekDay); }, role: 'option', tabIndex: isSameDay(weekDay, focusedDay) ? 0 : -1, ref: function (element) {
                            return isSameDay(weekDay, focusedDay) &&
                                needFocus.current &&
                                (element === null || element === void 0 ? void 0 : element.focus());
                        } }, dateValue));
                })));
            }))),
        showTime && (React.createElement(TimePicker, { date: selectedDay, use12Hours: use12Hours, precision: precision, hourStep: hourStep, minuteStep: minuteStep, secondStep: secondStep, onChange: function (date) { return onChange === null || onChange === void 0 ? void 0 : onChange(date); } }))));
};
export default DatePicker;
