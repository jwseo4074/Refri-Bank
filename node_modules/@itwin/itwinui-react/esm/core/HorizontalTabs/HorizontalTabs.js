var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Bentley Systems, Incorporated. All rights reserved.
 * See LICENSE.md in the project root for license terms and full copyright notice.
 *--------------------------------------------------------------------------------------------*/
import cx from 'classnames';
import React from 'react';
import { useTheme } from '../utils/hooks/useTheme';
import '@itwin/itwinui-css/css/tabs.css';
import { useResizeObserver } from '../utils/hooks/useResizeObserver';
import { useMergedRefs } from '../utils/hooks/useMergedRefs';
import { HorizontalTab } from './HorizontalTab';
import { getBoundedValue } from '../utils/common';
/**
 * Tabs organize and allow navigation between groups of content that are related and at the same level of hierarchy.
 * @example
 * const tabs = [
 *   <HorizontalTab label='Label 1' />,
 *   <HorizontalTab label='Label 2' />,
 *   <HorizontalTab label='Label 3' />,
 * ];
 * <HorizontalTabs labels={tabs} />
 *
 * @example
 * const tabsWithSublabels = [
 *   <HorizontalTab label='Label 1' sublabel='First tab' />,
 *   <HorizontalTab label='Label 2' sublabel='Active tab' />,
 * ];
 * <HorizontalTabs labels={tabsWithSublabels} activeIndex={1} />
 *
 * @example
 * const tabsWithIcons = [
 *   <HorizontalTab label='Label 1' icon={<SvgPlaceholder />} />,
 *   <HorizontalTab label='Label 2' icon={<SvgPlaceholder />} />,
 * ];
 * <HorizontalTabs labels={tabsWithIcons} type='pill' />
 */
export var HorizontalTabs = function (props) {
    var labels = props.labels, activeIndex = props.activeIndex, onTabSelected = props.onTabSelected, _a = props.focusActivationMode, focusActivationMode = _a === void 0 ? 'auto' : _a, _b = props.type, type = _b === void 0 ? 'default' : _b, _c = props.color, color = _c === void 0 ? 'blue' : _c, tabsClassName = props.tabsClassName, contentClassName = props.contentClassName, children = props.children, rest = __rest(props, ["labels", "activeIndex", "onTabSelected", "focusActivationMode", "type", "color", "tabsClassName", "contentClassName", "children"]);
    useTheme();
    var tablistRef = React.useRef(null);
    var _d = React.useState(function () { var _a; return (_a = tablistRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width; }), tabsWidth = _d[0], setTabsWidth = _d[1];
    var updateTabsWidth = React.useCallback(function (_a) {
        var width = _a.width;
        return setTabsWidth(width);
    }, []);
    var tablistSizeRef = useResizeObserver(updateTabsWidth)[0];
    var refs = useMergedRefs(tablistRef, tablistSizeRef);
    var _e = React.useState(function () {
        return activeIndex != null
            ? getBoundedValue(activeIndex, 0, labels.length - 1)
            : 0;
    }), currentActiveIndex = _e[0], setCurrentActiveIndex = _e[1];
    React.useLayoutEffect(function () {
        if (activeIndex != null && currentActiveIndex !== activeIndex) {
            setCurrentActiveIndex(getBoundedValue(activeIndex, 0, labels.length - 1));
        }
    }, [activeIndex, currentActiveIndex, labels.length]);
    var _f = React.useState({}), stripeStyle = _f[0], setStripeStyle = _f[1];
    React.useLayoutEffect(function () {
        var _a, _b;
        if (type !== 'default') {
            var activeTab = (_a = tablistRef.current) === null || _a === void 0 ? void 0 : _a.children[currentActiveIndex];
            setStripeStyle({
                width: activeTab === null || activeTab === void 0 ? void 0 : activeTab.getBoundingClientRect().width,
                left: (_b = activeTab) === null || _b === void 0 ? void 0 : _b.offsetLeft,
            });
        }
    }, [currentActiveIndex, type, tabsWidth]);
    var _g = React.useState(), focusedIndex = _g[0], setFocusedIndex = _g[1];
    React.useEffect(function () {
        var _a;
        if (tablistRef.current && focusedIndex !== undefined) {
            var tab = tablistRef.current.querySelectorAll('.iui-tab')[focusedIndex];
            (_a = tab) === null || _a === void 0 ? void 0 : _a.focus();
        }
    }, [focusedIndex]);
    var _h = React.useState(false), hasSublabel = _h[0], setHasSublabel = _h[1]; // used for setting size
    React.useLayoutEffect(function () {
        var _a;
        setHasSublabel(type !== 'pill' && // pill tabs should never have sublabels
            !!((_a = tablistRef.current) === null || _a === void 0 ? void 0 : _a.querySelector('.iui-tab-description')));
    }, [type]);
    var onTabClick = function (index) {
        if (onTabSelected) {
            onTabSelected(index);
        }
        setCurrentActiveIndex(index);
    };
    var onKeyDown = function (event) {
        // alt + left/right is used by browser / assistive technologies
        if (event.altKey) {
            return;
        }
        var isTabDisabled = function (index) {
            var tab = labels[index];
            return React.isValidElement(tab) && tab.props.disabled;
        };
        var focusTabAt = function (index) {
            setFocusedIndex(index);
            focusActivationMode === 'auto' && onTabClick(index);
        };
        var newIndex = focusedIndex !== null && focusedIndex !== void 0 ? focusedIndex : currentActiveIndex;
        switch (event.key) {
            case 'ArrowRight': {
                do {
                    newIndex = (newIndex + 1 + labels.length) % labels.length;
                } while (isTabDisabled(newIndex) && newIndex !== focusedIndex);
                focusTabAt(newIndex);
                event.preventDefault();
                break;
            }
            case 'ArrowLeft': {
                do {
                    newIndex = (newIndex - 1 + labels.length) % labels.length;
                } while (isTabDisabled(newIndex) && newIndex !== focusedIndex);
                focusTabAt(newIndex);
                event.preventDefault();
                break;
            }
            case 'Enter':
            case ' ':
            case 'Spacebar': {
                event.preventDefault();
                if (focusActivationMode === 'manual' && focusedIndex !== undefined) {
                    onTabClick(focusedIndex);
                }
                break;
            }
            default:
                break;
        }
    };
    return (React.createElement("div", { className: 'iui-tabs-wrapper' },
        React.createElement("ul", __assign({ className: cx('iui-tabs', "iui-" + type, {
                'iui-green': color === 'green',
                'iui-animated': type !== 'default',
                'iui-large': hasSublabel,
            }, tabsClassName), role: 'tablist', ref: refs, onKeyDown: onKeyDown }, rest), labels.map(function (label, index) {
            var onClick = function () {
                setFocusedIndex(index);
                onTabClick(index);
            };
            return (React.createElement("li", { key: index }, !React.isValidElement(label) ? (React.createElement(HorizontalTab, { label: label, className: cx({
                    'iui-active': index === currentActiveIndex,
                }), tabIndex: index === currentActiveIndex ? 0 : -1, onClick: onClick, "aria-selected": index === currentActiveIndex })) : (React.cloneElement(label, {
                className: cx(label.props.className, {
                    'iui-active': index === currentActiveIndex,
                }),
                'aria-selected': index === currentActiveIndex,
                tabIndex: index === currentActiveIndex ? 0 : -1,
                onClick: function (args) {
                    var _a, _b;
                    onClick();
                    (_b = (_a = label.props).onClick) === null || _b === void 0 ? void 0 : _b.call(_a, args);
                },
            }))));
        })),
        type !== 'default' && (React.createElement("div", { className: 'iui-tab-stripe', style: stripeStyle })),
        children && (React.createElement("div", { className: cx('iui-tabs-content', contentClassName), role: 'tabpanel' }, children))));
};
export default HorizontalTabs;
